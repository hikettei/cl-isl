;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; The only manual tweaks to this file are the in-package form right at
;;; the start, that enum definitions have been deleted in favor of using
;;; cffi-grovel, and that defconstants with non-trivial values (like
;;; strings) use alexandria:define-constant.  If you create a new version
;;; of this file with swig/Makefile, you should reapply these tweaks.

(in-package #:cl-isl)

(cffi:defcstruct isl_stats
  (gbr_solved_lps :long))

(cffi:defcfun ("isl_stat_non_null" isl_stat_non_null) isl_stat
  (obj :pointer))

(cffi:defcfun ("isl_bool_not" isl_bool_not) isl_bool
  (b isl_bool))

(cffi:defcfun ("isl_bool_ok" isl_bool_ok) isl_bool
  (b :int))

(cffi:defcfun ("isl_malloc_or_die" isl_malloc_or_die) :pointer
  (ctx :pointer)
  (size :pointer))

(cffi:defcfun ("isl_calloc_or_die" isl_calloc_or_die) :pointer
  (ctx :pointer)
  (nmemb :pointer)
  (size :pointer))

(cffi:defcfun ("isl_realloc_or_die" isl_realloc_or_die) :pointer
  (ctx :pointer)
  (ptr :pointer)
  (size :pointer))

(cffi:defcfun ("isl_handle_error" isl_handle_error) :void
  (ctx :pointer)
  (error isl_error)
  (msg :string)
  (file :string)
  (line :int))

(cffi:defcfun ("isl_ctx_options" isl_ctx_options) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_alloc_with_options" isl_ctx_alloc_with_options) :pointer
  (args :pointer)
  (opt :pointer))

(cffi:defcfun ("isl_ctx_alloc" isl_ctx_alloc) :pointer)

(cffi:defcfun ("isl_ctx_peek_options" isl_ctx_peek_options) :pointer
  (ctx :pointer)
  (args :pointer))

(cffi:defcfun ("isl_ctx_parse_options" isl_ctx_parse_options) :int
  (ctx :pointer)
  (argc :int)
  (argv :pointer)
  (flags :unsigned-int))

(cffi:defcfun ("isl_ctx_ref" isl_ctx_ref) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_deref" isl_ctx_deref) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_free" isl_ctx_free) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_abort" isl_ctx_abort) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_resume" isl_ctx_resume) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_aborted" isl_ctx_aborted) :int
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_set_max_operations" isl_ctx_set_max_operations) :void
  (ctx :pointer)
  (max_operations :unsigned-long))

(cffi:defcfun ("isl_ctx_get_max_operations" isl_ctx_get_max_operations) :unsigned-long
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_reset_operations" isl_ctx_reset_operations) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_last_error" isl_ctx_last_error) isl_error
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_last_error_msg" isl_ctx_last_error_msg) :string
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_last_error_file" isl_ctx_last_error_file) :string
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_last_error_line" isl_ctx_last_error_line) :int
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_reset_error" isl_ctx_reset_error) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_set_error" isl_ctx_set_error) :void
  (ctx :pointer)
  (error isl_error))

(cffi:defcstruct isl_maybe_ISL_TYPE
  (valid isl_bool)
  (value :pointer))

(cffi:defcfun ("isl_aff_zero_on_domain" isl_aff_zero_on_domain) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_aff_val_on_domain_space" isl_aff_val_on_domain_space) :pointer
  (space :pointer)
  (val :pointer))

(cffi:defcfun ("isl_aff_val_on_domain" isl_aff_val_on_domain) :pointer
  (ls :pointer)
  (val :pointer))

(cffi:defcfun ("isl_aff_var_on_domain" isl_aff_var_on_domain) :pointer
  (ls :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_aff_nan_on_domain" isl_aff_nan_on_domain) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_aff_param_on_domain_space_id" isl_aff_param_on_domain_space_id) :pointer
  (space :pointer)
  (id :pointer))

(cffi:defcfun ("isl_aff_copy" isl_aff_copy) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_free" isl_aff_free) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_ctx" isl_aff_get_ctx) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_hash" isl_aff_get_hash) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_involves_locals" isl_aff_involves_locals) isl_bool
  (aff :pointer))

(cffi:defcfun ("isl_aff_dim" isl_aff_dim) :int
  (aff :pointer)
  (type :pointer))

(cffi:defcfun ("isl_aff_involves_dims" isl_aff_involves_dims) isl_bool
  (aff :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_aff_get_domain_space" isl_aff_get_domain_space) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_space" isl_aff_get_space) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_domain_local_space" isl_aff_get_domain_local_space) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_local_space" isl_aff_get_local_space) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_dim_name" isl_aff_get_dim_name) :string
  (aff :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_aff_get_constant_val" isl_aff_get_constant_val) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_coefficient_val" isl_aff_get_coefficient_val) :pointer
  (aff :pointer)
  (type :pointer)
  (pos :int))

(cffi:defcfun ("isl_aff_coefficient_sgn" isl_aff_coefficient_sgn) :int
  (aff :pointer)
  (type :pointer)
  (pos :int))

(cffi:defcfun ("isl_aff_get_denominator_val" isl_aff_get_denominator_val) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_set_constant_si" isl_aff_set_constant_si) :pointer
  (aff :pointer)
  (v :int))

(cffi:defcfun ("isl_aff_set_constant_val" isl_aff_set_constant_val) :pointer
  (aff :pointer)
  (v :pointer))

(cffi:defcfun ("isl_aff_set_coefficient_si" isl_aff_set_coefficient_si) :pointer
  (aff :pointer)
  (type :pointer)
  (pos :int)
  (v :int))

(cffi:defcfun ("isl_aff_set_coefficient_val" isl_aff_set_coefficient_val) :pointer
  (aff :pointer)
  (type :pointer)
  (pos :int)
  (v :pointer))

(cffi:defcfun ("isl_aff_add_constant_si" isl_aff_add_constant_si) :pointer
  (aff :pointer)
  (v :int))

(cffi:defcfun ("isl_aff_add_constant_val" isl_aff_add_constant_val) :pointer
  (aff :pointer)
  (v :pointer))

(cffi:defcfun ("isl_aff_add_constant_num_si" isl_aff_add_constant_num_si) :pointer
  (aff :pointer)
  (v :int))

(cffi:defcfun ("isl_aff_add_coefficient_si" isl_aff_add_coefficient_si) :pointer
  (aff :pointer)
  (type :pointer)
  (pos :int)
  (v :int))

(cffi:defcfun ("isl_aff_add_coefficient_val" isl_aff_add_coefficient_val) :pointer
  (aff :pointer)
  (type :pointer)
  (pos :int)
  (v :pointer))

(cffi:defcfun ("isl_aff_is_cst" isl_aff_is_cst) isl_bool
  (aff :pointer))

(cffi:defcfun ("isl_aff_set_tuple_id" isl_aff_set_tuple_id) :pointer
  (aff :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_aff_set_dim_name" isl_aff_set_dim_name) :pointer
  (aff :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_aff_set_dim_id" isl_aff_set_dim_id) :pointer
  (aff :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_aff_find_dim_by_name" isl_aff_find_dim_by_name) :int
  (aff :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_aff_plain_is_equal" isl_aff_plain_is_equal) isl_bool
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_plain_is_zero" isl_aff_plain_is_zero) isl_bool
  (aff :pointer))

(cffi:defcfun ("isl_aff_is_nan" isl_aff_is_nan) isl_bool
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_div" isl_aff_get_div) :pointer
  (aff :pointer)
  (pos :int))

(cffi:defcfun ("isl_aff_from_range" isl_aff_from_range) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_neg" isl_aff_neg) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_ceil" isl_aff_ceil) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_floor" isl_aff_floor) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_mod_val" isl_aff_mod_val) :pointer
  (aff :pointer)
  (mod :pointer))

(cffi:defcfun ("isl_aff_mul" isl_aff_mul) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_div" isl_aff_div) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_add" isl_aff_add) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_sub" isl_aff_sub) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_scale_val" isl_aff_scale_val) :pointer
  (aff :pointer)
  (v :pointer))

(cffi:defcfun ("isl_aff_scale_down_ui" isl_aff_scale_down_ui) :pointer
  (aff :pointer)
  (f :unsigned-int))

(cffi:defcfun ("isl_aff_scale_down_val" isl_aff_scale_down_val) :pointer
  (aff :pointer)
  (v :pointer))

(cffi:defcfun ("isl_aff_insert_dims" isl_aff_insert_dims) :pointer
  (aff :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_aff_add_dims" isl_aff_add_dims) :pointer
  (aff :pointer)
  (type :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_aff_move_dims" isl_aff_move_dims) :pointer
  (aff :pointer)
  (dst_type :pointer)
  (dst_pos :unsigned-int)
  (src_type :pointer)
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_aff_drop_dims" isl_aff_drop_dims) :pointer
  (aff :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_aff_project_domain_on_params" isl_aff_project_domain_on_params) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_unbind_params_insert_domain" isl_aff_unbind_params_insert_domain) :pointer
  (aff :pointer)
  (domain :pointer))

(cffi:defcfun ("isl_aff_align_params" isl_aff_align_params) :pointer
  (aff :pointer)
  (model :pointer))

(cffi:defcfun ("isl_aff_gist" isl_aff_gist) :pointer
  (aff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_aff_gist_params" isl_aff_gist_params) :pointer
  (aff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_aff_eval" isl_aff_eval) :pointer
  (aff :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_aff_pullback_aff" isl_aff_pullback_aff) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_pullback_multi_aff" isl_aff_pullback_multi_aff) :pointer
  (aff :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_aff_zero_basic_set" isl_aff_zero_basic_set) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_neg_basic_set" isl_aff_neg_basic_set) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_eq_basic_set" isl_aff_eq_basic_set) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_eq_set" isl_aff_eq_set) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_ne_set" isl_aff_ne_set) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_le_basic_set" isl_aff_le_basic_set) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_le_set" isl_aff_le_set) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_lt_basic_set" isl_aff_lt_basic_set) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_lt_set" isl_aff_lt_set) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_ge_basic_set" isl_aff_ge_basic_set) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_ge_set" isl_aff_ge_set) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_gt_basic_set" isl_aff_gt_basic_set) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_gt_set" isl_aff_gt_set) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_bind_id" isl_aff_bind_id) :pointer
  (aff :pointer)
  (id :pointer))

(cffi:defcfun ("isl_aff_read_from_str" isl_aff_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_aff_to_str" isl_aff_to_str) :string
  (aff :pointer))

(cffi:defcfun ("isl_printer_print_aff" isl_printer_print_aff) :pointer
  (p :pointer)
  (aff :pointer))

(cffi:defcfun ("isl_aff_dump" isl_aff_dump) :void
  (aff :pointer))

(cffi:defcfun ("isl_pw_aff_get_ctx" isl_pw_aff_get_ctx) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_get_hash" isl_pw_aff_get_hash) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_get_domain_space" isl_pw_aff_get_domain_space) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_get_space" isl_pw_aff_get_space) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_from_aff" isl_pw_aff_from_aff) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_pw_aff_empty" isl_pw_aff_empty) :pointer
  (space :pointer))

(cffi:defcfun ("isl_pw_aff_alloc" isl_pw_aff_alloc) :pointer
  (set :pointer)
  (aff :pointer))

(cffi:defcfun ("isl_pw_aff_zero_on_domain" isl_pw_aff_zero_on_domain) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_pw_aff_var_on_domain" isl_pw_aff_var_on_domain) :pointer
  (ls :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_pw_aff_nan_on_domain" isl_pw_aff_nan_on_domain) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_pw_aff_val_on_domain" isl_pw_aff_val_on_domain) :pointer
  (domain :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_aff_param_on_domain_id" isl_pw_aff_param_on_domain_id) :pointer
  (domain :pointer)
  (id :pointer))

(cffi:defcfun ("isl_set_indicator_function" isl_set_indicator_function) :pointer
  (set :pointer))

(cffi:defcfun ("isl_pw_aff_get_dim_name" isl_pw_aff_get_dim_name) :string
  (pa :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_pw_aff_has_dim_id" isl_pw_aff_has_dim_id) isl_bool
  (pa :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_pw_aff_get_dim_id" isl_pw_aff_get_dim_id) :pointer
  (pa :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_pw_aff_set_dim_id" isl_pw_aff_set_dim_id) :pointer
  (pma :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_pw_aff_find_dim_by_name" isl_pw_aff_find_dim_by_name) :int
  (pa :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_pw_aff_is_empty" isl_pw_aff_is_empty) isl_bool
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_involves_nan" isl_pw_aff_involves_nan) isl_bool
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_plain_cmp" isl_pw_aff_plain_cmp) :int
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_plain_is_equal" isl_pw_aff_plain_is_equal) isl_bool
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_is_equal" isl_pw_aff_is_equal) isl_bool
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_union_min" isl_pw_aff_union_min) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_union_max" isl_pw_aff_union_max) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_union_add" isl_pw_aff_union_add) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_copy" isl_pw_aff_copy) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_free" isl_pw_aff_free) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_dim" isl_pw_aff_dim) :int
  (pwaff :pointer)
  (type :pointer))

(cffi:defcfun ("isl_pw_aff_involves_param_id" isl_pw_aff_involves_param_id) isl_bool
  (pa :pointer)
  (id :pointer))

(cffi:defcfun ("isl_pw_aff_involves_dims" isl_pw_aff_involves_dims) isl_bool
  (pwaff :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_aff_is_cst" isl_pw_aff_is_cst) isl_bool
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_project_domain_on_params" isl_pw_aff_project_domain_on_params) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_align_params" isl_pw_aff_align_params) :pointer
  (pwaff :pointer)
  (model :pointer))

(cffi:defcfun ("isl_pw_aff_drop_unused_params" isl_pw_aff_drop_unused_params) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_has_tuple_id" isl_pw_aff_has_tuple_id) isl_bool
  (pa :pointer)
  (type :pointer))

(cffi:defcfun ("isl_pw_aff_get_tuple_id" isl_pw_aff_get_tuple_id) :pointer
  (pa :pointer)
  (type :pointer))

(cffi:defcfun ("isl_pw_aff_set_tuple_id" isl_pw_aff_set_tuple_id) :pointer
  (pwaff :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_pw_aff_reset_tuple_id" isl_pw_aff_reset_tuple_id) :pointer
  (pa :pointer)
  (type :pointer))

(cffi:defcfun ("isl_pw_aff_reset_user" isl_pw_aff_reset_user) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_params" isl_pw_aff_params) :pointer
  (pwa :pointer))

(cffi:defcfun ("isl_pw_aff_domain" isl_pw_aff_domain) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_from_range" isl_pw_aff_from_range) :pointer
  (pwa :pointer))

(cffi:defcfun ("isl_pw_aff_min" isl_pw_aff_min) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_max" isl_pw_aff_max) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_mul" isl_pw_aff_mul) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_div" isl_pw_aff_div) :pointer
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_add" isl_pw_aff_add) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_sub" isl_pw_aff_sub) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_neg" isl_pw_aff_neg) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_ceil" isl_pw_aff_ceil) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_floor" isl_pw_aff_floor) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_mod_val" isl_pw_aff_mod_val) :pointer
  (pa :pointer)
  (mod :pointer))

(cffi:defcfun ("isl_pw_aff_tdiv_q" isl_pw_aff_tdiv_q) :pointer
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_tdiv_r" isl_pw_aff_tdiv_r) :pointer
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_intersect_params" isl_pw_aff_intersect_params) :pointer
  (pa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_aff_intersect_domain" isl_pw_aff_intersect_domain) :pointer
  (pa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_aff_intersect_domain_wrapped_domain" isl_pw_aff_intersect_domain_wrapped_domain) :pointer
  (pa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_aff_intersect_domain_wrapped_range" isl_pw_aff_intersect_domain_wrapped_range) :pointer
  (pa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_aff_subtract_domain" isl_pw_aff_subtract_domain) :pointer
  (pa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_aff_cond" isl_pw_aff_cond) :pointer
  (cond :pointer)
  (pwaff_true :pointer)
  (pwaff_false :pointer))

(cffi:defcfun ("isl_pw_aff_scale_val" isl_pw_aff_scale_val) :pointer
  (pa :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_aff_scale_down_val" isl_pw_aff_scale_down_val) :pointer
  (pa :pointer)
  (f :pointer))

(cffi:defcfun ("isl_pw_aff_insert_dims" isl_pw_aff_insert_dims) :pointer
  (pwaff :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_aff_add_dims" isl_pw_aff_add_dims) :pointer
  (pwaff :pointer)
  (type :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_aff_move_dims" isl_pw_aff_move_dims) :pointer
  (pa :pointer)
  (dst_type :pointer)
  (dst_pos :unsigned-int)
  (src_type :pointer)
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_aff_drop_dims" isl_pw_aff_drop_dims) :pointer
  (pwaff :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_aff_coalesce" isl_pw_aff_coalesce) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_aff_gist" isl_pw_aff_gist) :pointer
  (pwaff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_pw_aff_gist_params" isl_pw_aff_gist_params) :pointer
  (pwaff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_pw_aff_eval" isl_pw_aff_eval) :pointer
  (pa :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_pw_aff_pullback_multi_aff" isl_pw_aff_pullback_multi_aff) :pointer
  (pa :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_pw_aff_pullback_pw_multi_aff" isl_pw_aff_pullback_pw_multi_aff) :pointer
  (pa :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_pw_aff_pullback_multi_pw_aff" isl_pw_aff_pullback_multi_pw_aff) :pointer
  (pa :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_pw_aff_n_piece" isl_pw_aff_n_piece) :int
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_foreach_piece" isl_pw_aff_foreach_piece) isl_stat
  (pwaff :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_aff_isa_aff" isl_pw_aff_isa_aff) isl_bool
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_as_aff" isl_pw_aff_as_aff) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_set_from_pw_aff" isl_set_from_pw_aff) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_map_from_pw_aff" isl_map_from_pw_aff) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_pos_set" isl_pw_aff_pos_set) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_nonneg_set" isl_pw_aff_nonneg_set) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_zero_set" isl_pw_aff_zero_set) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_non_zero_set" isl_pw_aff_non_zero_set) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_eq_set" isl_pw_aff_eq_set) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_ne_set" isl_pw_aff_ne_set) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_le_set" isl_pw_aff_le_set) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_lt_set" isl_pw_aff_lt_set) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_ge_set" isl_pw_aff_ge_set) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_gt_set" isl_pw_aff_gt_set) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_eq_map" isl_pw_aff_eq_map) :pointer
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_lt_map" isl_pw_aff_lt_map) :pointer
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_gt_map" isl_pw_aff_gt_map) :pointer
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_bind_domain" isl_pw_aff_bind_domain) :pointer
  (pa :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_pw_aff_bind_domain_wrapped_domain" isl_pw_aff_bind_domain_wrapped_domain) :pointer
  (pa :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_pw_aff_bind_id" isl_pw_aff_bind_id) :pointer
  (pa :pointer)
  (id :pointer))

(cffi:defcfun ("isl_pw_aff_read_from_str" isl_pw_aff_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_pw_aff_to_str" isl_pw_aff_to_str) :string
  (pa :pointer))

(cffi:defcfun ("isl_printer_print_pw_aff" isl_printer_print_pw_aff) :pointer
  (p :pointer)
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_dump" isl_pw_aff_dump) :void
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_list_min" isl_pw_aff_list_min) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_max" isl_pw_aff_list_max) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_eq_set" isl_pw_aff_list_eq_set) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_aff_list_ne_set" isl_pw_aff_list_ne_set) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_aff_list_le_set" isl_pw_aff_list_le_set) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_aff_list_lt_set" isl_pw_aff_list_lt_set) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_aff_list_ge_set" isl_pw_aff_list_ge_set) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_aff_list_gt_set" isl_pw_aff_list_gt_set) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_multi_aff_get_ctx" isl_multi_aff_get_ctx) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_get_space" isl_multi_aff_get_space) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_get_domain_space" isl_multi_aff_get_domain_space) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_from_aff_list" isl_multi_aff_from_aff_list) :pointer
  (space :pointer)
  (list :pointer))

(cffi:defcfun ("isl_multi_aff_copy" isl_multi_aff_copy) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_free" isl_multi_aff_free) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_plain_is_equal" isl_multi_aff_plain_is_equal) isl_bool
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_reset_user" isl_multi_aff_reset_user) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_size" isl_multi_aff_size) :int
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_get_at" isl_multi_aff_get_at) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_aff_get_aff" isl_multi_aff_get_aff) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_aff_set_at" isl_multi_aff_set_at) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_aff_set_aff" isl_multi_aff_set_aff) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_aff_range_splice" isl_multi_aff_range_splice) :pointer
  (multi1 :pointer)
  (pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_flatten_range" isl_multi_aff_flatten_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_flat_range_product" isl_multi_aff_flat_range_product) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_range_product" isl_multi_aff_range_product) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_factor_range" isl_multi_aff_factor_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_range_is_wrapping" isl_multi_aff_range_is_wrapping) isl_bool
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_range_factor_domain" isl_multi_aff_range_factor_domain) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_range_factor_range" isl_multi_aff_range_factor_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_align_params" isl_multi_aff_align_params) :pointer
  (multi :pointer)
  (model :pointer))

(cffi:defcfun ("isl_multi_aff_from_range" isl_multi_aff_from_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_identity_multi_aff" isl_multi_aff_identity_multi_aff) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_identity" isl_multi_aff_identity) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_aff_identity_on_domain_space" isl_multi_aff_identity_on_domain_space) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_aff_plain_cmp" isl_multi_aff_plain_cmp) :int
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_scale_val" isl_multi_aff_scale_val) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_aff_scale_down_val" isl_multi_aff_scale_down_val) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_aff_scale_multi_val" isl_multi_aff_scale_multi_val) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_aff_scale_down_multi_val" isl_multi_aff_scale_down_multi_val) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_aff_mod_multi_val" isl_multi_aff_mod_multi_val) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_aff_add" isl_multi_aff_add) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_sub" isl_multi_aff_sub) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_neg" isl_multi_aff_neg) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_zero" isl_multi_aff_zero) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_aff_involves_nan" isl_multi_aff_involves_nan) isl_bool
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_dim" isl_multi_aff_dim) :int
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_aff_drop_dims" isl_multi_aff_drop_dims) :pointer
  (multi :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_aff_involves_dims" isl_multi_aff_involves_dims) isl_bool
  (multi :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_aff_insert_dims" isl_multi_aff_insert_dims) :pointer
  (multi :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_aff_add_dims" isl_multi_aff_add_dims) :pointer
  (multi :pointer)
  (type :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_aff_project_domain_on_params" isl_multi_aff_project_domain_on_params) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_involves_locals" isl_multi_aff_involves_locals) isl_bool
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_find_dim_by_name" isl_multi_aff_find_dim_by_name) :int
  (multi :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_multi_aff_find_dim_by_id" isl_multi_aff_find_dim_by_id) :int
  (multi :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_multi_aff_get_dim_id" isl_multi_aff_get_dim_id) :pointer
  (multi :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_multi_aff_set_dim_name" isl_multi_aff_set_dim_name) :pointer
  (multi :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_multi_aff_set_dim_id" isl_multi_aff_set_dim_id) :pointer
  (multi :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_multi_aff_get_tuple_name" isl_multi_aff_get_tuple_name) :string
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_aff_has_tuple_id" isl_multi_aff_has_tuple_id) isl_bool
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_aff_get_tuple_id" isl_multi_aff_get_tuple_id) :pointer
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_aff_set_tuple_name" isl_multi_aff_set_tuple_name) :pointer
  (multi :pointer)
  (type :pointer)
  (s :string))

(cffi:defcfun ("isl_multi_aff_set_tuple_id" isl_multi_aff_set_tuple_id) :pointer
  (multi :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_multi_aff_reset_tuple_id" isl_multi_aff_reset_tuple_id) :pointer
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_aff_product" isl_multi_aff_product) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_splice" isl_multi_aff_splice) :pointer
  (multi1 :pointer)
  (in_pos :unsigned-int)
  (out_pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_bind_domain" isl_multi_aff_bind_domain) :pointer
  (multi :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_aff_bind_domain_wrapped_domain" isl_multi_aff_bind_domain_wrapped_domain) :pointer
  (multi :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_aff_from_aff" isl_multi_aff_from_aff) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_multi_aff_domain_map" isl_multi_aff_domain_map) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_aff_range_map" isl_multi_aff_range_map) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_aff_project_out_map" isl_multi_aff_project_out_map) :pointer
  (space :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_aff_multi_val_on_space" isl_multi_aff_multi_val_on_space) :pointer
  (space :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_aff_floor" isl_multi_aff_floor) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_multi_aff_gist_params" isl_multi_aff_gist_params) :pointer
  (maff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_multi_aff_gist" isl_multi_aff_gist) :pointer
  (maff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_multi_aff_lift" isl_multi_aff_lift) :pointer
  (maff :pointer)
  (ls :pointer))

(cffi:defcfun ("isl_multi_aff_pullback_multi_aff" isl_multi_aff_pullback_multi_aff) :pointer
  (ma1 :pointer)
  (ma2 :pointer))

(cffi:defcfun ("isl_multi_aff_move_dims" isl_multi_aff_move_dims) :pointer
  (ma :pointer)
  (dst_type :pointer)
  (dst_pos :unsigned-int)
  (src_type :pointer)
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_aff_lex_lt_set" isl_multi_aff_lex_lt_set) :pointer
  (ma1 :pointer)
  (ma2 :pointer))

(cffi:defcfun ("isl_multi_aff_lex_le_set" isl_multi_aff_lex_le_set) :pointer
  (ma1 :pointer)
  (ma2 :pointer))

(cffi:defcfun ("isl_multi_aff_lex_gt_set" isl_multi_aff_lex_gt_set) :pointer
  (ma1 :pointer)
  (ma2 :pointer))

(cffi:defcfun ("isl_multi_aff_lex_ge_set" isl_multi_aff_lex_ge_set) :pointer
  (ma1 :pointer)
  (ma2 :pointer))

(cffi:defcfun ("isl_multi_aff_bind" isl_multi_aff_bind) :pointer
  (ma :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_aff_to_str" isl_multi_aff_to_str) :string
  (ma :pointer))

(cffi:defcfun ("isl_printer_print_multi_aff" isl_printer_print_multi_aff) :pointer
  (p :pointer)
  (maff :pointer))

(cffi:defcfun ("isl_multi_aff_read_from_str" isl_multi_aff_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_multi_aff_dump" isl_multi_aff_dump) :void
  (maff :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_ctx" isl_multi_pw_aff_get_ctx) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_space" isl_multi_pw_aff_get_space) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_domain_space" isl_multi_pw_aff_get_domain_space) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_from_pw_aff_list" isl_multi_pw_aff_from_pw_aff_list) :pointer
  (space :pointer)
  (list :pointer))

(cffi:defcfun ("isl_multi_pw_aff_copy" isl_multi_pw_aff_copy) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_free" isl_multi_pw_aff_free) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_plain_is_equal" isl_multi_pw_aff_plain_is_equal) isl_bool
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_reset_user" isl_multi_pw_aff_reset_user) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_size" isl_multi_pw_aff_size) :int
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_at" isl_multi_pw_aff_get_at) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_pw_aff_get_pw_aff" isl_multi_pw_aff_get_pw_aff) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_pw_aff_set_at" isl_multi_pw_aff_set_at) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_pw_aff_set_pw_aff" isl_multi_pw_aff_set_pw_aff) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_pw_aff_range_splice" isl_multi_pw_aff_range_splice) :pointer
  (multi1 :pointer)
  (pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_flatten_range" isl_multi_pw_aff_flatten_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_flat_range_product" isl_multi_pw_aff_flat_range_product) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_range_product" isl_multi_pw_aff_range_product) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_factor_range" isl_multi_pw_aff_factor_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_range_is_wrapping" isl_multi_pw_aff_range_is_wrapping) isl_bool
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_range_factor_domain" isl_multi_pw_aff_range_factor_domain) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_range_factor_range" isl_multi_pw_aff_range_factor_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_align_params" isl_multi_pw_aff_align_params) :pointer
  (multi :pointer)
  (model :pointer))

(cffi:defcfun ("isl_multi_pw_aff_from_range" isl_multi_pw_aff_from_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_identity_multi_pw_aff" isl_multi_pw_aff_identity_multi_pw_aff) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_identity" isl_multi_pw_aff_identity) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_pw_aff_identity_on_domain_space" isl_multi_pw_aff_identity_on_domain_space) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_pw_aff_scale_val" isl_multi_pw_aff_scale_val) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_pw_aff_scale_down_val" isl_multi_pw_aff_scale_down_val) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_pw_aff_scale_multi_val" isl_multi_pw_aff_scale_multi_val) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_pw_aff_scale_down_multi_val" isl_multi_pw_aff_scale_down_multi_val) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_pw_aff_mod_multi_val" isl_multi_pw_aff_mod_multi_val) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_pw_aff_add" isl_multi_pw_aff_add) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_sub" isl_multi_pw_aff_sub) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_neg" isl_multi_pw_aff_neg) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_zero" isl_multi_pw_aff_zero) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_pw_aff_involves_nan" isl_multi_pw_aff_involves_nan) isl_bool
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_dim" isl_multi_pw_aff_dim) :int
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_pw_aff_drop_dims" isl_multi_pw_aff_drop_dims) :pointer
  (multi :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_pw_aff_involves_dims" isl_multi_pw_aff_involves_dims) isl_bool
  (multi :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_pw_aff_insert_dims" isl_multi_pw_aff_insert_dims) :pointer
  (multi :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_pw_aff_add_dims" isl_multi_pw_aff_add_dims) :pointer
  (multi :pointer)
  (type :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_pw_aff_project_domain_on_params" isl_multi_pw_aff_project_domain_on_params) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_find_dim_by_name" isl_multi_pw_aff_find_dim_by_name) :int
  (multi :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_multi_pw_aff_find_dim_by_id" isl_multi_pw_aff_find_dim_by_id) :int
  (multi :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_dim_id" isl_multi_pw_aff_get_dim_id) :pointer
  (multi :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_multi_pw_aff_set_dim_name" isl_multi_pw_aff_set_dim_name) :pointer
  (multi :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_multi_pw_aff_set_dim_id" isl_multi_pw_aff_set_dim_id) :pointer
  (multi :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_tuple_name" isl_multi_pw_aff_get_tuple_name) :string
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_pw_aff_has_tuple_id" isl_multi_pw_aff_has_tuple_id) isl_bool
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_tuple_id" isl_multi_pw_aff_get_tuple_id) :pointer
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_pw_aff_set_tuple_name" isl_multi_pw_aff_set_tuple_name) :pointer
  (multi :pointer)
  (type :pointer)
  (s :string))

(cffi:defcfun ("isl_multi_pw_aff_set_tuple_id" isl_multi_pw_aff_set_tuple_id) :pointer
  (multi :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_multi_pw_aff_reset_tuple_id" isl_multi_pw_aff_reset_tuple_id) :pointer
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_pw_aff_product" isl_multi_pw_aff_product) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_splice" isl_multi_pw_aff_splice) :pointer
  (multi1 :pointer)
  (in_pos :unsigned-int)
  (out_pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_bind_domain" isl_multi_pw_aff_bind_domain) :pointer
  (multi :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_pw_aff_bind_domain_wrapped_domain" isl_multi_pw_aff_bind_domain_wrapped_domain) :pointer
  (multi :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_pw_aff_involves_param_id" isl_multi_pw_aff_involves_param_id) isl_bool
  (multi :pointer)
  (id :pointer))

(cffi:defcfun ("isl_multi_pw_aff_involves_param_id_list" isl_multi_pw_aff_involves_param_id_list) isl_bool
  (multi :pointer)
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_zero" isl_pw_multi_aff_zero) :pointer
  (space :pointer))

(cffi:defcfun ("isl_pw_multi_aff_identity" isl_pw_multi_aff_identity) :pointer
  (space :pointer))

(cffi:defcfun ("isl_pw_multi_aff_range_map" isl_pw_multi_aff_range_map) :pointer
  (space :pointer))

(cffi:defcfun ("isl_pw_multi_aff_project_out_map" isl_pw_multi_aff_project_out_map) :pointer
  (space :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_from_multi_aff" isl_pw_multi_aff_from_multi_aff) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_from_pw_aff" isl_pw_multi_aff_from_pw_aff) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_pw_multi_aff_alloc" isl_pw_multi_aff_alloc) :pointer
  (set :pointer)
  (maff :pointer))

(cffi:defcfun ("isl_pw_multi_aff_copy" isl_pw_multi_aff_copy) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_free" isl_pw_multi_aff_free) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_dim" isl_pw_multi_aff_dim) :int
  (pma :pointer)
  (type :pointer))

(cffi:defcfun ("isl_pw_multi_aff_involves_param_id" isl_pw_multi_aff_involves_param_id) isl_bool
  (pma :pointer)
  (id :pointer))

(cffi:defcfun ("isl_pw_multi_aff_involves_dims" isl_pw_multi_aff_involves_dims) isl_bool
  (pma :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_get_pw_aff" isl_pw_multi_aff_get_pw_aff) :pointer
  (pma :pointer)
  (pos :int))

(cffi:defcfun ("isl_pw_multi_aff_set_pw_aff" isl_pw_multi_aff_set_pw_aff) :pointer
  (pma :pointer)
  (pos :unsigned-int)
  (pa :pointer))

(cffi:defcfun ("isl_pw_multi_aff_get_ctx" isl_pw_multi_aff_get_ctx) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_get_domain_space" isl_pw_multi_aff_get_domain_space) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_get_space" isl_pw_multi_aff_get_space) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_has_tuple_name" isl_pw_multi_aff_has_tuple_name) isl_bool
  (pma :pointer)
  (type :pointer))

(cffi:defcfun ("isl_pw_multi_aff_get_tuple_name" isl_pw_multi_aff_get_tuple_name) :string
  (pma :pointer)
  (type :pointer))

(cffi:defcfun ("isl_pw_multi_aff_get_tuple_id" isl_pw_multi_aff_get_tuple_id) :pointer
  (pma :pointer)
  (type :pointer))

(cffi:defcfun ("isl_pw_multi_aff_has_tuple_id" isl_pw_multi_aff_has_tuple_id) isl_bool
  (pma :pointer)
  (type :pointer))

(cffi:defcfun ("isl_pw_multi_aff_set_tuple_id" isl_pw_multi_aff_set_tuple_id) :pointer
  (pma :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_pw_multi_aff_reset_tuple_id" isl_pw_multi_aff_reset_tuple_id) :pointer
  (pma :pointer)
  (type :pointer))

(cffi:defcfun ("isl_pw_multi_aff_reset_user" isl_pw_multi_aff_reset_user) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_find_dim_by_name" isl_pw_multi_aff_find_dim_by_name) :int
  (pma :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_pw_multi_aff_drop_dims" isl_pw_multi_aff_drop_dims) :pointer
  (pma :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_domain" isl_pw_multi_aff_domain) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_empty" isl_pw_multi_aff_empty) :pointer
  (space :pointer))

(cffi:defcfun ("isl_pw_multi_aff_from_domain" isl_pw_multi_aff_from_domain) :pointer
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_multi_val_on_domain" isl_pw_multi_aff_multi_val_on_domain) :pointer
  (domain :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_pw_multi_aff_get_dim_name" isl_pw_multi_aff_get_dim_name) :string
  (pma :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_get_dim_id" isl_pw_multi_aff_get_dim_id) :pointer
  (pma :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_set_dim_id" isl_pw_multi_aff_set_dim_id) :pointer
  (pma :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_pw_multi_aff_involves_nan" isl_pw_multi_aff_involves_nan) isl_bool
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_plain_is_equal" isl_pw_multi_aff_plain_is_equal) isl_bool
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_is_equal" isl_pw_multi_aff_is_equal) isl_bool
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_fix_si" isl_pw_multi_aff_fix_si) :pointer
  (pma :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_pw_multi_aff_union_add" isl_pw_multi_aff_union_add) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_neg" isl_pw_multi_aff_neg) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_add" isl_pw_multi_aff_add) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_sub" isl_pw_multi_aff_sub) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_scale_val" isl_pw_multi_aff_scale_val) :pointer
  (pma :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_multi_aff_scale_down_val" isl_pw_multi_aff_scale_down_val) :pointer
  (pma :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_multi_aff_scale_multi_val" isl_pw_multi_aff_scale_multi_val) :pointer
  (pma :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_pw_multi_aff_union_lexmin" isl_pw_multi_aff_union_lexmin) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_union_lexmax" isl_pw_multi_aff_union_lexmax) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_multi_aff_flatten_domain" isl_multi_aff_flatten_domain) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_range_product" isl_pw_multi_aff_range_product) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_flat_range_product" isl_pw_multi_aff_flat_range_product) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_product" isl_pw_multi_aff_product) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_range_factor_domain" isl_pw_multi_aff_range_factor_domain) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_range_factor_range" isl_pw_multi_aff_range_factor_range) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_intersect_params" isl_pw_multi_aff_intersect_params) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_intersect_domain" isl_pw_multi_aff_intersect_domain) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_intersect_domain_wrapped_domain" isl_pw_multi_aff_intersect_domain_wrapped_domain) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_intersect_domain_wrapped_range" isl_pw_multi_aff_intersect_domain_wrapped_range) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_subtract_domain" isl_pw_multi_aff_subtract_domain) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_project_domain_on_params" isl_pw_multi_aff_project_domain_on_params) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_align_params" isl_pw_multi_aff_align_params) :pointer
  (pma :pointer)
  (model :pointer))

(cffi:defcfun ("isl_pw_multi_aff_drop_unused_params" isl_pw_multi_aff_drop_unused_params) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_coalesce" isl_pw_multi_aff_coalesce) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_gist_params" isl_pw_multi_aff_gist_params) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_gist" isl_pw_multi_aff_gist) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_pullback_multi_aff" isl_pw_multi_aff_pullback_multi_aff) :pointer
  (pma :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_pullback_pw_multi_aff" isl_pw_multi_aff_pullback_pw_multi_aff) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_n_piece" isl_pw_multi_aff_n_piece) :int
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_foreach_piece" isl_pw_multi_aff_foreach_piece) isl_stat
  (pma :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_multi_aff_isa_multi_aff" isl_pw_multi_aff_isa_multi_aff) isl_bool
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_as_multi_aff" isl_pw_multi_aff_as_multi_aff) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_map_from_pw_multi_aff" isl_map_from_pw_multi_aff) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_set_from_pw_multi_aff" isl_set_from_pw_multi_aff) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_to_str" isl_pw_multi_aff_to_str) :string
  (pma :pointer))

(cffi:defcfun ("isl_printer_print_pw_multi_aff" isl_printer_print_pw_multi_aff) :pointer
  (p :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_from_set" isl_pw_multi_aff_from_set) :pointer
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_from_map" isl_pw_multi_aff_from_map) :pointer
  (map :pointer))

(cffi:defcfun ("isl_pw_multi_aff_bind_domain" isl_pw_multi_aff_bind_domain) :pointer
  (pma :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_pw_multi_aff_bind_domain_wrapped_domain" isl_pw_multi_aff_bind_domain_wrapped_domain) :pointer
  (pma :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_pw_multi_aff_read_from_str" isl_pw_multi_aff_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_pw_multi_aff_dump" isl_pw_multi_aff_dump) :void
  (pma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_empty_ctx" isl_union_pw_multi_aff_empty_ctx) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_empty_space" isl_union_pw_multi_aff_empty_space) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_empty" isl_union_pw_multi_aff_empty) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_aff" isl_union_pw_multi_aff_from_aff) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_pw_multi_aff" isl_union_pw_multi_aff_from_pw_multi_aff) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_domain" isl_union_pw_multi_aff_from_domain) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_multi_val_on_domain" isl_union_pw_multi_aff_multi_val_on_domain) :pointer
  (domain :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_union_pw_aff_param_on_domain_id" isl_union_pw_aff_param_on_domain_id) :pointer
  (domain :pointer)
  (id :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_copy" isl_union_pw_multi_aff_copy) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_free" isl_union_pw_multi_aff_free) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_set_identity_union_pw_multi_aff" isl_union_set_identity_union_pw_multi_aff) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_get_union_pw_aff" isl_union_pw_multi_aff_get_union_pw_aff) :pointer
  (upma :pointer)
  (pos :int))

(cffi:defcfun ("isl_union_pw_multi_aff_add_pw_multi_aff" isl_union_pw_multi_aff_add_pw_multi_aff) :pointer
  (upma :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_get_ctx" isl_union_pw_multi_aff_get_ctx) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_get_space" isl_union_pw_multi_aff_get_space) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_get_pw_multi_aff_list" isl_union_pw_multi_aff_get_pw_multi_aff_list) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_dim" isl_union_pw_multi_aff_dim) :int
  (upma :pointer)
  (type :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_set_dim_name" isl_union_pw_multi_aff_set_dim_name) :pointer
  (upma :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_union_pw_multi_aff_find_dim_by_name" isl_union_pw_multi_aff_find_dim_by_name) :int
  (upma :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_union_pw_multi_aff_drop_dims" isl_union_pw_multi_aff_drop_dims) :pointer
  (upma :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_pw_multi_aff_reset_user" isl_union_pw_multi_aff_reset_user) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_coalesce" isl_union_pw_multi_aff_coalesce) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_gist_params" isl_union_pw_multi_aff_gist_params) :pointer
  (upma :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_gist" isl_union_pw_multi_aff_gist) :pointer
  (upma :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_pullback_union_pw_multi_aff" isl_union_pw_multi_aff_pullback_union_pw_multi_aff) :pointer
  (upma1 :pointer)
  (upma2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_align_params" isl_union_pw_multi_aff_align_params) :pointer
  (upma :pointer)
  (model :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_n_pw_multi_aff" isl_union_pw_multi_aff_n_pw_multi_aff) :int
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_foreach_pw_multi_aff" isl_union_pw_multi_aff_foreach_pw_multi_aff) isl_stat
  (upma :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_extract_pw_multi_aff" isl_union_pw_multi_aff_extract_pw_multi_aff) :pointer
  (upma :pointer)
  (space :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_isa_pw_multi_aff" isl_union_pw_multi_aff_isa_pw_multi_aff) isl_bool
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_as_pw_multi_aff" isl_union_pw_multi_aff_as_pw_multi_aff) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_involves_nan" isl_union_pw_multi_aff_involves_nan) isl_bool
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_plain_is_equal" isl_union_pw_multi_aff_plain_is_equal) isl_bool
  (upma1 :pointer)
  (upma2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_domain" isl_union_pw_multi_aff_domain) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_neg" isl_union_pw_multi_aff_neg) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_add" isl_union_pw_multi_aff_add) :pointer
  (upma1 :pointer)
  (upma2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_union_add" isl_union_pw_multi_aff_union_add) :pointer
  (upma1 :pointer)
  (upma2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_sub" isl_union_pw_multi_aff_sub) :pointer
  (upma1 :pointer)
  (upma2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_scale_val" isl_union_pw_multi_aff_scale_val) :pointer
  (upma :pointer)
  (val :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_scale_down_val" isl_union_pw_multi_aff_scale_down_val) :pointer
  (upma :pointer)
  (val :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_scale_multi_val" isl_union_pw_multi_aff_scale_multi_val) :pointer
  (upma :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_flat_range_product" isl_union_pw_multi_aff_flat_range_product) :pointer
  (upma1 :pointer)
  (upma2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_range_factor_domain" isl_union_pw_multi_aff_range_factor_domain) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_range_factor_range" isl_union_pw_multi_aff_range_factor_range) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_intersect_params" isl_union_pw_multi_aff_intersect_params) :pointer
  (upma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_intersect_domain" isl_union_pw_multi_aff_intersect_domain) :pointer
  (upma :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_intersect_domain_wrapped_domain" isl_union_pw_multi_aff_intersect_domain_wrapped_domain) :pointer
  (upma :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_intersect_domain_wrapped_range" isl_union_pw_multi_aff_intersect_domain_wrapped_range) :pointer
  (upma :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_subtract_domain" isl_union_pw_multi_aff_subtract_domain) :pointer
  (upma :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_map_from_union_pw_multi_aff" isl_union_map_from_union_pw_multi_aff) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_printer_print_union_pw_multi_aff" isl_printer_print_union_pw_multi_aff) :pointer
  (p :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_union_set" isl_union_pw_multi_aff_from_union_set) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_union_map" isl_union_pw_multi_aff_from_union_map) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_read_from_str" isl_union_pw_multi_aff_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_union_pw_multi_aff_dump" isl_union_pw_multi_aff_dump) :void
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_to_str" isl_union_pw_multi_aff_to_str) :string
  (upma :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_hash" isl_multi_pw_aff_get_hash) :pointer
  (mpa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_from_multi_aff" isl_multi_pw_aff_from_multi_aff) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_multi_pw_aff_from_pw_aff" isl_multi_pw_aff_from_pw_aff) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_domain" isl_multi_pw_aff_domain) :pointer
  (mpa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_intersect_params" isl_multi_pw_aff_intersect_params) :pointer
  (mpa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_multi_pw_aff_intersect_domain" isl_multi_pw_aff_intersect_domain) :pointer
  (mpa :pointer)
  (domain :pointer))

(cffi:defcfun ("isl_multi_pw_aff_coalesce" isl_multi_pw_aff_coalesce) :pointer
  (mpa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_gist" isl_multi_pw_aff_gist) :pointer
  (mpa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_multi_pw_aff_gist_params" isl_multi_pw_aff_gist_params) :pointer
  (mpa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_multi_pw_aff_is_cst" isl_multi_pw_aff_is_cst) isl_bool
  (mpa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_is_equal" isl_multi_pw_aff_is_equal) isl_bool
  (mpa1 :pointer)
  (mpa2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_pullback_multi_aff" isl_multi_pw_aff_pullback_multi_aff) :pointer
  (mpa :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_multi_pw_aff_pullback_pw_multi_aff" isl_multi_pw_aff_pullback_pw_multi_aff) :pointer
  (mpa :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_multi_pw_aff_pullback_multi_pw_aff" isl_multi_pw_aff_pullback_multi_pw_aff) :pointer
  (mpa1 :pointer)
  (mpa2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_move_dims" isl_multi_pw_aff_move_dims) :pointer
  (pma :pointer)
  (dst_type :pointer)
  (dst_pos :unsigned-int)
  (src_type :pointer)
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_from_multi_pw_aff" isl_set_from_multi_pw_aff) :pointer
  (mpa :pointer))

(cffi:defcfun ("isl_map_from_multi_pw_aff" isl_map_from_multi_pw_aff) :pointer
  (mpa :pointer))

(cffi:defcfun ("isl_pw_multi_aff_from_multi_pw_aff" isl_pw_multi_aff_from_multi_pw_aff) :pointer
  (mpa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_from_pw_multi_aff" isl_multi_pw_aff_from_pw_multi_aff) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_multi_pw_aff_eq_map" isl_multi_pw_aff_eq_map) :pointer
  (mpa1 :pointer)
  (mpa2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_lex_lt_map" isl_multi_pw_aff_lex_lt_map) :pointer
  (mpa1 :pointer)
  (mpa2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_lex_gt_map" isl_multi_pw_aff_lex_gt_map) :pointer
  (mpa1 :pointer)
  (mpa2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_bind" isl_multi_pw_aff_bind) :pointer
  (mpa :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_pw_aff_read_from_str" isl_multi_pw_aff_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_multi_pw_aff_to_str" isl_multi_pw_aff_to_str) :string
  (mpa :pointer))

(cffi:defcfun ("isl_printer_print_multi_pw_aff" isl_printer_print_multi_pw_aff) :pointer
  (p :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_dump" isl_multi_pw_aff_dump) :void
  (mpa :pointer))

(cffi:defcfun ("isl_union_pw_aff_copy" isl_union_pw_aff_copy) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_free" isl_union_pw_aff_free) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_get_ctx" isl_union_pw_aff_get_ctx) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_get_space" isl_union_pw_aff_get_space) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_get_pw_aff_list" isl_union_pw_aff_get_pw_aff_list) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_dim" isl_union_pw_aff_dim) :int
  (upa :pointer)
  (type :pointer))

(cffi:defcfun ("isl_union_pw_aff_set_dim_name" isl_union_pw_aff_set_dim_name) :pointer
  (upa :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_union_pw_aff_find_dim_by_name" isl_union_pw_aff_find_dim_by_name) :int
  (upa :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_union_pw_aff_drop_dims" isl_union_pw_aff_drop_dims) :pointer
  (upa :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_pw_aff_reset_user" isl_union_pw_aff_reset_user) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_empty_ctx" isl_union_pw_aff_empty_ctx) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_union_pw_aff_empty_space" isl_union_pw_aff_empty_space) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_pw_aff_empty" isl_union_pw_aff_empty) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_pw_aff_from_pw_aff" isl_union_pw_aff_from_pw_aff) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_union_pw_aff_val_on_domain" isl_union_pw_aff_val_on_domain) :pointer
  (domain :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_aff_aff_on_domain" isl_union_pw_aff_aff_on_domain) :pointer
  (domain :pointer)
  (aff :pointer))

(cffi:defcfun ("isl_union_pw_aff_pw_aff_on_domain" isl_union_pw_aff_pw_aff_on_domain) :pointer
  (domain :pointer)
  (pa :pointer))

(cffi:defcfun ("isl_union_pw_aff_add_pw_aff" isl_union_pw_aff_add_pw_aff) :pointer
  (upa :pointer)
  (pa :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_union_pw_aff" isl_union_pw_multi_aff_from_union_pw_aff) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_n_pw_aff" isl_union_pw_aff_n_pw_aff) :int
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_foreach_pw_aff" isl_union_pw_aff_foreach_pw_aff) isl_stat
  (upa :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_aff_extract_pw_aff" isl_union_pw_aff_extract_pw_aff) :pointer
  (upa :pointer)
  (space :pointer))

(cffi:defcfun ("isl_union_pw_aff_involves_nan" isl_union_pw_aff_involves_nan) isl_bool
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_plain_is_equal" isl_union_pw_aff_plain_is_equal) isl_bool
  (upa1 :pointer)
  (upa2 :pointer))

(cffi:defcfun ("isl_union_pw_aff_domain" isl_union_pw_aff_domain) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_neg" isl_union_pw_aff_neg) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_add" isl_union_pw_aff_add) :pointer
  (upa1 :pointer)
  (upa2 :pointer))

(cffi:defcfun ("isl_union_pw_aff_union_add" isl_union_pw_aff_union_add) :pointer
  (upa1 :pointer)
  (upa2 :pointer))

(cffi:defcfun ("isl_union_pw_aff_sub" isl_union_pw_aff_sub) :pointer
  (upa1 :pointer)
  (upa2 :pointer))

(cffi:defcfun ("isl_union_pw_aff_coalesce" isl_union_pw_aff_coalesce) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_gist" isl_union_pw_aff_gist) :pointer
  (upa :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_aff_gist_params" isl_union_pw_aff_gist_params) :pointer
  (upa :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_aff_pullback_union_pw_multi_aff" isl_union_pw_aff_pullback_union_pw_multi_aff) :pointer
  (upa :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_aff_floor" isl_union_pw_aff_floor) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_scale_val" isl_union_pw_aff_scale_val) :pointer
  (upa :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_aff_scale_down_val" isl_union_pw_aff_scale_down_val) :pointer
  (upa :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_aff_mod_val" isl_union_pw_aff_mod_val) :pointer
  (upa :pointer)
  (f :pointer))

(cffi:defcfun ("isl_union_pw_aff_align_params" isl_union_pw_aff_align_params) :pointer
  (upa :pointer)
  (model :pointer))

(cffi:defcfun ("isl_union_pw_aff_intersect_params" isl_union_pw_aff_intersect_params) :pointer
  (upa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_pw_aff_intersect_domain" isl_union_pw_aff_intersect_domain) :pointer
  (upa :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_aff_intersect_domain_wrapped_domain" isl_union_pw_aff_intersect_domain_wrapped_domain) :pointer
  (upa :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_aff_intersect_domain_wrapped_range" isl_union_pw_aff_intersect_domain_wrapped_range) :pointer
  (upa :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_aff_subtract_domain" isl_union_pw_aff_subtract_domain) :pointer
  (upa :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_aff_zero_union_set" isl_union_pw_aff_zero_union_set) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_map_from_union_pw_aff" isl_union_map_from_union_pw_aff) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_bind_id" isl_union_pw_aff_bind_id) :pointer
  (upa :pointer)
  (id :pointer))

(cffi:defcfun ("isl_union_pw_aff_read_from_str" isl_union_pw_aff_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_union_pw_aff_to_str" isl_union_pw_aff_to_str) :string
  (upa :pointer))

(cffi:defcfun ("isl_printer_print_union_pw_aff" isl_printer_print_union_pw_aff) :pointer
  (p :pointer)
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_dump" isl_union_pw_aff_dump) :void
  (upa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_get_ctx" isl_multi_union_pw_aff_get_ctx) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_get_space" isl_multi_union_pw_aff_get_space) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_get_domain_space" isl_multi_union_pw_aff_get_domain_space) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_from_union_pw_aff_list" isl_multi_union_pw_aff_from_union_pw_aff_list) :pointer
  (space :pointer)
  (list :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_copy" isl_multi_union_pw_aff_copy) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_free" isl_multi_union_pw_aff_free) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_plain_is_equal" isl_multi_union_pw_aff_plain_is_equal) isl_bool
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_reset_user" isl_multi_union_pw_aff_reset_user) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_size" isl_multi_union_pw_aff_size) :int
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_get_at" isl_multi_union_pw_aff_get_at) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_union_pw_aff_get_union_pw_aff" isl_multi_union_pw_aff_get_union_pw_aff) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_union_pw_aff_set_at" isl_multi_union_pw_aff_set_at) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_set_union_pw_aff" isl_multi_union_pw_aff_set_union_pw_aff) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_range_splice" isl_multi_union_pw_aff_range_splice) :pointer
  (multi1 :pointer)
  (pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_flatten_range" isl_multi_union_pw_aff_flatten_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_flat_range_product" isl_multi_union_pw_aff_flat_range_product) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_range_product" isl_multi_union_pw_aff_range_product) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_factor_range" isl_multi_union_pw_aff_factor_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_range_is_wrapping" isl_multi_union_pw_aff_range_is_wrapping) isl_bool
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_range_factor_domain" isl_multi_union_pw_aff_range_factor_domain) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_range_factor_range" isl_multi_union_pw_aff_range_factor_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_align_params" isl_multi_union_pw_aff_align_params) :pointer
  (multi :pointer)
  (model :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_from_range" isl_multi_union_pw_aff_from_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_scale_val" isl_multi_union_pw_aff_scale_val) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_scale_down_val" isl_multi_union_pw_aff_scale_down_val) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_scale_multi_val" isl_multi_union_pw_aff_scale_multi_val) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_scale_down_multi_val" isl_multi_union_pw_aff_scale_down_multi_val) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_mod_multi_val" isl_multi_union_pw_aff_mod_multi_val) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_add" isl_multi_union_pw_aff_add) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_sub" isl_multi_union_pw_aff_sub) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_neg" isl_multi_union_pw_aff_neg) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_zero" isl_multi_union_pw_aff_zero) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_involves_nan" isl_multi_union_pw_aff_involves_nan) isl_bool
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_dim" isl_multi_union_pw_aff_dim) :int
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_drop_dims" isl_multi_union_pw_aff_drop_dims) :pointer
  (multi :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_union_pw_aff_find_dim_by_name" isl_multi_union_pw_aff_find_dim_by_name) :int
  (multi :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_multi_union_pw_aff_find_dim_by_id" isl_multi_union_pw_aff_find_dim_by_id) :int
  (multi :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_get_dim_id" isl_multi_union_pw_aff_get_dim_id) :pointer
  (multi :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_multi_union_pw_aff_set_dim_name" isl_multi_union_pw_aff_set_dim_name) :pointer
  (multi :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_multi_union_pw_aff_set_dim_id" isl_multi_union_pw_aff_set_dim_id) :pointer
  (multi :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_get_tuple_name" isl_multi_union_pw_aff_get_tuple_name) :string
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_has_tuple_id" isl_multi_union_pw_aff_has_tuple_id) isl_bool
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_get_tuple_id" isl_multi_union_pw_aff_get_tuple_id) :pointer
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_set_tuple_name" isl_multi_union_pw_aff_set_tuple_name) :pointer
  (multi :pointer)
  (type :pointer)
  (s :string))

(cffi:defcfun ("isl_multi_union_pw_aff_set_tuple_id" isl_multi_union_pw_aff_set_tuple_id) :pointer
  (multi :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_reset_tuple_id" isl_multi_union_pw_aff_reset_tuple_id) :pointer
  (multi :pointer)
  (type :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_from_multi_aff" isl_multi_union_pw_aff_from_multi_aff) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_from_union_pw_aff" isl_multi_union_pw_aff_from_union_pw_aff) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_from_multi_pw_aff" isl_multi_union_pw_aff_from_multi_pw_aff) :pointer
  (mpa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_multi_val_on_domain" isl_multi_union_pw_aff_multi_val_on_domain) :pointer
  (domain :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_multi_aff_on_domain" isl_multi_union_pw_aff_multi_aff_on_domain) :pointer
  (domain :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_pw_multi_aff_on_domain" isl_multi_union_pw_aff_pw_multi_aff_on_domain) :pointer
  (domain :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_floor" isl_multi_union_pw_aff_floor) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_intersect_domain" isl_multi_union_pw_aff_intersect_domain) :pointer
  (mupa :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_intersect_params" isl_multi_union_pw_aff_intersect_params) :pointer
  (mupa :pointer)
  (params :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_intersect_range" isl_multi_union_pw_aff_intersect_range) :pointer
  (mupa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_domain" isl_multi_union_pw_aff_domain) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_coalesce" isl_multi_union_pw_aff_coalesce) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_gist" isl_multi_union_pw_aff_gist) :pointer
  (aff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_gist_params" isl_multi_union_pw_aff_gist_params) :pointer
  (aff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_apply_aff" isl_multi_union_pw_aff_apply_aff) :pointer
  (mupa :pointer)
  (aff :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_apply_multi_aff" isl_multi_union_pw_aff_apply_multi_aff) :pointer
  (mupa :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_apply_pw_aff" isl_multi_union_pw_aff_apply_pw_aff) :pointer
  (mupa :pointer)
  (pa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_apply_pw_multi_aff" isl_multi_union_pw_aff_apply_pw_multi_aff) :pointer
  (mupa :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_pullback_union_pw_multi_aff" isl_multi_union_pw_aff_pullback_union_pw_multi_aff) :pointer
  (mupa :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_multi_union_pw_aff" isl_union_pw_multi_aff_from_multi_union_pw_aff) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_union_add" isl_multi_union_pw_aff_union_add) :pointer
  (mupa1 :pointer)
  (mupa2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_from_union_pw_multi_aff" isl_multi_union_pw_aff_from_union_pw_multi_aff) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_from_union_map" isl_multi_union_pw_aff_from_union_map) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_from_multi_union_pw_aff" isl_union_map_from_multi_union_pw_aff) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_zero_union_set" isl_multi_union_pw_aff_zero_union_set) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_bind" isl_multi_union_pw_aff_bind) :pointer
  (mupa :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_extract_multi_pw_aff" isl_multi_union_pw_aff_extract_multi_pw_aff) :pointer
  (mupa :pointer)
  (space :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_read_from_str" isl_multi_union_pw_aff_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_multi_union_pw_aff_to_str" isl_multi_union_pw_aff_to_str) :string
  (mupa :pointer))

(cffi:defcfun ("isl_printer_print_multi_union_pw_aff" isl_printer_print_multi_union_pw_aff) :pointer
  (p :pointer)
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_dump" isl_multi_union_pw_aff_dump) :void
  (mupa :pointer))

(cffi:defcfun ("isl_aff_list_get_ctx" isl_aff_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_aff_list_from_aff" isl_aff_list_from_aff) :pointer
  (el :pointer))

(cffi:defcfun ("isl_aff_list_alloc" isl_aff_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_aff_list_copy" isl_aff_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_aff_list_free" isl_aff_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_aff_list_add" isl_aff_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_aff_list_insert" isl_aff_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_aff_list_drop" isl_aff_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_aff_list_clear" isl_aff_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_aff_list_swap" isl_aff_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_aff_list_reverse" isl_aff_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_aff_list_concat" isl_aff_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_aff_list_size" isl_aff_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_aff_list_n_aff" isl_aff_list_n_aff) :int
  (list :pointer))

(cffi:defcfun ("isl_aff_list_get_at" isl_aff_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_aff_list_get_aff" isl_aff_list_get_aff) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_aff_list_set_aff" isl_aff_list_set_aff) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_aff_list_foreach" isl_aff_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_aff_list_map" isl_aff_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_aff_list_sort" isl_aff_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_aff_list_foreach_scc" isl_aff_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_aff_list_to_str" isl_aff_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_aff_list" isl_printer_print_aff_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_aff_list_dump" isl_aff_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_get_ctx" isl_pw_aff_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_from_pw_aff" isl_pw_aff_list_from_pw_aff) :pointer
  (el :pointer))

(cffi:defcfun ("isl_pw_aff_list_alloc" isl_pw_aff_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_pw_aff_list_copy" isl_pw_aff_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_free" isl_pw_aff_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_add" isl_pw_aff_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_pw_aff_list_insert" isl_pw_aff_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_pw_aff_list_drop" isl_pw_aff_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_aff_list_clear" isl_pw_aff_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_swap" isl_pw_aff_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_pw_aff_list_reverse" isl_pw_aff_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_concat" isl_pw_aff_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_aff_list_size" isl_pw_aff_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_n_pw_aff" isl_pw_aff_list_n_pw_aff) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_get_at" isl_pw_aff_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_aff_list_get_pw_aff" isl_pw_aff_list_get_pw_aff) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_aff_list_set_pw_aff" isl_pw_aff_list_set_pw_aff) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_pw_aff_list_foreach" isl_pw_aff_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_aff_list_map" isl_pw_aff_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_aff_list_sort" isl_pw_aff_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_aff_list_foreach_scc" isl_pw_aff_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_pw_aff_list_to_str" isl_pw_aff_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_pw_aff_list" isl_printer_print_pw_aff_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_dump" isl_pw_aff_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_get_ctx" isl_pw_multi_aff_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_from_pw_multi_aff" isl_pw_multi_aff_list_from_pw_multi_aff) :pointer
  (el :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_alloc" isl_pw_multi_aff_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_pw_multi_aff_list_copy" isl_pw_multi_aff_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_free" isl_pw_multi_aff_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_add" isl_pw_multi_aff_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_insert" isl_pw_multi_aff_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_drop" isl_pw_multi_aff_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_list_clear" isl_pw_multi_aff_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_swap" isl_pw_multi_aff_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_list_reverse" isl_pw_multi_aff_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_concat" isl_pw_multi_aff_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_size" isl_pw_multi_aff_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_n_pw_multi_aff" isl_pw_multi_aff_list_n_pw_multi_aff) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_get_at" isl_pw_multi_aff_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_multi_aff_list_get_pw_multi_aff" isl_pw_multi_aff_list_get_pw_multi_aff) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_multi_aff_list_set_pw_multi_aff" isl_pw_multi_aff_list_set_pw_multi_aff) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_foreach" isl_pw_multi_aff_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_map" isl_pw_multi_aff_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_sort" isl_pw_multi_aff_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_foreach_scc" isl_pw_multi_aff_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_to_str" isl_pw_multi_aff_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_pw_multi_aff_list" isl_printer_print_pw_multi_aff_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_dump" isl_pw_multi_aff_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_get_ctx" isl_union_pw_aff_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_from_union_pw_aff" isl_union_pw_aff_list_from_union_pw_aff) :pointer
  (el :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_alloc" isl_union_pw_aff_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_union_pw_aff_list_copy" isl_union_pw_aff_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_free" isl_union_pw_aff_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_add" isl_union_pw_aff_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_insert" isl_union_pw_aff_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_drop" isl_union_pw_aff_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_pw_aff_list_clear" isl_union_pw_aff_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_swap" isl_union_pw_aff_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_union_pw_aff_list_reverse" isl_union_pw_aff_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_concat" isl_union_pw_aff_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_size" isl_union_pw_aff_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_n_union_pw_aff" isl_union_pw_aff_list_n_union_pw_aff) :int
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_get_at" isl_union_pw_aff_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_pw_aff_list_get_union_pw_aff" isl_union_pw_aff_list_get_union_pw_aff) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_pw_aff_list_set_union_pw_aff" isl_union_pw_aff_list_set_union_pw_aff) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_foreach" isl_union_pw_aff_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_map" isl_union_pw_aff_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_sort" isl_union_pw_aff_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_foreach_scc" isl_union_pw_aff_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_to_str" isl_union_pw_aff_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_union_pw_aff_list" isl_printer_print_union_pw_aff_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_dump" isl_union_pw_aff_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_get_ctx" isl_union_pw_multi_aff_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_from_union_pw_multi_aff" isl_union_pw_multi_aff_list_from_union_pw_multi_aff) :pointer
  (el :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_alloc" isl_union_pw_multi_aff_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_union_pw_multi_aff_list_copy" isl_union_pw_multi_aff_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_free" isl_union_pw_multi_aff_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_add" isl_union_pw_multi_aff_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_insert" isl_union_pw_multi_aff_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_drop" isl_union_pw_multi_aff_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_pw_multi_aff_list_clear" isl_union_pw_multi_aff_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_swap" isl_union_pw_multi_aff_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_union_pw_multi_aff_list_reverse" isl_union_pw_multi_aff_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_concat" isl_union_pw_multi_aff_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_size" isl_union_pw_multi_aff_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_n_union_pw_multi_aff" isl_union_pw_multi_aff_list_n_union_pw_multi_aff) :int
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_get_at" isl_union_pw_multi_aff_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_pw_multi_aff_list_get_union_pw_multi_aff" isl_union_pw_multi_aff_list_get_union_pw_multi_aff) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_pw_multi_aff_list_set_union_pw_multi_aff" isl_union_pw_multi_aff_list_set_union_pw_multi_aff) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_foreach" isl_union_pw_multi_aff_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_map" isl_union_pw_multi_aff_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_sort" isl_union_pw_multi_aff_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_foreach_scc" isl_union_pw_multi_aff_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_to_str" isl_union_pw_multi_aff_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_union_pw_multi_aff_list" isl_printer_print_union_pw_multi_aff_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_dump" isl_union_pw_multi_aff_list_dump) :void
  (list :pointer))

(cffi:defcstruct isl_arg_choice
  (name :string)
  (value :unsigned-int))

(cffi:defcstruct isl_arg_flags
  (name :string)
  (mask :unsigned-int)
  (value :unsigned-int))

(cffi:defcstruct isl_arg
  (type isl_arg_type)
  (short_name :char)
  (long_name :string)
  (argument_name :string)
  (offset :pointer)
  (help_msg :string)
  (flags :unsigned-int)
  (u :pointer))

(cffi:defcunion isl_arg_u
  (choice :pointer)
  (flags :pointer)
  (b :pointer)
  (i :pointer)
  (l :pointer)
  (ul :pointer)
  (str :pointer)
  (str_list :pointer)
  (child :pointer)
  (version :pointer)
  (user :pointer))

(cffi:defcstruct isl_arg_u_user
  (init :pointer)
  (clear :pointer))

(cffi:defcstruct isl_arg_u_version
  (print_version :pointer))

(cffi:defcstruct isl_arg_u_child
  (child :pointer))

(cffi:defcstruct isl_arg_u_str_list
  (offset_n :pointer))

(cffi:defcstruct isl_arg_u_str
  (default_value :string))

(cffi:defcstruct isl_arg_u_ul
  (default_value :unsigned-long))

(cffi:defcstruct isl_arg_u_l
  (default_value :long)
  (default_selected :long)
  (set :pointer))

(cffi:defcstruct isl_arg_u_i
  (default_value :int))

(cffi:defcstruct isl_arg_u_b
  (default_value :unsigned-int)
  (set :pointer))

(cffi:defcstruct isl_arg_u_flags
  (flags :pointer)
  (default_value :unsigned-int))

(cffi:defcstruct isl_arg_u_choice
  (choice :pointer)
  (default_value :unsigned-int)
  (default_selected :unsigned-int)
  (set :pointer))

(cffi:defcstruct isl_args
  (options_size :pointer)
  (args :pointer))

(cl:defconstant ISL_ARG_ALL (cl:ash 1 0))

(cl:defconstant ISL_ARG_SKIP_HELP (cl:ash 1 1))

(cffi:defcfun ("isl_args_set_defaults" isl_args_set_defaults) :void
  (args :pointer)
  (opt :pointer))

(cffi:defcfun ("isl_args_free" isl_args_free) :void
  (args :pointer)
  (opt :pointer))

(cffi:defcfun ("isl_args_parse" isl_args_parse) :int
  (args :pointer)
  (argc :int)
  (argv :pointer)
  (opt :pointer)
  (flags :unsigned-int))

(cffi:defcfun ("isl_options_set_ast_build_atomic_upper_bound" isl_options_set_ast_build_atomic_upper_bound) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_atomic_upper_bound" isl_options_get_ast_build_atomic_upper_bound) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_prefer_pdiv" isl_options_set_ast_build_prefer_pdiv) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_prefer_pdiv" isl_options_get_ast_build_prefer_pdiv) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_detect_min_max" isl_options_set_ast_build_detect_min_max) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_detect_min_max" isl_options_get_ast_build_detect_min_max) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_exploit_nested_bounds" isl_options_set_ast_build_exploit_nested_bounds) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_exploit_nested_bounds" isl_options_get_ast_build_exploit_nested_bounds) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_group_coscheduled" isl_options_set_ast_build_group_coscheduled) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_group_coscheduled" isl_options_get_ast_build_group_coscheduled) :int
  (ctx :pointer))

(cl:defconstant ISL_AST_BUILD_SEPARATION_BOUNDS_EXPLICIT 0)

(cl:defconstant ISL_AST_BUILD_SEPARATION_BOUNDS_IMPLICIT 1)

(cffi:defcfun ("isl_options_set_ast_build_separation_bounds" isl_options_set_ast_build_separation_bounds) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_separation_bounds" isl_options_get_ast_build_separation_bounds) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_scale_strides" isl_options_set_ast_build_scale_strides) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_scale_strides" isl_options_get_ast_build_scale_strides) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_allow_else" isl_options_set_ast_build_allow_else) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_allow_else" isl_options_get_ast_build_allow_else) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_allow_or" isl_options_set_ast_build_allow_or) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_allow_or" isl_options_get_ast_build_allow_or) :int
  (ctx :pointer))

(cffi:defcfun ("isl_ast_build_get_ctx" isl_ast_build_get_ctx) :pointer
  (build :pointer))

(cffi:defcfun ("isl_ast_build_alloc" isl_ast_build_alloc) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_ast_build_from_context" isl_ast_build_from_context) :pointer
  (set :pointer))

(cffi:defcfun ("isl_ast_build_get_schedule_space" isl_ast_build_get_schedule_space) :pointer
  (build :pointer))

(cffi:defcfun ("isl_ast_build_get_schedule" isl_ast_build_get_schedule) :pointer
  (build :pointer))

(cffi:defcfun ("isl_ast_build_restrict" isl_ast_build_restrict) :pointer
  (build :pointer)
  (set :pointer))

(cffi:defcfun ("isl_ast_build_copy" isl_ast_build_copy) :pointer
  (build :pointer))

(cffi:defcfun ("isl_ast_build_free" isl_ast_build_free) :pointer
  (build :pointer))

(cffi:defcfun ("isl_ast_build_set_options" isl_ast_build_set_options) :pointer
  (build :pointer)
  (options :pointer))

(cffi:defcfun ("isl_ast_build_set_iterators" isl_ast_build_set_iterators) :pointer
  (build :pointer)
  (iterators :pointer))

(cffi:defcfun ("isl_ast_build_set_at_each_domain" isl_ast_build_set_at_each_domain) :pointer
  (build :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_build_set_before_each_for" isl_ast_build_set_before_each_for) :pointer
  (build :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_build_set_after_each_for" isl_ast_build_set_after_each_for) :pointer
  (build :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_build_set_before_each_mark" isl_ast_build_set_before_each_mark) :pointer
  (build :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_build_set_after_each_mark" isl_ast_build_set_after_each_mark) :pointer
  (build :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_build_set_create_leaf" isl_ast_build_set_create_leaf) :pointer
  (build :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_build_expr_from_set" isl_ast_build_expr_from_set) :pointer
  (build :pointer)
  (set :pointer))

(cffi:defcfun ("isl_ast_build_expr_from_pw_aff" isl_ast_build_expr_from_pw_aff) :pointer
  (build :pointer)
  (pa :pointer))

(cffi:defcfun ("isl_ast_build_access_from_pw_multi_aff" isl_ast_build_access_from_pw_multi_aff) :pointer
  (build :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_ast_build_access_from_multi_pw_aff" isl_ast_build_access_from_multi_pw_aff) :pointer
  (build :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_ast_build_call_from_pw_multi_aff" isl_ast_build_call_from_pw_multi_aff) :pointer
  (build :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_ast_build_call_from_multi_pw_aff" isl_ast_build_call_from_multi_pw_aff) :pointer
  (build :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_ast_build_node_from_schedule" isl_ast_build_node_from_schedule) :pointer
  (build :pointer)
  (schedule :pointer))

(cffi:defcfun ("isl_ast_build_node_from_schedule_map" isl_ast_build_node_from_schedule_map) :pointer
  (build :pointer)
  (schedule :pointer))

(cffi:defcfun ("isl_ast_build_ast_from_schedule" isl_ast_build_ast_from_schedule) :pointer
  (build :pointer)
  (schedule :pointer))

(cffi:defcfun ("isl_options_set_ast_iterator_type" isl_options_set_ast_iterator_type) isl_stat
  (ctx :pointer)
  (val :string))

(cffi:defcfun ("isl_options_get_ast_iterator_type" isl_options_get_ast_iterator_type) :string
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_always_print_block" isl_options_set_ast_always_print_block) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_always_print_block" isl_options_get_ast_always_print_block) :int
  (ctx :pointer))

(cffi:defcfun ("isl_ast_expr_from_val" isl_ast_expr_from_val) :pointer
  (v :pointer))

(cffi:defcfun ("isl_ast_expr_from_id" isl_ast_expr_from_id) :pointer
  (id :pointer))

(cffi:defcfun ("isl_ast_expr_neg" isl_ast_expr_neg) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_add" isl_ast_expr_add) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_sub" isl_ast_expr_sub) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_mul" isl_ast_expr_mul) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_div" isl_ast_expr_div) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_pdiv_q" isl_ast_expr_pdiv_q) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_pdiv_r" isl_ast_expr_pdiv_r) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_and" isl_ast_expr_and) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_and_then" isl_ast_expr_and_then) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_or" isl_ast_expr_or) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_or_else" isl_ast_expr_or_else) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_le" isl_ast_expr_le) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_lt" isl_ast_expr_lt) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_ge" isl_ast_expr_ge) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_gt" isl_ast_expr_gt) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_eq" isl_ast_expr_eq) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_access" isl_ast_expr_access) :pointer
  (array :pointer)
  (indices :pointer))

(cffi:defcfun ("isl_ast_expr_call" isl_ast_expr_call) :pointer
  (function :pointer)
  (arguments :pointer))

(cffi:defcfun ("isl_ast_expr_address_of" isl_ast_expr_address_of) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_copy" isl_ast_expr_copy) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_free" isl_ast_expr_free) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_get_ctx" isl_ast_expr_get_ctx) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_get_type" isl_ast_expr_get_type) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_int_get_val" isl_ast_expr_int_get_val) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_get_val" isl_ast_expr_get_val) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_id_get_id" isl_ast_expr_id_get_id) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_get_id" isl_ast_expr_get_id) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_op_get_type" isl_ast_expr_op_get_type) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_get_op_type" isl_ast_expr_get_op_type) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_op_get_n_arg" isl_ast_expr_op_get_n_arg) :int
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_get_op_n_arg" isl_ast_expr_get_op_n_arg) :int
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_op_get_arg" isl_ast_expr_op_get_arg) :pointer
  (expr :pointer)
  (pos :int))

(cffi:defcfun ("isl_ast_expr_get_op_arg" isl_ast_expr_get_op_arg) :pointer
  (expr :pointer)
  (pos :int))

(cffi:defcfun ("isl_ast_expr_set_op_arg" isl_ast_expr_set_op_arg) :pointer
  (expr :pointer)
  (pos :int)
  (arg :pointer))

(cffi:defcfun ("isl_ast_expr_is_equal" isl_ast_expr_is_equal) isl_bool
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_substitute_ids" isl_ast_expr_substitute_ids) :pointer
  (expr :pointer)
  (id2expr :pointer))

(cffi:defcfun ("isl_printer_print_ast_expr" isl_printer_print_ast_expr) :pointer
  (p :pointer)
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_dump" isl_ast_expr_dump) :void
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_to_str" isl_ast_expr_to_str) :string
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_to_C_str" isl_ast_expr_to_C_str) :string
  (expr :pointer))

(cffi:defcfun ("isl_ast_node_alloc_user" isl_ast_node_alloc_user) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_node_copy" isl_ast_node_copy) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_free" isl_ast_node_free) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_get_ctx" isl_ast_node_get_ctx) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_get_type" isl_ast_node_get_type) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_set_annotation" isl_ast_node_set_annotation) :pointer
  (node :pointer)
  (annotation :pointer))

(cffi:defcfun ("isl_ast_node_get_annotation" isl_ast_node_get_annotation) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_for_get_iterator" isl_ast_node_for_get_iterator) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_for_get_init" isl_ast_node_for_get_init) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_for_get_cond" isl_ast_node_for_get_cond) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_for_get_inc" isl_ast_node_for_get_inc) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_for_get_body" isl_ast_node_for_get_body) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_for_is_degenerate" isl_ast_node_for_is_degenerate) isl_bool
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_get_cond" isl_ast_node_if_get_cond) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_get_then_node" isl_ast_node_if_get_then_node) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_get_then" isl_ast_node_if_get_then) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_has_else_node" isl_ast_node_if_has_else_node) isl_bool
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_has_else" isl_ast_node_if_has_else) isl_bool
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_get_else_node" isl_ast_node_if_get_else_node) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_get_else" isl_ast_node_if_get_else) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_block_get_children" isl_ast_node_block_get_children) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_mark_get_id" isl_ast_node_mark_get_id) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_mark_get_node" isl_ast_node_mark_get_node) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_user_get_expr" isl_ast_node_user_get_expr) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_foreach_descendant_top_down" isl_ast_node_foreach_descendant_top_down) isl_stat
  (node :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_printer_print_ast_node" isl_printer_print_ast_node) :pointer
  (p :pointer)
  (node :pointer))

(cffi:defcfun ("isl_ast_node_dump" isl_ast_node_dump) :void
  (node :pointer))

(cffi:defcfun ("isl_ast_node_to_str" isl_ast_node_to_str) :string
  (node :pointer))

(cffi:defcfun ("isl_ast_print_options_alloc" isl_ast_print_options_alloc) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_ast_print_options_copy" isl_ast_print_options_copy) :pointer
  (options :pointer))

(cffi:defcfun ("isl_ast_print_options_free" isl_ast_print_options_free) :pointer
  (options :pointer))

(cffi:defcfun ("isl_ast_print_options_get_ctx" isl_ast_print_options_get_ctx) :pointer
  (options :pointer))

(cffi:defcfun ("isl_ast_print_options_set_print_user" isl_ast_print_options_set_print_user) :pointer
  (options :pointer)
  (print_user :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_print_options_set_print_for" isl_ast_print_options_set_print_for) :pointer
  (options :pointer)
  (print_for :pointer)
  (user :pointer))

(cffi:defcfun ("isl_options_set_ast_print_macro_once" isl_options_set_ast_print_macro_once) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_print_macro_once" isl_options_get_ast_print_macro_once) :int
  (ctx :pointer))

(cffi:defcfun ("isl_ast_expr_foreach_ast_expr_op_type" isl_ast_expr_foreach_ast_expr_op_type) isl_stat
  (expr :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_expr_foreach_ast_op_type" isl_ast_expr_foreach_ast_op_type) isl_stat
  (expr :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_node_foreach_ast_expr_op_type" isl_ast_node_foreach_ast_expr_op_type) isl_stat
  (node :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_node_foreach_ast_op_type" isl_ast_node_foreach_ast_op_type) isl_stat
  (node :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_expr_op_type_set_print_name" isl_ast_expr_op_type_set_print_name) :pointer
  (p :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_ast_op_type_set_print_name" isl_ast_op_type_set_print_name) :pointer
  (p :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_ast_expr_op_type_print_macro" isl_ast_expr_op_type_print_macro) :pointer
  (type :pointer)
  (p :pointer))

(cffi:defcfun ("isl_ast_op_type_print_macro" isl_ast_op_type_print_macro) :pointer
  (type :pointer)
  (p :pointer))

(cffi:defcfun ("isl_ast_expr_print_macros" isl_ast_expr_print_macros) :pointer
  (expr :pointer)
  (p :pointer))

(cffi:defcfun ("isl_ast_node_print_macros" isl_ast_node_print_macros) :pointer
  (node :pointer)
  (p :pointer))

(cffi:defcfun ("isl_ast_node_print" isl_ast_node_print) :pointer
  (node :pointer)
  (p :pointer)
  (options :pointer))

(cffi:defcfun ("isl_ast_node_for_print" isl_ast_node_for_print) :pointer
  (node :pointer)
  (p :pointer)
  (options :pointer))

(cffi:defcfun ("isl_ast_node_if_print" isl_ast_node_if_print) :pointer
  (node :pointer)
  (p :pointer)
  (options :pointer))

(cffi:defcfun ("isl_ast_node_to_C_str" isl_ast_node_to_C_str) :string
  (node :pointer))

(cffi:defcfun ("isl_ast_expr_list_get_ctx" isl_ast_expr_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_from_ast_expr" isl_ast_expr_list_from_ast_expr) :pointer
  (el :pointer))

(cffi:defcfun ("isl_ast_expr_list_alloc" isl_ast_expr_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_ast_expr_list_copy" isl_ast_expr_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_free" isl_ast_expr_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_add" isl_ast_expr_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_ast_expr_list_insert" isl_ast_expr_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_ast_expr_list_drop" isl_ast_expr_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_ast_expr_list_clear" isl_ast_expr_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_swap" isl_ast_expr_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_ast_expr_list_reverse" isl_ast_expr_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_concat" isl_ast_expr_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_ast_expr_list_size" isl_ast_expr_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_n_ast_expr" isl_ast_expr_list_n_ast_expr) :int
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_get_at" isl_ast_expr_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_ast_expr_list_get_ast_expr" isl_ast_expr_list_get_ast_expr) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_ast_expr_list_set_ast_expr" isl_ast_expr_list_set_ast_expr) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_ast_expr_list_foreach" isl_ast_expr_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_expr_list_map" isl_ast_expr_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_expr_list_sort" isl_ast_expr_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_expr_list_foreach_scc" isl_ast_expr_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_ast_expr_list_to_str" isl_ast_expr_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_ast_expr_list" isl_printer_print_ast_expr_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_dump" isl_ast_expr_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_get_ctx" isl_ast_node_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_from_ast_node" isl_ast_node_list_from_ast_node) :pointer
  (el :pointer))

(cffi:defcfun ("isl_ast_node_list_alloc" isl_ast_node_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_ast_node_list_copy" isl_ast_node_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_free" isl_ast_node_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_add" isl_ast_node_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_ast_node_list_insert" isl_ast_node_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_ast_node_list_drop" isl_ast_node_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_ast_node_list_clear" isl_ast_node_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_swap" isl_ast_node_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_ast_node_list_reverse" isl_ast_node_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_concat" isl_ast_node_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_ast_node_list_size" isl_ast_node_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_n_ast_node" isl_ast_node_list_n_ast_node) :int
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_get_at" isl_ast_node_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_ast_node_list_get_ast_node" isl_ast_node_list_get_ast_node) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_ast_node_list_set_ast_node" isl_ast_node_list_set_ast_node) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_ast_node_list_foreach" isl_ast_node_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_node_list_map" isl_ast_node_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_node_list_sort" isl_ast_node_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_node_list_foreach_scc" isl_ast_node_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_ast_node_list_to_str" isl_ast_node_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_ast_node_list" isl_printer_print_ast_node_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_dump" isl_ast_node_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_get_ctx" isl_constraint_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_from_constraint" isl_constraint_list_from_constraint) :pointer
  (el :pointer))

(cffi:defcfun ("isl_constraint_list_alloc" isl_constraint_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_constraint_list_copy" isl_constraint_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_free" isl_constraint_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_add" isl_constraint_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_constraint_list_insert" isl_constraint_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_constraint_list_drop" isl_constraint_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_constraint_list_clear" isl_constraint_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_swap" isl_constraint_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_constraint_list_reverse" isl_constraint_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_concat" isl_constraint_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_constraint_list_size" isl_constraint_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_n_constraint" isl_constraint_list_n_constraint) :int
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_get_at" isl_constraint_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_constraint_list_get_constraint" isl_constraint_list_get_constraint) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_constraint_list_set_constraint" isl_constraint_list_set_constraint) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_constraint_list_foreach" isl_constraint_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_constraint_list_map" isl_constraint_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_constraint_list_sort" isl_constraint_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_constraint_list_foreach_scc" isl_constraint_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_constraint_list_to_str" isl_constraint_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_constraint_list" isl_printer_print_constraint_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_dump" isl_constraint_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_constraint_get_ctx" isl_constraint_get_ctx) :pointer
  (c :pointer))

(cffi:defcfun ("isl_constraint_alloc_equality" isl_constraint_alloc_equality) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_constraint_alloc_inequality" isl_constraint_alloc_inequality) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_equality_alloc" isl_equality_alloc) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_inequality_alloc" isl_inequality_alloc) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_constraint_copy" isl_constraint_copy) :pointer
  (c :pointer))

(cffi:defcfun ("isl_constraint_free" isl_constraint_free) :pointer
  (c :pointer))

(cffi:defcfun ("isl_basic_map_n_constraint" isl_basic_map_n_constraint) :int
  (bmap :pointer))

(cffi:defcfun ("isl_basic_set_n_constraint" isl_basic_set_n_constraint) :int
  (bset :pointer))

(cffi:defcfun ("isl_basic_map_foreach_constraint" isl_basic_map_foreach_constraint) isl_stat
  (bmap :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_set_foreach_constraint" isl_basic_set_foreach_constraint) isl_stat
  (bset :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_map_get_constraint_list" isl_basic_map_get_constraint_list) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_set_get_constraint_list" isl_basic_set_get_constraint_list) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_constraint_is_equal" isl_constraint_is_equal) :int
  (constraint1 :pointer)
  (constraint2 :pointer))

(cffi:defcfun ("isl_basic_set_foreach_bound_pair" isl_basic_set_foreach_bound_pair) isl_stat
  (bset :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_map_add_constraint" isl_basic_map_add_constraint) :pointer
  (bmap :pointer)
  (constraint :pointer))

(cffi:defcfun ("isl_basic_set_add_constraint" isl_basic_set_add_constraint) :pointer
  (bset :pointer)
  (constraint :pointer))

(cffi:defcfun ("isl_map_add_constraint" isl_map_add_constraint) :pointer
  (map :pointer)
  (constraint :pointer))

(cffi:defcfun ("isl_set_add_constraint" isl_set_add_constraint) :pointer
  (set :pointer)
  (constraint :pointer))

(cffi:defcfun ("isl_basic_map_has_defining_equality" isl_basic_map_has_defining_equality) isl_bool
  (bmap :pointer)
  (type :pointer)
  (pos :int)
  (c :pointer))

(cffi:defcfun ("isl_basic_set_has_defining_equality" isl_basic_set_has_defining_equality) isl_bool
  (bset :pointer)
  (type :pointer)
  (pos :int)
  (constraint :pointer))

(cffi:defcfun ("isl_basic_set_has_defining_inequalities" isl_basic_set_has_defining_inequalities) isl_bool
  (bset :pointer)
  (type :pointer)
  (pos :int)
  (lower :pointer)
  (upper :pointer))

(cffi:defcfun ("isl_constraint_get_space" isl_constraint_get_space) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_get_local_space" isl_constraint_get_local_space) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_dim" isl_constraint_dim) :int
  (constraint :pointer)
  (type :pointer))

(cffi:defcfun ("isl_constraint_involves_dims" isl_constraint_involves_dims) isl_bool
  (constraint :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_constraint_get_dim_name" isl_constraint_get_dim_name) :string
  (constraint :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_constraint_get_constant_val" isl_constraint_get_constant_val) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_get_coefficient_val" isl_constraint_get_coefficient_val) :pointer
  (constraint :pointer)
  (type :pointer)
  (pos :int))

(cffi:defcfun ("isl_constraint_set_constant_si" isl_constraint_set_constant_si) :pointer
  (constraint :pointer)
  (v :int))

(cffi:defcfun ("isl_constraint_set_constant_val" isl_constraint_set_constant_val) :pointer
  (constraint :pointer)
  (v :pointer))

(cffi:defcfun ("isl_constraint_set_coefficient_si" isl_constraint_set_coefficient_si) :pointer
  (constraint :pointer)
  (type :pointer)
  (pos :int)
  (v :int))

(cffi:defcfun ("isl_constraint_set_coefficient_val" isl_constraint_set_coefficient_val) :pointer
  (constraint :pointer)
  (type :pointer)
  (pos :int)
  (v :pointer))

(cffi:defcfun ("isl_constraint_get_div" isl_constraint_get_div) :pointer
  (constraint :pointer)
  (pos :int))

(cffi:defcfun ("isl_constraint_negate" isl_constraint_negate) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_is_equality" isl_constraint_is_equality) isl_bool
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_is_div_constraint" isl_constraint_is_div_constraint) isl_bool
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_is_lower_bound" isl_constraint_is_lower_bound) isl_bool
  (constraint :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_constraint_is_upper_bound" isl_constraint_is_upper_bound) isl_bool
  (constraint :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_map_from_constraint" isl_basic_map_from_constraint) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_basic_set_from_constraint" isl_basic_set_from_constraint) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_get_bound" isl_constraint_get_bound) :pointer
  (constraint :pointer)
  (type :pointer)
  (pos :int))

(cffi:defcfun ("isl_constraint_get_aff" isl_constraint_get_aff) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_equality_from_aff" isl_equality_from_aff) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_inequality_from_aff" isl_inequality_from_aff) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_constraint_plain_cmp" isl_constraint_plain_cmp) :int
  (c1 :pointer)
  (c2 :pointer))

(cffi:defcfun ("isl_constraint_cmp_last_non_zero" isl_constraint_cmp_last_non_zero) :int
  (c1 :pointer)
  (c2 :pointer))

(cffi:defcfun ("isl_printer_print_constraint" isl_printer_print_constraint) :pointer
  (p :pointer)
  (c :pointer))

(cffi:defcfun ("isl_constraint_dump" isl_constraint_dump) :void
  (c :pointer))

(cffi:defcfun ("isl_fixed_box_get_ctx" isl_fixed_box_get_ctx) :pointer
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_get_space" isl_fixed_box_get_space) :pointer
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_is_valid" isl_fixed_box_is_valid) isl_bool
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_get_offset" isl_fixed_box_get_offset) :pointer
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_get_size" isl_fixed_box_get_size) :pointer
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_copy" isl_fixed_box_copy) :pointer
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_free" isl_fixed_box_free) :pointer
  (box :pointer))

(cffi:defcfun ("isl_printer_print_fixed_box" isl_printer_print_fixed_box) :pointer
  (p :pointer)
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_to_str" isl_fixed_box_to_str) :string
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_dump" isl_fixed_box_dump) :void
  (box :pointer))

(cffi:defcfun ("isl_restriction_free" isl_restriction_free) :pointer
  (restr :pointer))

(cffi:defcfun ("isl_restriction_empty" isl_restriction_empty) :pointer
  (source_map :pointer))

(cffi:defcfun ("isl_restriction_none" isl_restriction_none) :pointer
  (source_map :pointer))

(cffi:defcfun ("isl_restriction_input" isl_restriction_input) :pointer
  (source_restr :pointer)
  (sink_restr :pointer))

(cffi:defcfun ("isl_restriction_output" isl_restriction_output) :pointer
  (source_restr :pointer))

(cffi:defcfun ("isl_restriction_get_ctx" isl_restriction_get_ctx) :pointer
  (restr :pointer))

(cffi:defcfun ("isl_access_info_alloc" isl_access_info_alloc) :pointer
  (sink :pointer)
  (sink_user :pointer)
  (fn :pointer)
  (max_source :int))

(cffi:defcfun ("isl_access_info_set_restrict" isl_access_info_set_restrict) :pointer
  (acc :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_access_info_add_source" isl_access_info_add_source) :pointer
  (acc :pointer)
  (source :pointer)
  (must :int)
  (source_user :pointer))

(cffi:defcfun ("isl_access_info_free" isl_access_info_free) :pointer
  (acc :pointer))

(cffi:defcfun ("isl_access_info_get_ctx" isl_access_info_get_ctx) :pointer
  (acc :pointer))

(cffi:defcfun ("isl_access_info_compute_flow" isl_access_info_compute_flow) :pointer
  (acc :pointer))

(cffi:defcfun ("isl_flow_foreach" isl_flow_foreach) isl_stat
  (deps :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_flow_get_no_source" isl_flow_get_no_source) :pointer
  (deps :pointer)
  (must :int))

(cffi:defcfun ("isl_flow_free" isl_flow_free) :pointer
  (deps :pointer))

(cffi:defcfun ("isl_flow_get_ctx" isl_flow_get_ctx) :pointer
  (deps :pointer))

(cffi:defcfun ("isl_union_access_info_from_sink" isl_union_access_info_from_sink) :pointer
  (sink :pointer))

(cffi:defcfun ("isl_union_access_info_set_must_source" isl_union_access_info_set_must_source) :pointer
  (access :pointer)
  (must_source :pointer))

(cffi:defcfun ("isl_union_access_info_set_may_source" isl_union_access_info_set_may_source) :pointer
  (access :pointer)
  (may_source :pointer))

(cffi:defcfun ("isl_union_access_info_set_kill" isl_union_access_info_set_kill) :pointer
  (access :pointer)
  (kill :pointer))

(cffi:defcfun ("isl_union_access_info_set_schedule" isl_union_access_info_set_schedule) :pointer
  (access :pointer)
  (schedule :pointer))

(cffi:defcfun ("isl_union_access_info_set_schedule_map" isl_union_access_info_set_schedule_map) :pointer
  (access :pointer)
  (schedule_map :pointer))

(cffi:defcfun ("isl_union_access_info_copy" isl_union_access_info_copy) :pointer
  (access :pointer))

(cffi:defcfun ("isl_union_access_info_free" isl_union_access_info_free) :pointer
  (access :pointer))

(cffi:defcfun ("isl_union_access_info_get_ctx" isl_union_access_info_get_ctx) :pointer
  (access :pointer))

(cffi:defcfun ("isl_union_access_info_read_from_file" isl_union_access_info_read_from_file) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_printer_print_union_access_info" isl_printer_print_union_access_info) :pointer
  (p :pointer)
  (access :pointer))

(cffi:defcfun ("isl_union_access_info_to_str" isl_union_access_info_to_str) :string
  (access :pointer))

(cffi:defcfun ("isl_union_access_info_compute_flow" isl_union_access_info_compute_flow) :pointer
  (access :pointer))

(cffi:defcfun ("isl_union_flow_get_ctx" isl_union_flow_get_ctx) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_copy" isl_union_flow_copy) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_get_must_dependence" isl_union_flow_get_must_dependence) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_get_may_dependence" isl_union_flow_get_may_dependence) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_get_full_must_dependence" isl_union_flow_get_full_must_dependence) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_get_full_may_dependence" isl_union_flow_get_full_may_dependence) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_get_must_no_source" isl_union_flow_get_must_no_source) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_get_may_no_source" isl_union_flow_get_may_no_source) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_free" isl_union_flow_free) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_printer_print_union_flow" isl_printer_print_union_flow) :pointer
  (p :pointer)
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_to_str" isl_union_flow_to_str) :string
  (flow :pointer))

(cffi:defcfun ("isl_union_map_compute_flow" isl_union_map_compute_flow) :int
  (sink :pointer)
  (must_source :pointer)
  (may_source :pointer)
  (schedule :pointer)
  (must_dep :pointer)
  (may_dep :pointer)
  (must_no_source :pointer)
  (may_no_source :pointer))

(cffi:defcfun ("isl_hash_string" isl_hash_string) :pointer
  (hash :pointer)
  (s :string))

(cffi:defcfun ("isl_hash_mem" isl_hash_mem) :pointer
  (hash :pointer)
  (p :pointer)
  (len :pointer))

(cffi:defcstruct isl_hash_table_entry
  (hash :pointer)
  (data :pointer))

(cffi:defcstruct isl_hash_table
  (bits :int)
  (n :int)
  (entries :pointer))

(cffi:defcfun ("isl_hash_table_alloc" isl_hash_table_alloc) :pointer
  (ctx :pointer)
  (min_size :int))

(cffi:defcfun ("isl_hash_table_free" isl_hash_table_free) :void
  (ctx :pointer)
  (table :pointer))

(cffi:defcfun ("isl_hash_table_init" isl_hash_table_init) :int
  (ctx :pointer)
  (table :pointer)
  (min_size :int))

(cffi:defcfun ("isl_hash_table_clear" isl_hash_table_clear) :void
  (table :pointer))

(cffi:defcvar ("isl_hash_table_entry_none" isl_hash_table_entry_none)
  :pointer)

(cffi:defcfun ("isl_hash_table_find" isl_hash_table_find) :pointer
  (ctx :pointer)
  (table :pointer)
  (key_hash :pointer)
  (eq :pointer)
  (val :pointer)
  (reserve :int))

(cffi:defcfun ("isl_hash_table_foreach" isl_hash_table_foreach) isl_stat
  (ctx :pointer)
  (table :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_hash_table_remove" isl_hash_table_remove) :void
  (ctx :pointer)
  (table :pointer)
  (entry :pointer))

(cffi:defcfun ("ISL_HMAP_alloc" ISL_HMAP_alloc) :pointer
  (ctx :pointer)
  (min_size :int))

(cffi:defcfun ("ISL_HMAP_copy" ISL_HMAP_copy) :pointer
  (hmap :pointer))

(cffi:defcfun ("ISL_HMAP_free" ISL_HMAP_free) :pointer
  (hmap :pointer))

(cffi:defcfun ("ISL_HMAP_get_ctx" ISL_HMAP_get_ctx) :pointer
  (hmap :pointer))

(cffi:defcfun ("ISL_HMAP_try_get" ISL_HMAP_try_get) :pointer
  (hmap :pointer)
  (key :pointer))

(cffi:defcfun ("ISL_HMAP_has" ISL_HMAP_has) isl_bool
  (hmap :pointer)
  (key :pointer))

(cffi:defcfun ("ISL_HMAP_get" ISL_HMAP_get) :pointer
  (hmap :pointer)
  (key :pointer))

(cffi:defcfun ("ISL_HMAP_set" ISL_HMAP_set) :pointer
  (hmap :pointer)
  (key :pointer)
  (val :pointer))

(cffi:defcfun ("ISL_HMAP_drop" ISL_HMAP_drop) :pointer
  (hmap :pointer)
  (key :pointer))

(cffi:defcfun ("ISL_HMAP_foreach" ISL_HMAP_foreach) isl_stat
  (hmap :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_printer_print_ISL_HMAP_SUFFIX" isl_printer_print_ISL_HMAP_SUFFIX) :pointer
  (p :pointer)
  (hmap :pointer))

(cffi:defcfun ("ISL_HMAP_dump" ISL_HMAP_dump) :void
  (hmap :pointer))

(cffi:defcfun ("isl_id_list_get_ctx" isl_id_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_id_list_from_id" isl_id_list_from_id) :pointer
  (el :pointer))

(cffi:defcfun ("isl_id_list_alloc" isl_id_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_id_list_copy" isl_id_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_id_list_free" isl_id_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_id_list_add" isl_id_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_id_list_insert" isl_id_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_id_list_drop" isl_id_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_id_list_clear" isl_id_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_id_list_swap" isl_id_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_id_list_reverse" isl_id_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_id_list_concat" isl_id_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_id_list_size" isl_id_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_id_list_n_id" isl_id_list_n_id) :int
  (list :pointer))

(cffi:defcfun ("isl_id_list_get_at" isl_id_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_id_list_get_id" isl_id_list_get_id) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_id_list_set_id" isl_id_list_set_id) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_id_list_foreach" isl_id_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_id_list_map" isl_id_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_id_list_sort" isl_id_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_id_list_foreach_scc" isl_id_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_id_list_to_str" isl_id_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_id_list" isl_printer_print_id_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_id_list_dump" isl_id_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_multi_id_get_ctx" isl_multi_id_get_ctx) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_get_space" isl_multi_id_get_space) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_get_domain_space" isl_multi_id_get_domain_space) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_from_id_list" isl_multi_id_from_id_list) :pointer
  (space :pointer)
  (list :pointer))

(cffi:defcfun ("isl_multi_id_copy" isl_multi_id_copy) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_free" isl_multi_id_free) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_plain_is_equal" isl_multi_id_plain_is_equal) isl_bool
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_id_reset_user" isl_multi_id_reset_user) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_size" isl_multi_id_size) :int
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_get_at" isl_multi_id_get_at) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_id_get_id" isl_multi_id_get_id) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_id_set_at" isl_multi_id_set_at) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_id_set_id" isl_multi_id_set_id) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_id_range_splice" isl_multi_id_range_splice) :pointer
  (multi1 :pointer)
  (pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_id_flatten_range" isl_multi_id_flatten_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_flat_range_product" isl_multi_id_flat_range_product) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_id_range_product" isl_multi_id_range_product) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_id_factor_range" isl_multi_id_factor_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_range_is_wrapping" isl_multi_id_range_is_wrapping) isl_bool
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_range_factor_domain" isl_multi_id_range_factor_domain) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_range_factor_range" isl_multi_id_range_factor_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_align_params" isl_multi_id_align_params) :pointer
  (multi :pointer)
  (model :pointer))

(cffi:defcfun ("isl_multi_id_from_range" isl_multi_id_from_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_id_get_ctx" isl_id_get_ctx) :pointer
  (id :pointer))

(cffi:defcfun ("isl_id_get_hash" isl_id_get_hash) :pointer
  (id :pointer))

(cffi:defcfun ("isl_id_alloc" isl_id_alloc) :pointer
  (ctx :pointer)
  (name :string)
  (user :pointer))

(cffi:defcfun ("isl_id_copy" isl_id_copy) :pointer
  (id :pointer))

(cffi:defcfun ("isl_id_free" isl_id_free) :pointer
  (id :pointer))

(cffi:defcfun ("isl_id_get_user" isl_id_get_user) :pointer
  (id :pointer))

(cffi:defcfun ("isl_id_get_name" isl_id_get_name) :string
  (id :pointer))

(cffi:defcfun ("isl_id_set_free_user" isl_id_set_free_user) :pointer
  (id :pointer)
  (free_user :pointer))

(cffi:defcfun ("isl_id_read_from_str" isl_id_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_id_to_str" isl_id_to_str) :string
  (id :pointer))

(cffi:defcfun ("isl_printer_print_id" isl_printer_print_id) :pointer
  (p :pointer)
  (id :pointer))

(cffi:defcfun ("isl_id_dump" isl_id_dump) :void
  (id :pointer))

(cffi:defcfun ("isl_multi_id_read_from_str" isl_multi_id_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_printer_print_multi_id" isl_printer_print_multi_id) :pointer
  (p :pointer)
  (mi :pointer))

(cffi:defcfun ("isl_multi_id_dump" isl_multi_id_dump) :void
  (mi :pointer))

(cffi:defcfun ("isl_multi_id_to_str" isl_multi_id_to_str) :string
  (mi :pointer))

(cffi:defcfun ("isl_basic_set_max_val" isl_basic_set_max_val) :pointer
  (bset :pointer)
  (obj :pointer))

(cffi:defcfun ("isl_set_min_val" isl_set_min_val) :pointer
  (set :pointer)
  (obj :pointer))

(cffi:defcfun ("isl_set_max_val" isl_set_max_val) :pointer
  (set :pointer)
  (obj :pointer))

(cffi:defcfun ("isl_union_set_min_multi_union_pw_aff" isl_union_set_min_multi_union_pw_aff) :pointer
  (uset :pointer)
  (obj :pointer))

(cffi:defcfun ("isl_union_pw_aff_min_val" isl_union_pw_aff_min_val) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_max_val" isl_union_pw_aff_max_val) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_min_multi_val" isl_multi_union_pw_aff_min_multi_val) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_max_multi_val" isl_multi_union_pw_aff_max_multi_val) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_basic_set_dim_max_val" isl_basic_set_dim_max_val) :pointer
  (bset :pointer)
  (pos :int))

(cffi:defcfun ("isl_local_space_get_ctx" isl_local_space_get_ctx) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_from_space" isl_local_space_from_space) :pointer
  (dim :pointer))

(cffi:defcfun ("isl_local_space_copy" isl_local_space_copy) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_free" isl_local_space_free) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_is_params" isl_local_space_is_params) isl_bool
  (ls :pointer))

(cffi:defcfun ("isl_local_space_is_set" isl_local_space_is_set) isl_bool
  (ls :pointer))

(cffi:defcfun ("isl_local_space_set_tuple_id" isl_local_space_set_tuple_id) :pointer
  (ls :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_local_space_dim" isl_local_space_dim) :int
  (ls :pointer)
  (type :pointer))

(cffi:defcfun ("isl_local_space_has_dim_name" isl_local_space_has_dim_name) isl_bool
  (ls :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_local_space_get_dim_name" isl_local_space_get_dim_name) :string
  (ls :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_local_space_set_dim_name" isl_local_space_set_dim_name) :pointer
  (ls :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_local_space_has_dim_id" isl_local_space_has_dim_id) isl_bool
  (ls :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_local_space_get_dim_id" isl_local_space_get_dim_id) :pointer
  (ls :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_local_space_set_dim_id" isl_local_space_set_dim_id) :pointer
  (ls :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_local_space_get_space" isl_local_space_get_space) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_get_div" isl_local_space_get_div) :pointer
  (ls :pointer)
  (pos :int))

(cffi:defcfun ("isl_local_space_find_dim_by_name" isl_local_space_find_dim_by_name) :int
  (ls :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_local_space_domain" isl_local_space_domain) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_range" isl_local_space_range) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_from_domain" isl_local_space_from_domain) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_add_dims" isl_local_space_add_dims) :pointer
  (ls :pointer)
  (type :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_local_space_drop_dims" isl_local_space_drop_dims) :pointer
  (ls :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_local_space_insert_dims" isl_local_space_insert_dims) :pointer
  (ls :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_local_space_set_from_params" isl_local_space_set_from_params) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_intersect" isl_local_space_intersect) :pointer
  (ls1 :pointer)
  (ls2 :pointer))

(cffi:defcfun ("isl_local_space_wrap" isl_local_space_wrap) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_is_equal" isl_local_space_is_equal) isl_bool
  (ls1 :pointer)
  (ls2 :pointer))

(cffi:defcfun ("isl_local_space_lifting" isl_local_space_lifting) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_flatten_domain" isl_local_space_flatten_domain) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_flatten_range" isl_local_space_flatten_range) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_printer_print_local_space" isl_printer_print_local_space) :pointer
  (p :pointer)
  (ls :pointer))

(cffi:defcfun ("isl_local_space_dump" isl_local_space_dump) :void
  (ls :pointer))

(cffi:defcfun ("isl_basic_set_min_lp_val" isl_basic_set_min_lp_val) :pointer
  (bset :pointer)
  (obj :pointer))

(cffi:defcfun ("isl_basic_set_max_lp_val" isl_basic_set_max_lp_val) :pointer
  (bset :pointer)
  (obj :pointer))

(cffi:defcfun ("isl_basic_map_total_dim" isl_basic_map_total_dim) :int
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_dim" isl_basic_map_dim) :int
  (bmap :pointer)
  (type :pointer))

(cffi:defcfun ("isl_map_dim" isl_map_dim) :int
  (map :pointer)
  (type :pointer))

(cffi:defcfun ("isl_basic_map_get_ctx" isl_basic_map_get_ctx) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_get_ctx" isl_map_get_ctx) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_get_space" isl_basic_map_get_space) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_get_space" isl_map_get_space) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_get_div" isl_basic_map_get_div) :pointer
  (bmap :pointer)
  (pos :int))

(cffi:defcfun ("isl_basic_map_get_local_space" isl_basic_map_get_local_space) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_set_tuple_name" isl_basic_map_set_tuple_name) :pointer
  (bmap :pointer)
  (type :pointer)
  (s :string))

(cffi:defcfun ("isl_basic_map_get_tuple_name" isl_basic_map_get_tuple_name) :string
  (bmap :pointer)
  (type :pointer))

(cffi:defcfun ("isl_map_has_tuple_name" isl_map_has_tuple_name) isl_bool
  (map :pointer)
  (type :pointer))

(cffi:defcfun ("isl_map_get_tuple_name" isl_map_get_tuple_name) :string
  (map :pointer)
  (type :pointer))

(cffi:defcfun ("isl_map_set_tuple_name" isl_map_set_tuple_name) :pointer
  (map :pointer)
  (type :pointer)
  (s :string))

(cffi:defcfun ("isl_basic_map_get_dim_name" isl_basic_map_get_dim_name) :string
  (bmap :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_map_has_dim_name" isl_map_has_dim_name) isl_bool
  (map :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_map_get_dim_name" isl_map_get_dim_name) :string
  (map :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_map_set_dim_name" isl_basic_map_set_dim_name) :pointer
  (bmap :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_map_set_dim_name" isl_map_set_dim_name) :pointer
  (map :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_basic_map_set_tuple_id" isl_basic_map_set_tuple_id) :pointer
  (bmap :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_map_set_dim_id" isl_map_set_dim_id) :pointer
  (map :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_basic_map_has_dim_id" isl_basic_map_has_dim_id) isl_bool
  (bmap :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_map_has_dim_id" isl_map_has_dim_id) isl_bool
  (map :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_map_get_dim_id" isl_map_get_dim_id) :pointer
  (map :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_map_set_tuple_id" isl_map_set_tuple_id) :pointer
  (map :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_map_reset_tuple_id" isl_map_reset_tuple_id) :pointer
  (map :pointer)
  (type :pointer))

(cffi:defcfun ("isl_map_has_tuple_id" isl_map_has_tuple_id) isl_bool
  (map :pointer)
  (type :pointer))

(cffi:defcfun ("isl_map_get_tuple_id" isl_map_get_tuple_id) :pointer
  (map :pointer)
  (type :pointer))

(cffi:defcfun ("isl_map_reset_user" isl_map_reset_user) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_find_dim_by_name" isl_basic_map_find_dim_by_name) :int
  (bmap :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_map_find_dim_by_id" isl_map_find_dim_by_id) :int
  (map :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_map_find_dim_by_name" isl_map_find_dim_by_name) :int
  (map :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_basic_map_is_rational" isl_basic_map_is_rational) isl_bool
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_identity" isl_basic_map_identity) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_map_free" isl_basic_map_free) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_copy" isl_basic_map_copy) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_equal" isl_basic_map_equal) :pointer
  (space :pointer)
  (n_equal :unsigned-int))

(cffi:defcfun ("isl_basic_map_less_at" isl_basic_map_less_at) :pointer
  (space :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_map_more_at" isl_basic_map_more_at) :pointer
  (space :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_map_empty" isl_basic_map_empty) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_map_universe" isl_basic_map_universe) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_map_nat_universe" isl_basic_map_nat_universe) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_map_remove_redundancies" isl_basic_map_remove_redundancies) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_remove_redundancies" isl_map_remove_redundancies) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_simple_hull" isl_map_simple_hull) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_unshifted_simple_hull" isl_map_unshifted_simple_hull) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_plain_unshifted_simple_hull" isl_map_plain_unshifted_simple_hull) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_unshifted_simple_hull_from_map_list" isl_map_unshifted_simple_hull_from_map_list) :pointer
  (map :pointer)
  (list :pointer))

(cffi:defcfun ("isl_basic_map_intersect_domain" isl_basic_map_intersect_domain) :pointer
  (bmap :pointer)
  (bset :pointer))

(cffi:defcfun ("isl_basic_map_intersect_range" isl_basic_map_intersect_range) :pointer
  (bmap :pointer)
  (bset :pointer))

(cffi:defcfun ("isl_basic_map_intersect" isl_basic_map_intersect) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_list_intersect" isl_basic_map_list_intersect) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_map_union" isl_basic_map_union) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_apply_domain" isl_basic_map_apply_domain) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_apply_range" isl_basic_map_apply_range) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_affine_hull" isl_basic_map_affine_hull) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_preimage_domain_multi_aff" isl_basic_map_preimage_domain_multi_aff) :pointer
  (bmap :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_basic_map_preimage_range_multi_aff" isl_basic_map_preimage_range_multi_aff) :pointer
  (bmap :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_basic_map_reverse" isl_basic_map_reverse) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_domain" isl_basic_map_domain) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_range" isl_basic_map_range) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_domain_map" isl_basic_map_domain_map) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_range_map" isl_basic_map_range_map) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_remove_dims" isl_basic_map_remove_dims) :pointer
  (bmap :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_eliminate" isl_basic_map_eliminate) :pointer
  (bmap :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_sample" isl_basic_map_sample) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_detect_equalities" isl_basic_map_detect_equalities) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_read_from_file" isl_basic_map_read_from_file) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_basic_map_read_from_str" isl_basic_map_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_map_read_from_file" isl_map_read_from_file) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_map_read_from_str" isl_map_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_basic_map_dump" isl_basic_map_dump) :void
  (bmap :pointer))

(cffi:defcfun ("isl_map_dump" isl_map_dump) :void
  (map :pointer))

(cffi:defcfun ("isl_basic_map_to_str" isl_basic_map_to_str) :string
  (bmap :pointer))

(cffi:defcfun ("isl_printer_print_basic_map" isl_printer_print_basic_map) :pointer
  (printer :pointer)
  (bmap :pointer))

(cffi:defcfun ("isl_map_to_str" isl_map_to_str) :string
  (map :pointer))

(cffi:defcfun ("isl_printer_print_map" isl_printer_print_map) :pointer
  (printer :pointer)
  (map :pointer))

(cffi:defcfun ("isl_basic_map_fix_si" isl_basic_map_fix_si) :pointer
  (bmap :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_map_fix_val" isl_basic_map_fix_val) :pointer
  (bmap :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (v :pointer))

(cffi:defcfun ("isl_basic_map_lower_bound_si" isl_basic_map_lower_bound_si) :pointer
  (bmap :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_map_upper_bound_si" isl_basic_map_upper_bound_si) :pointer
  (bmap :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_map_sum" isl_basic_map_sum) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_neg" isl_basic_map_neg) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_sum" isl_map_sum) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_neg" isl_map_neg) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_floordiv_val" isl_map_floordiv_val) :pointer
  (map :pointer)
  (d :pointer))

(cffi:defcfun ("isl_basic_map_is_equal" isl_basic_map_is_equal) isl_bool
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_is_disjoint" isl_basic_map_is_disjoint) isl_bool
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_partial_lexmax" isl_basic_map_partial_lexmax) :pointer
  (bmap :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_map_partial_lexmin" isl_basic_map_partial_lexmin) :pointer
  (bmap :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_map_partial_lexmax" isl_map_partial_lexmax) :pointer
  (map :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_map_partial_lexmin" isl_map_partial_lexmin) :pointer
  (map :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_map_lexmin" isl_basic_map_lexmin) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_lexmax" isl_basic_map_lexmax) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_lexmin" isl_map_lexmin) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_lexmax" isl_map_lexmax) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_partial_lexmin_pw_multi_aff" isl_basic_map_partial_lexmin_pw_multi_aff) :pointer
  (bmap :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_map_partial_lexmax_pw_multi_aff" isl_basic_map_partial_lexmax_pw_multi_aff) :pointer
  (bmap :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_map_lexmin_pw_multi_aff" isl_basic_map_lexmin_pw_multi_aff) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_lexmin_pw_multi_aff" isl_map_lexmin_pw_multi_aff) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_lexmax_pw_multi_aff" isl_map_lexmax_pw_multi_aff) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_print_internal" isl_basic_map_print_internal) :void
  (bmap :pointer)
  (out :pointer)
  (indent :int))

(cffi:defcfun ("isl_basic_map_plain_get_val_if_fixed" isl_basic_map_plain_get_val_if_fixed) :pointer
  (bmap :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_map_image_is_bounded" isl_basic_map_image_is_bounded) isl_bool
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_plain_is_universe" isl_basic_map_plain_is_universe) isl_bool
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_is_universe" isl_basic_map_is_universe) isl_bool
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_plain_is_empty" isl_basic_map_plain_is_empty) isl_bool
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_is_empty" isl_basic_map_is_empty) isl_bool
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_is_subset" isl_basic_map_is_subset) isl_bool
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_is_strict_subset" isl_basic_map_is_strict_subset) isl_bool
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_map_universe" isl_map_universe) :pointer
  (space :pointer))

(cffi:defcfun ("isl_map_nat_universe" isl_map_nat_universe) :pointer
  (dim :pointer))

(cffi:defcfun ("isl_map_empty" isl_map_empty) :pointer
  (space :pointer))

(cffi:defcfun ("isl_map_identity" isl_map_identity) :pointer
  (dim :pointer))

(cffi:defcfun ("isl_map_lex_lt_first" isl_map_lex_lt_first) :pointer
  (dim :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_lex_le_first" isl_map_lex_le_first) :pointer
  (dim :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_lex_lt" isl_map_lex_lt) :pointer
  (set_dim :pointer))

(cffi:defcfun ("isl_map_lex_le" isl_map_lex_le) :pointer
  (set_dim :pointer))

(cffi:defcfun ("isl_map_lex_gt_first" isl_map_lex_gt_first) :pointer
  (dim :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_lex_ge_first" isl_map_lex_ge_first) :pointer
  (dim :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_lex_gt" isl_map_lex_gt) :pointer
  (set_dim :pointer))

(cffi:defcfun ("isl_map_lex_ge" isl_map_lex_ge) :pointer
  (set_dim :pointer))

(cffi:defcfun ("isl_map_free" isl_map_free) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_copy" isl_map_copy) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_reverse" isl_map_reverse) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_range_reverse" isl_map_range_reverse) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_union" isl_map_union) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_union_disjoint" isl_map_union_disjoint) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_intersect_domain" isl_map_intersect_domain) :pointer
  (map :pointer)
  (set :pointer))

(cffi:defcfun ("isl_map_intersect_range" isl_map_intersect_range) :pointer
  (map :pointer)
  (set :pointer))

(cffi:defcfun ("isl_map_intersect_domain_factor_range" isl_map_intersect_domain_factor_range) :pointer
  (map :pointer)
  (factor :pointer))

(cffi:defcfun ("isl_map_intersect_range_factor_domain" isl_map_intersect_range_factor_domain) :pointer
  (map :pointer)
  (factor :pointer))

(cffi:defcfun ("isl_map_intersect_range_factor_range" isl_map_intersect_range_factor_range) :pointer
  (map :pointer)
  (factor :pointer))

(cffi:defcfun ("isl_map_apply_domain" isl_map_apply_domain) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_apply_range" isl_map_apply_range) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_preimage_domain_multi_aff" isl_map_preimage_domain_multi_aff) :pointer
  (map :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_map_preimage_range_multi_aff" isl_map_preimage_range_multi_aff) :pointer
  (map :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_map_preimage_domain_pw_multi_aff" isl_map_preimage_domain_pw_multi_aff) :pointer
  (map :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_map_preimage_range_pw_multi_aff" isl_map_preimage_range_pw_multi_aff) :pointer
  (map :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_map_preimage_domain_multi_pw_aff" isl_map_preimage_domain_multi_pw_aff) :pointer
  (map :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_basic_map_product" isl_basic_map_product) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_map_product" isl_map_product) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_basic_map_domain_product" isl_basic_map_domain_product) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_range_product" isl_basic_map_range_product) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_map_domain_product" isl_map_domain_product) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_range_product" isl_map_range_product) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_basic_map_flat_product" isl_basic_map_flat_product) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_map_flat_product" isl_map_flat_product) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_basic_map_flat_range_product" isl_basic_map_flat_range_product) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_map_flat_domain_product" isl_map_flat_domain_product) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_flat_range_product" isl_map_flat_range_product) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_domain_is_wrapping" isl_map_domain_is_wrapping) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_map_range_is_wrapping" isl_map_range_is_wrapping) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_map_is_product" isl_map_is_product) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_map_factor_domain" isl_map_factor_domain) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_factor_range" isl_map_factor_range) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_domain_factor_domain" isl_map_domain_factor_domain) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_domain_factor_range" isl_map_domain_factor_range) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_range_factor_domain" isl_map_range_factor_domain) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_range_factor_range" isl_map_range_factor_range) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_intersect" isl_map_intersect) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_intersect_params" isl_map_intersect_params) :pointer
  (map :pointer)
  (params :pointer))

(cffi:defcfun ("isl_map_subtract" isl_map_subtract) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_subtract_domain" isl_map_subtract_domain) :pointer
  (map :pointer)
  (dom :pointer))

(cffi:defcfun ("isl_map_subtract_range" isl_map_subtract_range) :pointer
  (map :pointer)
  (dom :pointer))

(cffi:defcfun ("isl_map_complement" isl_map_complement) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_fix_input_si" isl_map_fix_input_si) :pointer
  (map :pointer)
  (input :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_map_fix_si" isl_map_fix_si) :pointer
  (map :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_map_fix_val" isl_map_fix_val) :pointer
  (map :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (v :pointer))

(cffi:defcfun ("isl_map_lower_bound_si" isl_map_lower_bound_si) :pointer
  (map :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_map_upper_bound_si" isl_map_upper_bound_si) :pointer
  (map :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_map_deltas" isl_basic_map_deltas) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_deltas" isl_map_deltas) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_deltas_map" isl_basic_map_deltas_map) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_deltas_map" isl_map_deltas_map) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_detect_equalities" isl_map_detect_equalities) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_affine_hull" isl_map_affine_hull) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_convex_hull" isl_map_convex_hull) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_polyhedral_hull" isl_map_polyhedral_hull) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_add_dims" isl_basic_map_add_dims) :pointer
  (bmap :pointer)
  (type :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_add_dims" isl_map_add_dims) :pointer
  (map :pointer)
  (type :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_insert_dims" isl_basic_map_insert_dims) :pointer
  (bmap :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_insert_dims" isl_map_insert_dims) :pointer
  (map :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_move_dims" isl_basic_map_move_dims) :pointer
  (bmap :pointer)
  (dst_type :pointer)
  (dst_pos :unsigned-int)
  (src_type :pointer)
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_move_dims" isl_map_move_dims) :pointer
  (map :pointer)
  (dst_type :pointer)
  (dst_pos :unsigned-int)
  (src_type :pointer)
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_project_out" isl_basic_map_project_out) :pointer
  (bmap :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_project_out" isl_map_project_out) :pointer
  (map :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_project_out_all_params" isl_map_project_out_all_params) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_remove_divs" isl_basic_map_remove_divs) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_remove_unknown_divs" isl_map_remove_unknown_divs) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_remove_divs" isl_map_remove_divs) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_eliminate" isl_map_eliminate) :pointer
  (map :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_remove_dims" isl_map_remove_dims) :pointer
  (map :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_remove_divs_involving_dims" isl_basic_map_remove_divs_involving_dims) :pointer
  (bmap :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_remove_divs_involving_dims" isl_map_remove_divs_involving_dims) :pointer
  (map :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_remove_inputs" isl_map_remove_inputs) :pointer
  (map :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_equate" isl_basic_map_equate) :pointer
  (bmap :pointer)
  (type1 :pointer)
  (pos1 :int)
  (type2 :pointer)
  (pos2 :int))

(cffi:defcfun ("isl_basic_map_order_ge" isl_basic_map_order_ge) :pointer
  (bmap :pointer)
  (type1 :pointer)
  (pos1 :int)
  (type2 :pointer)
  (pos2 :int))

(cffi:defcfun ("isl_map_order_ge" isl_map_order_ge) :pointer
  (map :pointer)
  (type1 :pointer)
  (pos1 :int)
  (type2 :pointer)
  (pos2 :int))

(cffi:defcfun ("isl_map_order_le" isl_map_order_le) :pointer
  (map :pointer)
  (type1 :pointer)
  (pos1 :int)
  (type2 :pointer)
  (pos2 :int))

(cffi:defcfun ("isl_map_equate" isl_map_equate) :pointer
  (map :pointer)
  (type1 :pointer)
  (pos1 :int)
  (type2 :pointer)
  (pos2 :int))

(cffi:defcfun ("isl_map_oppose" isl_map_oppose) :pointer
  (map :pointer)
  (type1 :pointer)
  (pos1 :int)
  (type2 :pointer)
  (pos2 :int))

(cffi:defcfun ("isl_map_order_lt" isl_map_order_lt) :pointer
  (map :pointer)
  (type1 :pointer)
  (pos1 :int)
  (type2 :pointer)
  (pos2 :int))

(cffi:defcfun ("isl_basic_map_order_gt" isl_basic_map_order_gt) :pointer
  (bmap :pointer)
  (type1 :pointer)
  (pos1 :int)
  (type2 :pointer)
  (pos2 :int))

(cffi:defcfun ("isl_map_order_gt" isl_map_order_gt) :pointer
  (map :pointer)
  (type1 :pointer)
  (pos1 :int)
  (type2 :pointer)
  (pos2 :int))

(cffi:defcfun ("isl_set_identity" isl_set_identity) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_is_wrapping" isl_basic_set_is_wrapping) isl_bool
  (bset :pointer))

(cffi:defcfun ("isl_set_is_wrapping" isl_set_is_wrapping) isl_bool
  (set :pointer))

(cffi:defcfun ("isl_basic_map_wrap" isl_basic_map_wrap) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_wrap" isl_map_wrap) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_set_unwrap" isl_basic_set_unwrap) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_unwrap" isl_set_unwrap) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_map_flatten" isl_basic_map_flatten) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_flatten" isl_map_flatten) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_flatten_domain" isl_basic_map_flatten_domain) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_flatten_range" isl_basic_map_flatten_range) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_flatten_domain" isl_map_flatten_domain) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_flatten_range" isl_map_flatten_range) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_set_flatten" isl_basic_set_flatten) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_flatten" isl_set_flatten) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_flatten_map" isl_set_flatten_map) :pointer
  (set :pointer))

(cffi:defcfun ("isl_map_params" isl_map_params) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_domain" isl_map_domain) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_range" isl_map_range) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_domain_map" isl_map_domain_map) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_range_map" isl_map_range_map) :pointer
  (map :pointer))

(cffi:defcfun ("isl_set_wrapped_domain_map" isl_set_wrapped_domain_map) :pointer
  (set :pointer))

(cffi:defcfun ("isl_map_from_basic_map" isl_map_from_basic_map) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_from_domain" isl_map_from_domain) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_map_from_domain" isl_basic_map_from_domain) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_map_from_range" isl_basic_map_from_range) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_map_from_range" isl_map_from_range) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_map_from_domain_and_range" isl_basic_map_from_domain_and_range) :pointer
  (domain :pointer)
  (range :pointer))

(cffi:defcfun ("isl_map_from_domain_and_range" isl_map_from_domain_and_range) :pointer
  (domain :pointer)
  (range :pointer))

(cffi:defcfun ("isl_map_sample" isl_map_sample) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_bind_domain" isl_map_bind_domain) :pointer
  (map :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_map_bind_range" isl_map_bind_range) :pointer
  (map :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_map_plain_is_empty" isl_map_plain_is_empty) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_map_plain_is_universe" isl_map_plain_is_universe) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_map_is_empty" isl_map_is_empty) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_map_is_subset" isl_map_is_subset) isl_bool
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_is_strict_subset" isl_map_is_strict_subset) isl_bool
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_is_equal" isl_map_is_equal) isl_bool
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_is_disjoint" isl_map_is_disjoint) isl_bool
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_basic_map_is_single_valued" isl_basic_map_is_single_valued) isl_bool
  (bmap :pointer))

(cffi:defcfun ("isl_map_plain_is_single_valued" isl_map_plain_is_single_valued) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_map_is_single_valued" isl_map_is_single_valued) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_map_plain_is_injective" isl_map_plain_is_injective) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_map_is_injective" isl_map_is_injective) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_map_is_bijective" isl_map_is_bijective) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_map_is_identity" isl_map_is_identity) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_map_is_translation" isl_map_is_translation) :int
  (map :pointer))

(cffi:defcfun ("isl_map_has_equal_space" isl_map_has_equal_space) isl_bool
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_basic_map_can_zip" isl_basic_map_can_zip) isl_bool
  (bmap :pointer))

(cffi:defcfun ("isl_map_can_zip" isl_map_can_zip) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_basic_map_zip" isl_basic_map_zip) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_zip" isl_map_zip) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_can_curry" isl_basic_map_can_curry) isl_bool
  (bmap :pointer))

(cffi:defcfun ("isl_map_can_curry" isl_map_can_curry) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_basic_map_curry" isl_basic_map_curry) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_curry" isl_map_curry) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_can_range_curry" isl_map_can_range_curry) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_map_range_curry" isl_map_range_curry) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_can_uncurry" isl_basic_map_can_uncurry) isl_bool
  (bmap :pointer))

(cffi:defcfun ("isl_map_can_uncurry" isl_map_can_uncurry) isl_bool
  (map :pointer))

(cffi:defcfun ("isl_basic_map_uncurry" isl_basic_map_uncurry) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_uncurry" isl_map_uncurry) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_make_disjoint" isl_map_make_disjoint) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_compute_divs" isl_basic_map_compute_divs) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_compute_divs" isl_map_compute_divs) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_align_divs" isl_map_align_divs) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_drop_constraints_involving_dims" isl_basic_map_drop_constraints_involving_dims) :pointer
  (bmap :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_drop_constraints_not_involving_dims" isl_basic_map_drop_constraints_not_involving_dims) :pointer
  (bmap :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_drop_constraints_involving_dims" isl_map_drop_constraints_involving_dims) :pointer
  (map :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_drop_constraints_not_involving_dims" isl_map_drop_constraints_not_involving_dims) :pointer
  (map :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_involves_dims" isl_basic_map_involves_dims) isl_bool
  (bmap :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_involves_dims" isl_map_involves_dims) isl_bool
  (map :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_print_internal" isl_map_print_internal) :void
  (map :pointer)
  (out :pointer)
  (indent :int))

(cffi:defcfun ("isl_map_plain_get_val_if_fixed" isl_map_plain_get_val_if_fixed) :pointer
  (map :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_map_gist_domain" isl_basic_map_gist_domain) :pointer
  (bmap :pointer)
  (context :pointer))

(cffi:defcfun ("isl_basic_map_gist" isl_basic_map_gist) :pointer
  (bmap :pointer)
  (context :pointer))

(cffi:defcfun ("isl_map_gist" isl_map_gist) :pointer
  (map :pointer)
  (context :pointer))

(cffi:defcfun ("isl_map_gist_domain" isl_map_gist_domain) :pointer
  (map :pointer)
  (context :pointer))

(cffi:defcfun ("isl_map_gist_range" isl_map_gist_range) :pointer
  (map :pointer)
  (context :pointer))

(cffi:defcfun ("isl_map_gist_params" isl_map_gist_params) :pointer
  (map :pointer)
  (context :pointer))

(cffi:defcfun ("isl_map_gist_basic_map" isl_map_gist_basic_map) :pointer
  (map :pointer)
  (context :pointer))

(cffi:defcfun ("isl_map_get_range_stride_info" isl_map_get_range_stride_info) :pointer
  (map :pointer)
  (pos :int))

(cffi:defcfun ("isl_map_get_range_simple_fixed_box_hull" isl_map_get_range_simple_fixed_box_hull) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_coalesce" isl_map_coalesce) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_plain_is_equal" isl_map_plain_is_equal) isl_bool
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_get_hash" isl_map_get_hash) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_n_basic_map" isl_map_n_basic_map) :int
  (map :pointer))

(cffi:defcfun ("isl_map_foreach_basic_map" isl_map_foreach_basic_map) isl_stat
  (map :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_map_get_basic_map_list" isl_map_get_basic_map_list) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_fixed_power_val" isl_map_fixed_power_val) :pointer
  (map :pointer)
  (exp :pointer))

(cffi:defcfun ("isl_map_power" isl_map_power) :pointer
  (map :pointer)
  (exact :pointer))

(cffi:defcfun ("isl_map_reaching_path_lengths" isl_map_reaching_path_lengths) :pointer
  (map :pointer)
  (exact :pointer))

(cffi:defcfun ("isl_map_transitive_closure" isl_map_transitive_closure) :pointer
  (map :pointer)
  (exact :pointer))

(cffi:defcfun ("isl_map_lex_le_map" isl_map_lex_le_map) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_lex_lt_map" isl_map_lex_lt_map) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_lex_ge_map" isl_map_lex_ge_map) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_lex_gt_map" isl_map_lex_gt_map) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_basic_map_align_params" isl_basic_map_align_params) :pointer
  (bmap :pointer)
  (model :pointer))

(cffi:defcfun ("isl_map_align_params" isl_map_align_params) :pointer
  (map :pointer)
  (model :pointer))

(cffi:defcfun ("isl_basic_map_drop_unused_params" isl_basic_map_drop_unused_params) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_drop_unused_params" isl_map_drop_unused_params) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_equalities_matrix" isl_basic_map_equalities_matrix) :pointer
  (bmap :pointer)
  (c1 :pointer)
  (c2 :pointer)
  (c3 :pointer)
  (c4 :pointer)
  (c5 :pointer))

(cffi:defcfun ("isl_basic_map_inequalities_matrix" isl_basic_map_inequalities_matrix) :pointer
  (bmap :pointer)
  (c1 :pointer)
  (c2 :pointer)
  (c3 :pointer)
  (c4 :pointer)
  (c5 :pointer))

(cffi:defcfun ("isl_basic_map_from_constraint_matrices" isl_basic_map_from_constraint_matrices) :pointer
  (dim :pointer)
  (eq :pointer)
  (ineq :pointer)
  (c1 :pointer)
  (c2 :pointer)
  (c3 :pointer)
  (c4 :pointer)
  (c5 :pointer))

(cffi:defcfun ("isl_basic_map_from_aff" isl_basic_map_from_aff) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_basic_map_from_multi_aff" isl_basic_map_from_multi_aff) :pointer
  (maff :pointer))

(cffi:defcfun ("isl_basic_map_from_aff_list" isl_basic_map_from_aff_list) :pointer
  (domain_space :pointer)
  (list :pointer))

(cffi:defcfun ("isl_map_from_aff" isl_map_from_aff) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_map_from_multi_aff" isl_map_from_multi_aff) :pointer
  (maff :pointer))

(cffi:defcfun ("isl_map_dim_min" isl_map_dim_min) :pointer
  (map :pointer)
  (pos :int))

(cffi:defcfun ("isl_map_dim_max" isl_map_dim_max) :pointer
  (map :pointer)
  (pos :int))

(cffi:defcfun ("isl_basic_map_list_get_ctx" isl_basic_map_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_from_basic_map" isl_basic_map_list_from_basic_map) :pointer
  (el :pointer))

(cffi:defcfun ("isl_basic_map_list_alloc" isl_basic_map_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_basic_map_list_copy" isl_basic_map_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_free" isl_basic_map_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_add" isl_basic_map_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_basic_map_list_insert" isl_basic_map_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_basic_map_list_drop" isl_basic_map_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_list_clear" isl_basic_map_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_swap" isl_basic_map_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_basic_map_list_reverse" isl_basic_map_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_concat" isl_basic_map_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_basic_map_list_size" isl_basic_map_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_n_basic_map" isl_basic_map_list_n_basic_map) :int
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_get_at" isl_basic_map_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_basic_map_list_get_basic_map" isl_basic_map_list_get_basic_map) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_basic_map_list_set_basic_map" isl_basic_map_list_set_basic_map) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_basic_map_list_foreach" isl_basic_map_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_map_list_map" isl_basic_map_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_map_list_sort" isl_basic_map_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_map_list_foreach_scc" isl_basic_map_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_basic_map_list_to_str" isl_basic_map_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_basic_map_list" isl_printer_print_basic_map_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_dump" isl_basic_map_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_map_list_get_ctx" isl_map_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_map_list_from_map" isl_map_list_from_map) :pointer
  (el :pointer))

(cffi:defcfun ("isl_map_list_alloc" isl_map_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_map_list_copy" isl_map_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_map_list_free" isl_map_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_map_list_add" isl_map_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_map_list_insert" isl_map_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_map_list_drop" isl_map_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_list_clear" isl_map_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_map_list_swap" isl_map_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_map_list_reverse" isl_map_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_map_list_concat" isl_map_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_map_list_size" isl_map_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_map_list_n_map" isl_map_list_n_map) :int
  (list :pointer))

(cffi:defcfun ("isl_map_list_get_at" isl_map_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_map_list_get_map" isl_map_list_get_map) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_map_list_set_map" isl_map_list_set_map) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_map_list_foreach" isl_map_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_map_list_map" isl_map_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_map_list_sort" isl_map_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_map_list_foreach_scc" isl_map_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_map_list_to_str" isl_map_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_map_list" isl_printer_print_map_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_map_list_dump" isl_map_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_get_ctx" isl_basic_set_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_from_basic_set" isl_basic_set_list_from_basic_set) :pointer
  (el :pointer))

(cffi:defcfun ("isl_basic_set_list_alloc" isl_basic_set_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_basic_set_list_copy" isl_basic_set_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_free" isl_basic_set_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_add" isl_basic_set_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_basic_set_list_insert" isl_basic_set_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_basic_set_list_drop" isl_basic_set_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_list_clear" isl_basic_set_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_swap" isl_basic_set_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_basic_set_list_reverse" isl_basic_set_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_concat" isl_basic_set_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_basic_set_list_size" isl_basic_set_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_n_basic_set" isl_basic_set_list_n_basic_set) :int
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_get_at" isl_basic_set_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_basic_set_list_get_basic_set" isl_basic_set_list_get_basic_set) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_basic_set_list_set_basic_set" isl_basic_set_list_set_basic_set) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_basic_set_list_foreach" isl_basic_set_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_set_list_map" isl_basic_set_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_set_list_sort" isl_basic_set_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_set_list_foreach_scc" isl_basic_set_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_basic_set_list_to_str" isl_basic_set_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_basic_set_list" isl_printer_print_basic_set_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_dump" isl_basic_set_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_set_list_get_ctx" isl_set_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_list_from_set" isl_set_list_from_set) :pointer
  (el :pointer))

(cffi:defcfun ("isl_set_list_alloc" isl_set_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_set_list_copy" isl_set_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_list_free" isl_set_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_list_add" isl_set_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_set_list_insert" isl_set_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_set_list_drop" isl_set_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_list_clear" isl_set_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_list_swap" isl_set_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_set_list_reverse" isl_set_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_list_concat" isl_set_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_set_list_size" isl_set_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_set_list_n_set" isl_set_list_n_set) :int
  (list :pointer))

(cffi:defcfun ("isl_set_list_get_at" isl_set_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_set_list_get_set" isl_set_list_get_set) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_set_list_set_set" isl_set_list_set_set) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_set_list_foreach" isl_set_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_set_list_map" isl_set_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_set_list_sort" isl_set_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_set_list_foreach_scc" isl_set_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_set_list_to_str" isl_set_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_set_list" isl_printer_print_set_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_set_list_dump" isl_set_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_mat_get_ctx" isl_mat_get_ctx) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_alloc" isl_mat_alloc) :pointer
  (ctx :pointer)
  (n_row :unsigned-int)
  (n_col :unsigned-int))

(cffi:defcfun ("isl_mat_extend" isl_mat_extend) :pointer
  (mat :pointer)
  (n_row :unsigned-int)
  (n_col :unsigned-int))

(cffi:defcfun ("isl_mat_identity" isl_mat_identity) :pointer
  (ctx :pointer)
  (n_row :unsigned-int))

(cffi:defcfun ("isl_mat_copy" isl_mat_copy) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_free" isl_mat_free) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_rows" isl_mat_rows) :int
  (mat :pointer))

(cffi:defcfun ("isl_mat_cols" isl_mat_cols) :int
  (mat :pointer))

(cffi:defcfun ("isl_mat_get_element_val" isl_mat_get_element_val) :pointer
  (mat :pointer)
  (row :int)
  (col :int))

(cffi:defcfun ("isl_mat_set_element_si" isl_mat_set_element_si) :pointer
  (mat :pointer)
  (row :int)
  (col :int)
  (v :int))

(cffi:defcfun ("isl_mat_set_element_val" isl_mat_set_element_val) :pointer
  (mat :pointer)
  (row :int)
  (col :int)
  (v :pointer))

(cffi:defcfun ("isl_mat_swap_cols" isl_mat_swap_cols) :pointer
  (mat :pointer)
  (i :unsigned-int)
  (j :unsigned-int))

(cffi:defcfun ("isl_mat_swap_rows" isl_mat_swap_rows) :pointer
  (mat :pointer)
  (i :unsigned-int)
  (j :unsigned-int))

(cffi:defcfun ("isl_mat_vec_product" isl_mat_vec_product) :pointer
  (mat :pointer)
  (vec :pointer))

(cffi:defcfun ("isl_vec_mat_product" isl_vec_mat_product) :pointer
  (vec :pointer)
  (mat :pointer))

(cffi:defcfun ("isl_mat_vec_inverse_product" isl_mat_vec_inverse_product) :pointer
  (mat :pointer)
  (vec :pointer))

(cffi:defcfun ("isl_mat_aff_direct_sum" isl_mat_aff_direct_sum) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_mat_diagonal" isl_mat_diagonal) :pointer
  (mat1 :pointer)
  (mat2 :pointer))

(cffi:defcfun ("isl_mat_left_hermite" isl_mat_left_hermite) :pointer
  (M :pointer)
  (neg :int)
  (U :pointer)
  (Q :pointer))

(cffi:defcfun ("isl_mat_lin_to_aff" isl_mat_lin_to_aff) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_inverse_product" isl_mat_inverse_product) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_mat_product" isl_mat_product) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_mat_transpose" isl_mat_transpose) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_right_inverse" isl_mat_right_inverse) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_right_kernel" isl_mat_right_kernel) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_normalize" isl_mat_normalize) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_normalize_row" isl_mat_normalize_row) :pointer
  (mat :pointer)
  (row :int))

(cffi:defcfun ("isl_mat_drop_cols" isl_mat_drop_cols) :pointer
  (mat :pointer)
  (col :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_drop_rows" isl_mat_drop_rows) :pointer
  (mat :pointer)
  (row :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_insert_cols" isl_mat_insert_cols) :pointer
  (mat :pointer)
  (col :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_insert_rows" isl_mat_insert_rows) :pointer
  (mat :pointer)
  (row :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_move_cols" isl_mat_move_cols) :pointer
  (mat :pointer)
  (dst_col :unsigned-int)
  (src_col :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_add_rows" isl_mat_add_rows) :pointer
  (mat :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_insert_zero_cols" isl_mat_insert_zero_cols) :pointer
  (mat :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_add_zero_cols" isl_mat_add_zero_cols) :pointer
  (mat :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_insert_zero_rows" isl_mat_insert_zero_rows) :pointer
  (mat :pointer)
  (row :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_add_zero_rows" isl_mat_add_zero_rows) :pointer
  (mat :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_col_add" isl_mat_col_add) :void
  (mat :pointer)
  (dst_col :int)
  (src_col :int))

(cffi:defcfun ("isl_mat_unimodular_complete" isl_mat_unimodular_complete) :pointer
  (M :pointer)
  (row :int))

(cffi:defcfun ("isl_mat_row_basis" isl_mat_row_basis) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_row_basis_extension" isl_mat_row_basis_extension) :pointer
  (mat1 :pointer)
  (mat2 :pointer))

(cffi:defcfun ("isl_mat_from_row_vec" isl_mat_from_row_vec) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_mat_concat" isl_mat_concat) :pointer
  (top :pointer)
  (bot :pointer))

(cffi:defcfun ("isl_mat_vec_concat" isl_mat_vec_concat) :pointer
  (top :pointer)
  (bot :pointer))

(cffi:defcfun ("isl_mat_is_equal" isl_mat_is_equal) isl_bool
  (mat1 :pointer)
  (mat2 :pointer))

(cffi:defcfun ("isl_mat_has_linearly_independent_rows" isl_mat_has_linearly_independent_rows) isl_bool
  (mat1 :pointer)
  (mat2 :pointer))

(cffi:defcfun ("isl_mat_rank" isl_mat_rank) :int
  (mat :pointer))

(cffi:defcfun ("isl_mat_initial_non_zero_cols" isl_mat_initial_non_zero_cols) :int
  (mat :pointer))

(cffi:defcfun ("isl_mat_print_internal" isl_mat_print_internal) :void
  (mat :pointer)
  (out :pointer)
  (indent :int))

(cffi:defcfun ("isl_mat_dump" isl_mat_dump) :void
  (mat :pointer))

(cffi:defcstruct isl_obj_vtable
  (copy :pointer)
  (add :pointer)
  (print :pointer)
  (free :pointer))

(cffi:defcvar ("isl_obj_none_vtable" isl_obj_none_vtable)
  isl_obj_vtable)

(cffi:defcvar ("isl_obj_int_vtable" isl_obj_int_vtable)
  isl_obj_vtable)

(cffi:defcvar ("isl_obj_val_vtable" isl_obj_val_vtable)
  isl_obj_vtable)

(cffi:defcvar ("isl_obj_set_vtable" isl_obj_set_vtable)
  isl_obj_vtable)

(cffi:defcvar ("isl_obj_union_set_vtable" isl_obj_union_set_vtable)
  isl_obj_vtable)

(cffi:defcvar ("isl_obj_map_vtable" isl_obj_map_vtable)
  isl_obj_vtable)

(cffi:defcvar ("isl_obj_union_map_vtable" isl_obj_union_map_vtable)
  isl_obj_vtable)

(cffi:defcvar ("isl_obj_pw_multi_aff_vtable" isl_obj_pw_multi_aff_vtable)
  isl_obj_vtable)

(cffi:defcvar ("isl_obj_pw_qpolynomial_vtable" isl_obj_pw_qpolynomial_vtable)
  isl_obj_vtable)

(cffi:defcvar ("isl_obj_union_pw_qpolynomial_vtable" isl_obj_union_pw_qpolynomial_vtable)
  isl_obj_vtable)

(cffi:defcvar ("isl_obj_pw_qpolynomial_fold_vtable" isl_obj_pw_qpolynomial_fold_vtable)
  isl_obj_vtable)

(cffi:defcvar ("isl_obj_union_pw_qpolynomial_fold_vtable" isl_obj_union_pw_qpolynomial_fold_vtable)
  isl_obj_vtable)

(cffi:defcvar ("isl_obj_schedule_vtable" isl_obj_schedule_vtable)
  isl_obj_vtable)

(cffi:defcstruct isl_obj
  (type :pointer)
  (v :pointer))

(cffi:defcvar ("isl_options_args" isl_options_args)
  isl_args)

(cffi:defcfun ("isl_options_new_with_defaults" isl_options_new_with_defaults) :pointer)

(cffi:defcfun ("isl_options_free" isl_options_free) :void
  (opt :pointer))

(cffi:defcfun ("isl_options_parse" isl_options_parse) :int
  (opt :pointer)
  (argc :int)
  (argv :pointer)
  (flags :unsigned-int))

(cl:defconstant ISL_BOUND_BERNSTEIN 0)

(cl:defconstant ISL_BOUND_RANGE 1)

(cffi:defcfun ("isl_options_set_bound" isl_options_set_bound) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_bound" isl_options_get_bound) :int
  (ctx :pointer))

(cl:defconstant ISL_ON_ERROR_WARN 0)

(cl:defconstant ISL_ON_ERROR_CONTINUE 1)

(cl:defconstant ISL_ON_ERROR_ABORT 2)

(cffi:defcfun ("isl_options_set_on_error" isl_options_set_on_error) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_on_error" isl_options_get_on_error) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_gbr_only_first" isl_options_set_gbr_only_first) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_gbr_only_first" isl_options_get_gbr_only_first) :int
  (ctx :pointer))

(cl:defconstant ISL_SCHEDULE_ALGORITHM_ISL 0)

(cl:defconstant ISL_SCHEDULE_ALGORITHM_FEAUTRIER 1)

(cffi:defcfun ("isl_options_set_schedule_algorithm" isl_options_set_schedule_algorithm) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_algorithm" isl_options_get_schedule_algorithm) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_pip_symmetry" isl_options_set_pip_symmetry) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_pip_symmetry" isl_options_get_pip_symmetry) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_coalesce_bounded_wrapping" isl_options_set_coalesce_bounded_wrapping) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_coalesce_bounded_wrapping" isl_options_get_coalesce_bounded_wrapping) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_coalesce_preserve_locals" isl_options_set_coalesce_preserve_locals) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_coalesce_preserve_locals" isl_options_get_coalesce_preserve_locals) :int
  (ctx :pointer))

(cffi:defcfun ("isl_point_get_ctx" isl_point_get_ctx) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_point_get_space" isl_point_get_space) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_point_zero" isl_point_zero) :pointer
  (space :pointer))

(cffi:defcfun ("isl_point_copy" isl_point_copy) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_point_free" isl_point_free) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_point_get_coordinate_val" isl_point_get_coordinate_val) :pointer
  (pnt :pointer)
  (type :pointer)
  (pos :int))

(cffi:defcfun ("isl_point_set_coordinate_val" isl_point_set_coordinate_val) :pointer
  (pnt :pointer)
  (type :pointer)
  (pos :int)
  (v :pointer))

(cffi:defcfun ("isl_point_add_ui" isl_point_add_ui) :pointer
  (pnt :pointer)
  (type :pointer)
  (pos :int)
  (val :unsigned-int))

(cffi:defcfun ("isl_point_sub_ui" isl_point_sub_ui) :pointer
  (pnt :pointer)
  (type :pointer)
  (pos :int)
  (val :unsigned-int))

(cffi:defcfun ("isl_point_void" isl_point_void) :pointer
  (space :pointer))

(cffi:defcfun ("isl_point_is_void" isl_point_is_void) isl_bool
  (pnt :pointer))

(cffi:defcfun ("isl_printer_print_point" isl_printer_print_point) :pointer
  (printer :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_point_to_str" isl_point_to_str) :string
  (pnt :pointer))

(cffi:defcfun ("isl_point_dump" isl_point_dump) :void
  (pnt :pointer))

(cffi:defcfun ("isl_qpolynomial_get_ctx" isl_qpolynomial_get_ctx) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_get_domain_space" isl_qpolynomial_get_domain_space) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_get_space" isl_qpolynomial_get_space) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_dim" isl_qpolynomial_dim) :int
  (qp :pointer)
  (type :pointer))

(cffi:defcfun ("isl_qpolynomial_involves_dims" isl_qpolynomial_involves_dims) isl_bool
  (qp :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_get_constant_val" isl_qpolynomial_get_constant_val) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_set_dim_name" isl_qpolynomial_set_dim_name) :pointer
  (qp :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_qpolynomial_zero_on_domain" isl_qpolynomial_zero_on_domain) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_qpolynomial_one_on_domain" isl_qpolynomial_one_on_domain) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_qpolynomial_infty_on_domain" isl_qpolynomial_infty_on_domain) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_qpolynomial_neginfty_on_domain" isl_qpolynomial_neginfty_on_domain) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_qpolynomial_nan_on_domain" isl_qpolynomial_nan_on_domain) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_qpolynomial_val_on_domain" isl_qpolynomial_val_on_domain) :pointer
  (space :pointer)
  (val :pointer))

(cffi:defcfun ("isl_qpolynomial_var_on_domain" isl_qpolynomial_var_on_domain) :pointer
  (domain :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_copy" isl_qpolynomial_copy) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_free" isl_qpolynomial_free) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_plain_is_equal" isl_qpolynomial_plain_is_equal) isl_bool
  (qp1 :pointer)
  (qp2 :pointer))

(cffi:defcfun ("isl_qpolynomial_is_zero" isl_qpolynomial_is_zero) isl_bool
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_is_nan" isl_qpolynomial_is_nan) isl_bool
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_is_infty" isl_qpolynomial_is_infty) isl_bool
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_is_neginfty" isl_qpolynomial_is_neginfty) isl_bool
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_sgn" isl_qpolynomial_sgn) :int
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_neg" isl_qpolynomial_neg) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_add" isl_qpolynomial_add) :pointer
  (qp1 :pointer)
  (qp2 :pointer))

(cffi:defcfun ("isl_qpolynomial_sub" isl_qpolynomial_sub) :pointer
  (qp1 :pointer)
  (qp2 :pointer))

(cffi:defcfun ("isl_qpolynomial_mul" isl_qpolynomial_mul) :pointer
  (qp1 :pointer)
  (qp2 :pointer))

(cffi:defcfun ("isl_qpolynomial_pow" isl_qpolynomial_pow) :pointer
  (qp :pointer)
  (power :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_scale_val" isl_qpolynomial_scale_val) :pointer
  (qp :pointer)
  (v :pointer))

(cffi:defcfun ("isl_qpolynomial_scale_down_val" isl_qpolynomial_scale_down_val) :pointer
  (qp :pointer)
  (v :pointer))

(cffi:defcfun ("isl_qpolynomial_insert_dims" isl_qpolynomial_insert_dims) :pointer
  (qp :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_add_dims" isl_qpolynomial_add_dims) :pointer
  (qp :pointer)
  (type :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_move_dims" isl_qpolynomial_move_dims) :pointer
  (qp :pointer)
  (dst_type :pointer)
  (dst_pos :unsigned-int)
  (src_type :pointer)
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_project_domain_on_params" isl_qpolynomial_project_domain_on_params) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_drop_dims" isl_qpolynomial_drop_dims) :pointer
  (qp :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_substitute" isl_qpolynomial_substitute) :pointer
  (qp :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int)
  (subs :pointer))

(cffi:defcfun ("isl_qpolynomial_as_polynomial_on_domain" isl_qpolynomial_as_polynomial_on_domain) isl_stat
  (qp :pointer)
  (bset :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_qpolynomial_homogenize" isl_qpolynomial_homogenize) :pointer
  (poly :pointer))

(cffi:defcfun ("isl_qpolynomial_align_params" isl_qpolynomial_align_params) :pointer
  (qp :pointer)
  (model :pointer))

(cffi:defcfun ("isl_term_get_ctx" isl_term_get_ctx) :pointer
  (term :pointer))

(cffi:defcfun ("isl_term_copy" isl_term_copy) :pointer
  (term :pointer))

(cffi:defcfun ("isl_term_free" isl_term_free) :pointer
  (term :pointer))

(cffi:defcfun ("isl_term_dim" isl_term_dim) :int
  (term :pointer)
  (type :pointer))

(cffi:defcfun ("isl_term_get_coefficient_val" isl_term_get_coefficient_val) :pointer
  (term :pointer))

(cffi:defcfun ("isl_term_get_exp" isl_term_get_exp) :int
  (term :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_term_get_div" isl_term_get_div) :pointer
  (term :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_foreach_term" isl_qpolynomial_foreach_term) isl_stat
  (qp :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_qpolynomial_eval" isl_qpolynomial_eval) :pointer
  (qp :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_qpolynomial_gist_params" isl_qpolynomial_gist_params) :pointer
  (qp :pointer)
  (context :pointer))

(cffi:defcfun ("isl_qpolynomial_gist" isl_qpolynomial_gist) :pointer
  (qp :pointer)
  (context :pointer))

(cffi:defcfun ("isl_qpolynomial_from_constraint" isl_qpolynomial_from_constraint) :pointer
  (c :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_from_term" isl_qpolynomial_from_term) :pointer
  (term :pointer))

(cffi:defcfun ("isl_qpolynomial_from_aff" isl_qpolynomial_from_aff) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_basic_map_from_qpolynomial" isl_basic_map_from_qpolynomial) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_printer_print_qpolynomial" isl_printer_print_qpolynomial) :pointer
  (p :pointer)
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_print" isl_qpolynomial_print) :void
  (qp :pointer)
  (out :pointer)
  (output_format :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_dump" isl_qpolynomial_dump) :void
  (qp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_get_ctx" isl_pw_qpolynomial_get_ctx) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_involves_nan" isl_pw_qpolynomial_involves_nan) isl_bool
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_plain_is_equal" isl_pw_qpolynomial_plain_is_equal) isl_bool
  (pwqp1 :pointer)
  (pwqp2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_zero" isl_pw_qpolynomial_zero) :pointer
  (space :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_alloc" isl_pw_qpolynomial_alloc) :pointer
  (set :pointer)
  (qp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_from_qpolynomial" isl_pw_qpolynomial_from_qpolynomial) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_copy" isl_pw_qpolynomial_copy) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_free" isl_pw_qpolynomial_free) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_is_zero" isl_pw_qpolynomial_is_zero) isl_bool
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_get_domain_space" isl_pw_qpolynomial_get_domain_space) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_get_space" isl_pw_qpolynomial_get_space) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_reset_domain_space" isl_pw_qpolynomial_reset_domain_space) :pointer
  (pwqp :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_dim" isl_pw_qpolynomial_dim) :int
  (pwqp :pointer)
  (type :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_involves_param_id" isl_pw_qpolynomial_involves_param_id) isl_bool
  (pwqp :pointer)
  (id :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_involves_dims" isl_pw_qpolynomial_involves_dims) isl_bool
  (pwqp :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_has_equal_space" isl_pw_qpolynomial_has_equal_space) isl_bool
  (pwqp1 :pointer)
  (pwqp2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_set_dim_name" isl_pw_qpolynomial_set_dim_name) :pointer
  (pwqp :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_pw_qpolynomial_find_dim_by_name" isl_pw_qpolynomial_find_dim_by_name) :int
  (pwqp :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_pw_qpolynomial_reset_user" isl_pw_qpolynomial_reset_user) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_domain" isl_pw_qpolynomial_domain) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_intersect_domain" isl_pw_qpolynomial_intersect_domain) :pointer
  (pwpq :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_intersect_domain_wrapped_domain" isl_pw_qpolynomial_intersect_domain_wrapped_domain) :pointer
  (pwpq :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_intersect_domain_wrapped_range" isl_pw_qpolynomial_intersect_domain_wrapped_range) :pointer
  (pwpq :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_intersect_params" isl_pw_qpolynomial_intersect_params) :pointer
  (pwpq :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_subtract_domain" isl_pw_qpolynomial_subtract_domain) :pointer
  (pwpq :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_project_domain_on_params" isl_pw_qpolynomial_project_domain_on_params) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_from_range" isl_pw_qpolynomial_from_range) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_drop_dims" isl_pw_qpolynomial_drop_dims) :pointer
  (pwqp :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_split_dims" isl_pw_qpolynomial_split_dims) :pointer
  (pwqp :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_drop_unused_params" isl_pw_qpolynomial_drop_unused_params) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_add" isl_pw_qpolynomial_add) :pointer
  (pwqp1 :pointer)
  (pwqp2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_sub" isl_pw_qpolynomial_sub) :pointer
  (pwqp1 :pointer)
  (pwqp2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_add_disjoint" isl_pw_qpolynomial_add_disjoint) :pointer
  (pwqp1 :pointer)
  (pwqp2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_neg" isl_pw_qpolynomial_neg) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_mul" isl_pw_qpolynomial_mul) :pointer
  (pwqp1 :pointer)
  (pwqp2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_scale_val" isl_pw_qpolynomial_scale_val) :pointer
  (pwqp :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_scale_down_val" isl_pw_qpolynomial_scale_down_val) :pointer
  (pwqp :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_pow" isl_pw_qpolynomial_pow) :pointer
  (pwqp :pointer)
  (exponent :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_insert_dims" isl_pw_qpolynomial_insert_dims) :pointer
  (pwqp :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_add_dims" isl_pw_qpolynomial_add_dims) :pointer
  (pwqp :pointer)
  (type :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_move_dims" isl_pw_qpolynomial_move_dims) :pointer
  (pwqp :pointer)
  (dst_type :pointer)
  (dst_pos :unsigned-int)
  (src_type :pointer)
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_fix_val" isl_pw_qpolynomial_fix_val) :pointer
  (pwqp :pointer)
  (type :pointer)
  (n :unsigned-int)
  (v :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_eval" isl_pw_qpolynomial_eval) :pointer
  (pwqp :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_max" isl_pw_qpolynomial_max) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_min" isl_pw_qpolynomial_min) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_n_piece" isl_pw_qpolynomial_n_piece) :int
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_foreach_piece" isl_pw_qpolynomial_foreach_piece) isl_stat
  (pwqp :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_foreach_lifted_piece" isl_pw_qpolynomial_foreach_lifted_piece) isl_stat
  (pwqp :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_isa_qpolynomial" isl_pw_qpolynomial_isa_qpolynomial) isl_bool
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_as_qpolynomial" isl_pw_qpolynomial_as_qpolynomial) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_from_pw_aff" isl_pw_qpolynomial_from_pw_aff) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_read_from_str" isl_pw_qpolynomial_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_pw_qpolynomial_read_from_file" isl_pw_qpolynomial_read_from_file) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_to_str" isl_pw_qpolynomial_to_str) :string
  (pwqp :pointer))

(cffi:defcfun ("isl_printer_print_pw_qpolynomial" isl_printer_print_pw_qpolynomial) :pointer
  (p :pointer)
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_print" isl_pw_qpolynomial_print) :void
  (pwqp :pointer)
  (out :pointer)
  (output_format :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_dump" isl_pw_qpolynomial_dump) :void
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_coalesce" isl_pw_qpolynomial_coalesce) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_gist" isl_pw_qpolynomial_gist) :pointer
  (pwqp :pointer)
  (context :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_gist_params" isl_pw_qpolynomial_gist_params) :pointer
  (pwqp :pointer)
  (context :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_split_periods" isl_pw_qpolynomial_split_periods) :pointer
  (pwqp :pointer)
  (max_periods :int))

(cffi:defcfun ("isl_basic_set_multiplicative_call" isl_basic_set_multiplicative_call) :pointer
  (bset :pointer)
  (fn :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_get_ctx" isl_qpolynomial_fold_get_ctx) :pointer
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_get_type" isl_qpolynomial_fold_get_type) :pointer
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_empty" isl_qpolynomial_fold_empty) :pointer
  (type :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_alloc" isl_qpolynomial_fold_alloc) :pointer
  (type :pointer)
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_copy" isl_qpolynomial_fold_copy) :pointer
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_free" isl_qpolynomial_fold_free) :pointer
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_is_empty" isl_qpolynomial_fold_is_empty) isl_bool
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_is_nan" isl_qpolynomial_fold_is_nan) isl_bool
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_plain_is_equal" isl_qpolynomial_fold_plain_is_equal) :int
  (fold1 :pointer)
  (fold2 :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_get_domain_space" isl_qpolynomial_fold_get_domain_space) :pointer
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_get_space" isl_qpolynomial_fold_get_space) :pointer
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_fold" isl_qpolynomial_fold_fold) :pointer
  (fold1 :pointer)
  (fold2 :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_scale_val" isl_qpolynomial_fold_scale_val) :pointer
  (fold :pointer)
  (v :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_scale_down_val" isl_qpolynomial_fold_scale_down_val) :pointer
  (fold :pointer)
  (v :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_move_dims" isl_qpolynomial_fold_move_dims) :pointer
  (fold :pointer)
  (dst_type :pointer)
  (dst_pos :unsigned-int)
  (src_type :pointer)
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_fold_substitute" isl_qpolynomial_fold_substitute) :pointer
  (fold :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int)
  (subs :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_fix_val" isl_pw_qpolynomial_fold_fix_val) :pointer
  (pwf :pointer)
  (type :pointer)
  (n :unsigned-int)
  (v :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_eval" isl_qpolynomial_fold_eval) :pointer
  (fold :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_gist_params" isl_qpolynomial_fold_gist_params) :pointer
  (fold :pointer)
  (context :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_gist" isl_qpolynomial_fold_gist) :pointer
  (fold :pointer)
  (context :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_foreach_qpolynomial" isl_qpolynomial_fold_foreach_qpolynomial) isl_stat
  (fold :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_printer_print_qpolynomial_fold" isl_printer_print_qpolynomial_fold) :pointer
  (p :pointer)
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_print" isl_qpolynomial_fold_print) :void
  (fold :pointer)
  (out :pointer)
  (output_format :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_fold_dump" isl_qpolynomial_fold_dump) :void
  (fold :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_get_ctx" isl_pw_qpolynomial_fold_get_ctx) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_get_type" isl_pw_qpolynomial_fold_get_type) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_involves_nan" isl_pw_qpolynomial_fold_involves_nan) isl_bool
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_plain_is_equal" isl_pw_qpolynomial_fold_plain_is_equal) isl_bool
  (pwf1 :pointer)
  (pwf2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_from_pw_qpolynomial" isl_pw_qpolynomial_fold_from_pw_qpolynomial) :pointer
  (type :pointer)
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_alloc" isl_pw_qpolynomial_fold_alloc) :pointer
  (type :pointer)
  (set :pointer)
  (fold :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_from_qpolynomial_fold" isl_pw_qpolynomial_fold_from_qpolynomial_fold) :pointer
  (fold :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_copy" isl_pw_qpolynomial_fold_copy) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_free" isl_pw_qpolynomial_fold_free) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_is_zero" isl_pw_qpolynomial_fold_is_zero) isl_bool
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_get_domain_space" isl_pw_qpolynomial_fold_get_domain_space) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_get_space" isl_pw_qpolynomial_fold_get_space) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_reset_space" isl_pw_qpolynomial_fold_reset_space) :pointer
  (pwf :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_dim" isl_pw_qpolynomial_fold_dim) :int
  (pwf :pointer)
  (type :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_involves_param_id" isl_pw_qpolynomial_fold_involves_param_id) isl_bool
  (pwf :pointer)
  (id :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_has_equal_space" isl_pw_qpolynomial_fold_has_equal_space) isl_bool
  (pwf1 :pointer)
  (pwf2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_size" isl_pw_qpolynomial_fold_size) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_zero" isl_pw_qpolynomial_fold_zero) :pointer
  (space :pointer)
  (type :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_set_dim_name" isl_pw_qpolynomial_fold_set_dim_name) :pointer
  (pwf :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_pw_qpolynomial_fold_find_dim_by_name" isl_pw_qpolynomial_fold_find_dim_by_name) :int
  (pwf :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_pw_qpolynomial_fold_reset_user" isl_pw_qpolynomial_fold_reset_user) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_domain" isl_pw_qpolynomial_fold_domain) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_intersect_domain" isl_pw_qpolynomial_fold_intersect_domain) :pointer
  (pwf :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_intersect_domain_wrapped_domain" isl_pw_qpolynomial_fold_intersect_domain_wrapped_domain) :pointer
  (pwf :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_intersect_domain_wrapped_range" isl_pw_qpolynomial_fold_intersect_domain_wrapped_range) :pointer
  (pwf :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_intersect_params" isl_pw_qpolynomial_fold_intersect_params) :pointer
  (pwf :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_subtract_domain" isl_pw_qpolynomial_fold_subtract_domain) :pointer
  (pwf :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_add" isl_pw_qpolynomial_fold_add) :pointer
  (pwf1 :pointer)
  (pwf2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_fold" isl_pw_qpolynomial_fold_fold) :pointer
  (pwf1 :pointer)
  (pwf2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_add_disjoint" isl_pw_qpolynomial_fold_add_disjoint) :pointer
  (pwf1 :pointer)
  (pwf2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_scale_val" isl_pw_qpolynomial_fold_scale_val) :pointer
  (pwf :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_scale_down_val" isl_pw_qpolynomial_fold_scale_down_val) :pointer
  (pwf :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_project_domain_on_params" isl_pw_qpolynomial_fold_project_domain_on_params) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_from_range" isl_pw_qpolynomial_fold_from_range) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_drop_dims" isl_pw_qpolynomial_fold_drop_dims) :pointer
  (pwf :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_move_dims" isl_pw_qpolynomial_fold_move_dims) :pointer
  (pwf :pointer)
  (dst_type :pointer)
  (dst_pos :unsigned-int)
  (src_type :pointer)
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_drop_unused_params" isl_pw_qpolynomial_fold_drop_unused_params) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_eval" isl_pw_qpolynomial_fold_eval) :pointer
  (pwf :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_n_piece" isl_pw_qpolynomial_fold_n_piece) :int
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_foreach_piece" isl_pw_qpolynomial_fold_foreach_piece) isl_stat
  (pwf :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_foreach_lifted_piece" isl_pw_qpolynomial_fold_foreach_lifted_piece) isl_stat
  (pwf :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_isa_qpolynomial_fold" isl_pw_qpolynomial_fold_isa_qpolynomial_fold) isl_bool
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_as_qpolynomial_fold" isl_pw_qpolynomial_fold_as_qpolynomial_fold) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_printer_print_pw_qpolynomial_fold" isl_printer_print_pw_qpolynomial_fold) :pointer
  (p :pointer)
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_print" isl_pw_qpolynomial_fold_print) :void
  (pwf :pointer)
  (out :pointer)
  (output_format :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_dump" isl_pw_qpolynomial_fold_dump) :void
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_coalesce" isl_pw_qpolynomial_fold_coalesce) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_gist" isl_pw_qpolynomial_fold_gist) :pointer
  (pwf :pointer)
  (context :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_gist_params" isl_pw_qpolynomial_fold_gist_params) :pointer
  (pwf :pointer)
  (context :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_max" isl_pw_qpolynomial_fold_max) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_min" isl_pw_qpolynomial_fold_min) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_bound" isl_pw_qpolynomial_bound) :pointer
  (pwqp :pointer)
  (type :pointer)
  (tight :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_bound" isl_pw_qpolynomial_fold_bound) :pointer
  (pwf :pointer)
  (tight :pointer))

(cffi:defcfun ("isl_set_apply_pw_qpolynomial_fold" isl_set_apply_pw_qpolynomial_fold) :pointer
  (set :pointer)
  (pwf :pointer)
  (tight :pointer))

(cffi:defcfun ("isl_map_apply_pw_qpolynomial_fold" isl_map_apply_pw_qpolynomial_fold) :pointer
  (map :pointer)
  (pwf :pointer)
  (tight :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_to_polynomial" isl_pw_qpolynomial_to_polynomial) :pointer
  (pwqp :pointer)
  (sign :int))

(cffi:defcfun ("isl_union_pw_qpolynomial_get_ctx" isl_union_pw_qpolynomial_get_ctx) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_dim" isl_union_pw_qpolynomial_dim) :int
  (upwqp :pointer)
  (type :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_involves_nan" isl_union_pw_qpolynomial_involves_nan) isl_bool
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_plain_is_equal" isl_union_pw_qpolynomial_plain_is_equal) isl_bool
  (upwqp1 :pointer)
  (upwqp2 :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_from_pw_qpolynomial" isl_union_pw_qpolynomial_from_pw_qpolynomial) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_zero_ctx" isl_union_pw_qpolynomial_zero_ctx) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_zero_space" isl_union_pw_qpolynomial_zero_space) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_zero" isl_union_pw_qpolynomial_zero) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_add_pw_qpolynomial" isl_union_pw_qpolynomial_add_pw_qpolynomial) :pointer
  (upwqp :pointer)
  (pwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_copy" isl_union_pw_qpolynomial_copy) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_free" isl_union_pw_qpolynomial_free) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_read_from_str" isl_union_pw_qpolynomial_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_union_pw_qpolynomial_to_str" isl_union_pw_qpolynomial_to_str) :string
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_neg" isl_union_pw_qpolynomial_neg) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_add" isl_union_pw_qpolynomial_add) :pointer
  (upwqp1 :pointer)
  (upwqp2 :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_sub" isl_union_pw_qpolynomial_sub) :pointer
  (upwqp1 :pointer)
  (upwqp2 :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_mul" isl_union_pw_qpolynomial_mul) :pointer
  (upwqp1 :pointer)
  (upwqp2 :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_scale_val" isl_union_pw_qpolynomial_scale_val) :pointer
  (upwqp :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_scale_down_val" isl_union_pw_qpolynomial_scale_down_val) :pointer
  (upwqp :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_domain" isl_union_pw_qpolynomial_domain) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_intersect_domain" isl_union_pw_qpolynomial_intersect_domain) :pointer
  (upwpq :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_intersect_domain_wrapped_domain" isl_union_pw_qpolynomial_intersect_domain_wrapped_domain) :pointer
  (upwpq :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_intersect_domain_wrapped_range" isl_union_pw_qpolynomial_intersect_domain_wrapped_range) :pointer
  (upwpq :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_intersect_params" isl_union_pw_qpolynomial_intersect_params) :pointer
  (upwpq :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_subtract_domain" isl_union_pw_qpolynomial_subtract_domain) :pointer
  (upwpq :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_get_space" isl_union_pw_qpolynomial_get_space) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_get_pw_qpolynomial_list" isl_union_pw_qpolynomial_get_pw_qpolynomial_list) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_set_dim_name" isl_union_pw_qpolynomial_set_dim_name) :pointer
  (upwqp :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_union_pw_qpolynomial_find_dim_by_name" isl_union_pw_qpolynomial_find_dim_by_name) :int
  (upwqp :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_union_pw_qpolynomial_drop_dims" isl_union_pw_qpolynomial_drop_dims) :pointer
  (upwqp :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_pw_qpolynomial_reset_user" isl_union_pw_qpolynomial_reset_user) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_eval" isl_union_pw_qpolynomial_eval) :pointer
  (upwqp :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_coalesce" isl_union_pw_qpolynomial_coalesce) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_gist" isl_union_pw_qpolynomial_gist) :pointer
  (upwqp :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_gist_params" isl_union_pw_qpolynomial_gist_params) :pointer
  (upwqp :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_align_params" isl_union_pw_qpolynomial_align_params) :pointer
  (upwqp :pointer)
  (model :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_n_pw_qpolynomial" isl_union_pw_qpolynomial_n_pw_qpolynomial) :int
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_foreach_pw_qpolynomial" isl_union_pw_qpolynomial_foreach_pw_qpolynomial) isl_stat
  (upwqp :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_extract_pw_qpolynomial" isl_union_pw_qpolynomial_extract_pw_qpolynomial) :pointer
  (upwqp :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_printer_print_union_pw_qpolynomial" isl_printer_print_union_pw_qpolynomial) :pointer
  (p :pointer)
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_get_ctx" isl_union_pw_qpolynomial_fold_get_ctx) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_dim" isl_union_pw_qpolynomial_fold_dim) :int
  (upwf :pointer)
  (type :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_involves_nan" isl_union_pw_qpolynomial_fold_involves_nan) isl_bool
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_plain_is_equal" isl_union_pw_qpolynomial_fold_plain_is_equal) isl_bool
  (upwf1 :pointer)
  (upwf2 :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_from_pw_qpolynomial_fold" isl_union_pw_qpolynomial_fold_from_pw_qpolynomial_fold) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_zero_ctx" isl_union_pw_qpolynomial_fold_zero_ctx) :pointer
  (ctx :pointer)
  (type :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_zero_space" isl_union_pw_qpolynomial_fold_zero_space) :pointer
  (space :pointer)
  (type :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_zero" isl_union_pw_qpolynomial_fold_zero) :pointer
  (space :pointer)
  (type :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_fold_pw_qpolynomial_fold" isl_union_pw_qpolynomial_fold_fold_pw_qpolynomial_fold) :pointer
  (upwqp :pointer)
  (pwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_free" isl_union_pw_qpolynomial_fold_free) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_copy" isl_union_pw_qpolynomial_fold_copy) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_fold" isl_union_pw_qpolynomial_fold_fold) :pointer
  (upwf1 :pointer)
  (upwf2 :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_add_union_pw_qpolynomial" isl_union_pw_qpolynomial_fold_add_union_pw_qpolynomial) :pointer
  (upwf :pointer)
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_scale_val" isl_union_pw_qpolynomial_fold_scale_val) :pointer
  (upwf :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_scale_down_val" isl_union_pw_qpolynomial_fold_scale_down_val) :pointer
  (upwf :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_domain" isl_union_pw_qpolynomial_fold_domain) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_intersect_domain" isl_union_pw_qpolynomial_fold_intersect_domain) :pointer
  (upwf :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_intersect_domain_wrapped_domain" isl_union_pw_qpolynomial_fold_intersect_domain_wrapped_domain) :pointer
  (upwf :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_intersect_domain_wrapped_range" isl_union_pw_qpolynomial_fold_intersect_domain_wrapped_range) :pointer
  (upwf :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_intersect_params" isl_union_pw_qpolynomial_fold_intersect_params) :pointer
  (upwf :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_subtract_domain" isl_union_pw_qpolynomial_fold_subtract_domain) :pointer
  (upwf :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_get_type" isl_union_pw_qpolynomial_fold_get_type) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_get_space" isl_union_pw_qpolynomial_fold_get_space) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_get_pw_qpolynomial_fold_list" isl_union_pw_qpolynomial_fold_get_pw_qpolynomial_fold_list) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_set_dim_name" isl_union_pw_qpolynomial_fold_set_dim_name) :pointer
  (upwf :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_find_dim_by_name" isl_union_pw_qpolynomial_fold_find_dim_by_name) :int
  (upwf :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_drop_dims" isl_union_pw_qpolynomial_fold_drop_dims) :pointer
  (upwf :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_reset_user" isl_union_pw_qpolynomial_fold_reset_user) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_eval" isl_union_pw_qpolynomial_fold_eval) :pointer
  (upwf :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_coalesce" isl_union_pw_qpolynomial_fold_coalesce) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_gist" isl_union_pw_qpolynomial_fold_gist) :pointer
  (upwf :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_gist_params" isl_union_pw_qpolynomial_fold_gist_params) :pointer
  (upwf :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_align_params" isl_union_pw_qpolynomial_fold_align_params) :pointer
  (upwf :pointer)
  (model :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_n_pw_qpolynomial_fold" isl_union_pw_qpolynomial_fold_n_pw_qpolynomial_fold) :int
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_foreach_pw_qpolynomial_fold" isl_union_pw_qpolynomial_fold_foreach_pw_qpolynomial_fold) isl_stat
  (upwf :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_extract_pw_qpolynomial_fold" isl_union_pw_qpolynomial_fold_extract_pw_qpolynomial_fold) :pointer
  (upwf :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_printer_print_union_pw_qpolynomial_fold" isl_printer_print_union_pw_qpolynomial_fold) :pointer
  (p :pointer)
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_bound" isl_union_pw_qpolynomial_bound) :pointer
  (upwqp :pointer)
  (type :pointer)
  (tight :pointer))

(cffi:defcfun ("isl_union_set_apply_union_pw_qpolynomial_fold" isl_union_set_apply_union_pw_qpolynomial_fold) :pointer
  (uset :pointer)
  (upwf :pointer)
  (tight :pointer))

(cffi:defcfun ("isl_union_map_apply_union_pw_qpolynomial_fold" isl_union_map_apply_union_pw_qpolynomial_fold) :pointer
  (umap :pointer)
  (upwf :pointer)
  (tight :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_to_polynomial" isl_union_pw_qpolynomial_to_polynomial) :pointer
  (upwqp :pointer)
  (sign :int))

(cffi:defcfun ("isl_pw_qpolynomial_list_get_ctx" isl_pw_qpolynomial_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_from_pw_qpolynomial" isl_pw_qpolynomial_list_from_pw_qpolynomial) :pointer
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_alloc" isl_pw_qpolynomial_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_pw_qpolynomial_list_copy" isl_pw_qpolynomial_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_free" isl_pw_qpolynomial_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_add" isl_pw_qpolynomial_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_insert" isl_pw_qpolynomial_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_drop" isl_pw_qpolynomial_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_list_clear" isl_pw_qpolynomial_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_swap" isl_pw_qpolynomial_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_list_reverse" isl_pw_qpolynomial_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_concat" isl_pw_qpolynomial_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_size" isl_pw_qpolynomial_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_n_pw_qpolynomial" isl_pw_qpolynomial_list_n_pw_qpolynomial) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_get_at" isl_pw_qpolynomial_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_qpolynomial_list_get_pw_qpolynomial" isl_pw_qpolynomial_list_get_pw_qpolynomial) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_qpolynomial_list_set_pw_qpolynomial" isl_pw_qpolynomial_list_set_pw_qpolynomial) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_foreach" isl_pw_qpolynomial_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_map" isl_pw_qpolynomial_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_sort" isl_pw_qpolynomial_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_foreach_scc" isl_pw_qpolynomial_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_to_str" isl_pw_qpolynomial_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_pw_qpolynomial_list" isl_printer_print_pw_qpolynomial_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_dump" isl_pw_qpolynomial_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_get_ctx" isl_pw_qpolynomial_fold_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_from_pw_qpolynomial_fold" isl_pw_qpolynomial_fold_list_from_pw_qpolynomial_fold) :pointer
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_alloc" isl_pw_qpolynomial_fold_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_copy" isl_pw_qpolynomial_fold_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_free" isl_pw_qpolynomial_fold_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_add" isl_pw_qpolynomial_fold_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_insert" isl_pw_qpolynomial_fold_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_drop" isl_pw_qpolynomial_fold_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_clear" isl_pw_qpolynomial_fold_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_swap" isl_pw_qpolynomial_fold_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_reverse" isl_pw_qpolynomial_fold_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_concat" isl_pw_qpolynomial_fold_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_size" isl_pw_qpolynomial_fold_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_n_pw_qpolynomial_fold" isl_pw_qpolynomial_fold_list_n_pw_qpolynomial_fold) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_get_at" isl_pw_qpolynomial_fold_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_get_pw_qpolynomial_fold" isl_pw_qpolynomial_fold_list_get_pw_qpolynomial_fold) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_set_pw_qpolynomial_fold" isl_pw_qpolynomial_fold_list_set_pw_qpolynomial_fold) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_foreach" isl_pw_qpolynomial_fold_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_map" isl_pw_qpolynomial_fold_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_sort" isl_pw_qpolynomial_fold_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_foreach_scc" isl_pw_qpolynomial_fold_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_to_str" isl_pw_qpolynomial_fold_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_pw_qpolynomial_fold_list" isl_printer_print_pw_qpolynomial_fold_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_dump" isl_pw_qpolynomial_fold_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_printer_to_file" isl_printer_to_file) :pointer
  (ctx :pointer)
  (file :pointer))

(cffi:defcfun ("isl_printer_to_str" isl_printer_to_str) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_printer_free" isl_printer_free) :pointer
  (printer :pointer))

(cffi:defcfun ("isl_printer_get_ctx" isl_printer_get_ctx) :pointer
  (printer :pointer))

(cffi:defcfun ("isl_printer_get_file" isl_printer_get_file) :pointer
  (printer :pointer))

(cffi:defcfun ("isl_printer_get_str" isl_printer_get_str) :string
  (printer :pointer))

(cffi:defcfun ("isl_printer_set_indent" isl_printer_set_indent) :pointer
  (p :pointer)
  (indent :int))

(cffi:defcfun ("isl_printer_indent" isl_printer_indent) :pointer
  (p :pointer)
  (indent :int))

(cl:defconstant ISL_FORMAT_ISL 0)

(cl:defconstant ISL_FORMAT_POLYLIB 1)

(cl:defconstant ISL_FORMAT_POLYLIB_CONSTRAINTS 2)

(cl:defconstant ISL_FORMAT_OMEGA 3)

(cl:defconstant ISL_FORMAT_C 4)

(cl:defconstant ISL_FORMAT_LATEX 5)

(cl:defconstant ISL_FORMAT_EXT_POLYLIB 6)

(cffi:defcfun ("isl_printer_set_output_format" isl_printer_set_output_format) :pointer
  (p :pointer)
  (output_format :int))

(cffi:defcfun ("isl_printer_get_output_format" isl_printer_get_output_format) :int
  (p :pointer))

(cl:defconstant ISL_YAML_STYLE_BLOCK 0)

(cl:defconstant ISL_YAML_STYLE_FLOW 1)

(cffi:defcfun ("isl_printer_set_yaml_style" isl_printer_set_yaml_style) :pointer
  (p :pointer)
  (yaml_style :int))

(cffi:defcfun ("isl_printer_get_yaml_style" isl_printer_get_yaml_style) :int
  (p :pointer))

(cffi:defcfun ("isl_printer_set_indent_prefix" isl_printer_set_indent_prefix) :pointer
  (p :pointer)
  (prefix :string))

(cffi:defcfun ("isl_printer_set_prefix" isl_printer_set_prefix) :pointer
  (p :pointer)
  (prefix :string))

(cffi:defcfun ("isl_printer_set_suffix" isl_printer_set_suffix) :pointer
  (p :pointer)
  (suffix :string))

(cffi:defcfun ("isl_printer_set_isl_int_width" isl_printer_set_isl_int_width) :pointer
  (p :pointer)
  (width :int))

(cffi:defcfun ("isl_printer_has_note" isl_printer_has_note) isl_bool
  (p :pointer)
  (id :pointer))

(cffi:defcfun ("isl_printer_get_note" isl_printer_get_note) :pointer
  (p :pointer)
  (id :pointer))

(cffi:defcfun ("isl_printer_set_note" isl_printer_set_note) :pointer
  (p :pointer)
  (id :pointer)
  (note :pointer))

(cffi:defcfun ("isl_printer_start_line" isl_printer_start_line) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_end_line" isl_printer_end_line) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_print_double" isl_printer_print_double) :pointer
  (p :pointer)
  (d :double))

(cffi:defcfun ("isl_printer_print_int" isl_printer_print_int) :pointer
  (p :pointer)
  (i :int))

(cffi:defcfun ("isl_printer_print_str" isl_printer_print_str) :pointer
  (p :pointer)
  (s :string))

(cffi:defcfun ("isl_printer_yaml_start_mapping" isl_printer_yaml_start_mapping) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_yaml_end_mapping" isl_printer_yaml_end_mapping) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_yaml_start_sequence" isl_printer_yaml_start_sequence) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_yaml_end_sequence" isl_printer_yaml_end_sequence) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_yaml_next" isl_printer_yaml_next) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_flush" isl_printer_flush) :pointer
  (p :pointer))

(cffi:defcfun ("isl_options_set_schedule_max_coefficient" isl_options_set_schedule_max_coefficient) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_max_coefficient" isl_options_get_schedule_max_coefficient) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_max_constant_term" isl_options_set_schedule_max_constant_term) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_max_constant_term" isl_options_get_schedule_max_constant_term) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_maximize_band_depth" isl_options_set_schedule_maximize_band_depth) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_maximize_band_depth" isl_options_get_schedule_maximize_band_depth) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_maximize_coincidence" isl_options_set_schedule_maximize_coincidence) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_maximize_coincidence" isl_options_get_schedule_maximize_coincidence) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_outer_coincidence" isl_options_set_schedule_outer_coincidence) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_outer_coincidence" isl_options_get_schedule_outer_coincidence) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_split_scaled" isl_options_set_schedule_split_scaled) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_split_scaled" isl_options_get_schedule_split_scaled) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_treat_coalescing" isl_options_set_schedule_treat_coalescing) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_treat_coalescing" isl_options_get_schedule_treat_coalescing) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_separate_components" isl_options_set_schedule_separate_components) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_separate_components" isl_options_get_schedule_separate_components) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_serialize_sccs" isl_options_set_schedule_serialize_sccs) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_serialize_sccs" isl_options_get_schedule_serialize_sccs) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_whole_component" isl_options_set_schedule_whole_component) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_whole_component" isl_options_get_schedule_whole_component) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_carry_self_first" isl_options_set_schedule_carry_self_first) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_carry_self_first" isl_options_get_schedule_carry_self_first) :int
  (ctx :pointer))

(cffi:defcfun ("isl_schedule_constraints_copy" isl_schedule_constraints_copy) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_on_domain" isl_schedule_constraints_on_domain) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_schedule_constraints_set_context" isl_schedule_constraints_set_context) :pointer
  (sc :pointer)
  (context :pointer))

(cffi:defcfun ("isl_schedule_constraints_set_validity" isl_schedule_constraints_set_validity) :pointer
  (sc :pointer)
  (validity :pointer))

(cffi:defcfun ("isl_schedule_constraints_set_coincidence" isl_schedule_constraints_set_coincidence) :pointer
  (sc :pointer)
  (coincidence :pointer))

(cffi:defcfun ("isl_schedule_constraints_set_proximity" isl_schedule_constraints_set_proximity) :pointer
  (sc :pointer)
  (proximity :pointer))

(cffi:defcfun ("isl_schedule_constraints_set_conditional_validity" isl_schedule_constraints_set_conditional_validity) :pointer
  (sc :pointer)
  (condition :pointer)
  (validity :pointer))

(cffi:defcfun ("isl_schedule_constraints_free" isl_schedule_constraints_free) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_ctx" isl_schedule_constraints_get_ctx) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_domain" isl_schedule_constraints_get_domain) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_context" isl_schedule_constraints_get_context) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_validity" isl_schedule_constraints_get_validity) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_coincidence" isl_schedule_constraints_get_coincidence) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_proximity" isl_schedule_constraints_get_proximity) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_conditional_validity" isl_schedule_constraints_get_conditional_validity) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_conditional_validity_condition" isl_schedule_constraints_get_conditional_validity_condition) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_apply" isl_schedule_constraints_apply) :pointer
  (sc :pointer)
  (umap :pointer))

(cffi:defcfun ("isl_schedule_constraints_read_from_str" isl_schedule_constraints_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_schedule_constraints_read_from_file" isl_schedule_constraints_read_from_file) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_printer_print_schedule_constraints" isl_printer_print_schedule_constraints) :pointer
  (p :pointer)
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_dump" isl_schedule_constraints_dump) :void
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_to_str" isl_schedule_constraints_to_str) :string
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_compute_schedule" isl_schedule_constraints_compute_schedule) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_union_set_compute_schedule" isl_union_set_compute_schedule) :pointer
  (domain :pointer)
  (validity :pointer)
  (proximity :pointer))

(cffi:defcfun ("isl_schedule_empty" isl_schedule_empty) :pointer
  (space :pointer))

(cffi:defcfun ("isl_schedule_from_domain" isl_schedule_from_domain) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_schedule_copy" isl_schedule_copy) :pointer
  (sched :pointer))

(cffi:defcfun ("isl_schedule_free" isl_schedule_free) :pointer
  (sched :pointer))

(cffi:defcfun ("isl_schedule_get_map" isl_schedule_get_map) :pointer
  (sched :pointer))

(cffi:defcfun ("isl_schedule_get_ctx" isl_schedule_get_ctx) :pointer
  (sched :pointer))

(cffi:defcfun ("isl_schedule_plain_is_equal" isl_schedule_plain_is_equal) isl_bool
  (schedule1 :pointer)
  (schedule2 :pointer))

(cffi:defcfun ("isl_schedule_get_root" isl_schedule_get_root) :pointer
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_get_domain" isl_schedule_get_domain) :pointer
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_foreach_schedule_node_top_down" isl_schedule_foreach_schedule_node_top_down) isl_stat
  (sched :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_schedule_map_schedule_node_bottom_up" isl_schedule_map_schedule_node_bottom_up) :pointer
  (schedule :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_schedule_insert_context" isl_schedule_insert_context) :pointer
  (schedule :pointer)
  (context :pointer))

(cffi:defcfun ("isl_schedule_insert_partial_schedule" isl_schedule_insert_partial_schedule) :pointer
  (schedule :pointer)
  (partial :pointer))

(cffi:defcfun ("isl_schedule_insert_guard" isl_schedule_insert_guard) :pointer
  (schedule :pointer)
  (guard :pointer))

(cffi:defcfun ("isl_schedule_sequence" isl_schedule_sequence) :pointer
  (schedule1 :pointer)
  (schedule2 :pointer))

(cffi:defcfun ("isl_schedule_set" isl_schedule_set) :pointer
  (schedule1 :pointer)
  (schedule2 :pointer))

(cffi:defcfun ("isl_schedule_intersect_domain" isl_schedule_intersect_domain) :pointer
  (schedule :pointer)
  (domain :pointer))

(cffi:defcfun ("isl_schedule_gist_domain_params" isl_schedule_gist_domain_params) :pointer
  (schedule :pointer)
  (context :pointer))

(cffi:defcfun ("isl_schedule_reset_user" isl_schedule_reset_user) :pointer
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_align_params" isl_schedule_align_params) :pointer
  (schedule :pointer)
  (space :pointer))

(cffi:defcfun ("isl_schedule_pullback_union_pw_multi_aff" isl_schedule_pullback_union_pw_multi_aff) :pointer
  (schedule :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_schedule_expand" isl_schedule_expand) :pointer
  (schedule :pointer)
  (contraction :pointer)
  (expansion :pointer))

(cffi:defcfun ("isl_schedule_read_from_file" isl_schedule_read_from_file) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_schedule_read_from_str" isl_schedule_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_printer_print_schedule" isl_printer_print_schedule) :pointer
  (p :pointer)
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_dump" isl_schedule_dump) :void
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_to_str" isl_schedule_to_str) :string
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_node_from_domain" isl_schedule_node_from_domain) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_schedule_node_from_extension" isl_schedule_node_from_extension) :pointer
  (extension :pointer))

(cffi:defcfun ("isl_schedule_node_copy" isl_schedule_node_copy) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_free" isl_schedule_node_free) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_is_equal" isl_schedule_node_is_equal) isl_bool
  (node1 :pointer)
  (node2 :pointer))

(cffi:defcfun ("isl_schedule_node_get_ctx" isl_schedule_node_get_ctx) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_type" isl_schedule_node_get_type) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_parent_type" isl_schedule_node_get_parent_type) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_schedule" isl_schedule_node_get_schedule) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_foreach_descendant_top_down" isl_schedule_node_foreach_descendant_top_down) isl_stat
  (node :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_schedule_node_every_descendant" isl_schedule_node_every_descendant) isl_bool
  (node :pointer)
  (test :pointer)
  (user :pointer))

(cffi:defcfun ("isl_schedule_node_foreach_ancestor_top_down" isl_schedule_node_foreach_ancestor_top_down) isl_stat
  (node :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_schedule_node_map_descendant_bottom_up" isl_schedule_node_map_descendant_bottom_up) :pointer
  (node :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_schedule_node_get_tree_depth" isl_schedule_node_get_tree_depth) :int
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_has_parent" isl_schedule_node_has_parent) isl_bool
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_has_children" isl_schedule_node_has_children) isl_bool
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_has_previous_sibling" isl_schedule_node_has_previous_sibling) isl_bool
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_has_next_sibling" isl_schedule_node_has_next_sibling) isl_bool
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_n_children" isl_schedule_node_n_children) :int
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_child_position" isl_schedule_node_get_child_position) :int
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_ancestor_child_position" isl_schedule_node_get_ancestor_child_position) :int
  (node :pointer)
  (ancestor :pointer))

(cffi:defcfun ("isl_schedule_node_get_child" isl_schedule_node_get_child) :pointer
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_get_shared_ancestor" isl_schedule_node_get_shared_ancestor) :pointer
  (node1 :pointer)
  (node2 :pointer))

(cffi:defcfun ("isl_schedule_node_root" isl_schedule_node_root) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_parent" isl_schedule_node_parent) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_ancestor" isl_schedule_node_ancestor) :pointer
  (node :pointer)
  (generation :int))

(cffi:defcfun ("isl_schedule_node_child" isl_schedule_node_child) :pointer
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_first_child" isl_schedule_node_first_child) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_previous_sibling" isl_schedule_node_previous_sibling) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_next_sibling" isl_schedule_node_next_sibling) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_is_subtree_anchored" isl_schedule_node_is_subtree_anchored) isl_bool
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_group" isl_schedule_node_group) :pointer
  (node :pointer)
  (group_id :pointer))

(cffi:defcfun ("isl_schedule_node_sequence_splice_child" isl_schedule_node_sequence_splice_child) :pointer
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_band_get_space" isl_schedule_node_band_get_space) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_get_partial_schedule" isl_schedule_node_band_get_partial_schedule) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_get_partial_schedule_union_map" isl_schedule_node_band_get_partial_schedule_union_map) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_member_get_ast_loop_type" isl_schedule_node_band_member_get_ast_loop_type) isl_ast_loop_type
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_band_member_set_ast_loop_type" isl_schedule_node_band_member_set_ast_loop_type) :pointer
  (node :pointer)
  (pos :int)
  (type isl_ast_loop_type))

(cffi:defcfun ("isl_schedule_node_band_member_get_isolate_ast_loop_type" isl_schedule_node_band_member_get_isolate_ast_loop_type) isl_ast_loop_type
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_band_member_set_isolate_ast_loop_type" isl_schedule_node_band_member_set_isolate_ast_loop_type) :pointer
  (node :pointer)
  (pos :int)
  (type isl_ast_loop_type))

(cffi:defcfun ("isl_schedule_node_band_get_ast_build_options" isl_schedule_node_band_get_ast_build_options) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_set_ast_build_options" isl_schedule_node_band_set_ast_build_options) :pointer
  (node :pointer)
  (options :pointer))

(cffi:defcfun ("isl_schedule_node_band_get_ast_isolate_option" isl_schedule_node_band_get_ast_isolate_option) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_n_member" isl_schedule_node_band_n_member) :int
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_member_get_coincident" isl_schedule_node_band_member_get_coincident) isl_bool
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_band_member_set_coincident" isl_schedule_node_band_member_set_coincident) :pointer
  (node :pointer)
  (pos :int)
  (coincident :int))

(cffi:defcfun ("isl_schedule_node_band_get_permutable" isl_schedule_node_band_get_permutable) isl_bool
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_set_permutable" isl_schedule_node_band_set_permutable) :pointer
  (node :pointer)
  (permutable :int))

(cffi:defcfun ("isl_options_set_tile_scale_tile_loops" isl_options_set_tile_scale_tile_loops) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_tile_scale_tile_loops" isl_options_get_tile_scale_tile_loops) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_tile_shift_point_loops" isl_options_set_tile_shift_point_loops) isl_stat
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_tile_shift_point_loops" isl_options_get_tile_shift_point_loops) :int
  (ctx :pointer))

(cffi:defcfun ("isl_schedule_node_band_scale" isl_schedule_node_band_scale) :pointer
  (node :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_schedule_node_band_scale_down" isl_schedule_node_band_scale_down) :pointer
  (node :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_schedule_node_band_mod" isl_schedule_node_band_mod) :pointer
  (node :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_schedule_node_band_shift" isl_schedule_node_band_shift) :pointer
  (node :pointer)
  (shift :pointer))

(cffi:defcfun ("isl_schedule_node_band_tile" isl_schedule_node_band_tile) :pointer
  (node :pointer)
  (sizes :pointer))

(cffi:defcfun ("isl_schedule_node_band_sink" isl_schedule_node_band_sink) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_split" isl_schedule_node_band_split) :pointer
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_context_get_context" isl_schedule_node_context_get_context) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_domain_get_domain" isl_schedule_node_domain_get_domain) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_expansion_get_expansion" isl_schedule_node_expansion_get_expansion) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_expansion_get_contraction" isl_schedule_node_expansion_get_contraction) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_extension_get_extension" isl_schedule_node_extension_get_extension) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_filter_get_filter" isl_schedule_node_filter_get_filter) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_guard_get_guard" isl_schedule_node_guard_get_guard) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_mark_get_id" isl_schedule_node_mark_get_id) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_schedule_depth" isl_schedule_node_get_schedule_depth) :int
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_domain" isl_schedule_node_get_domain) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_universe_domain" isl_schedule_node_get_universe_domain) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_prefix_schedule_multi_union_pw_aff" isl_schedule_node_get_prefix_schedule_multi_union_pw_aff) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_prefix_schedule_union_pw_multi_aff" isl_schedule_node_get_prefix_schedule_union_pw_multi_aff) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_prefix_schedule_union_map" isl_schedule_node_get_prefix_schedule_union_map) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_prefix_schedule_relation" isl_schedule_node_get_prefix_schedule_relation) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_subtree_schedule_union_map" isl_schedule_node_get_subtree_schedule_union_map) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_subtree_expansion" isl_schedule_node_get_subtree_expansion) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_subtree_contraction" isl_schedule_node_get_subtree_contraction) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_insert_context" isl_schedule_node_insert_context) :pointer
  (node :pointer)
  (context :pointer))

(cffi:defcfun ("isl_schedule_node_insert_partial_schedule" isl_schedule_node_insert_partial_schedule) :pointer
  (node :pointer)
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_node_insert_filter" isl_schedule_node_insert_filter) :pointer
  (node :pointer)
  (filter :pointer))

(cffi:defcfun ("isl_schedule_node_insert_guard" isl_schedule_node_insert_guard) :pointer
  (node :pointer)
  (context :pointer))

(cffi:defcfun ("isl_schedule_node_insert_mark" isl_schedule_node_insert_mark) :pointer
  (node :pointer)
  (mark :pointer))

(cffi:defcfun ("isl_schedule_node_insert_sequence" isl_schedule_node_insert_sequence) :pointer
  (node :pointer)
  (filters :pointer))

(cffi:defcfun ("isl_schedule_node_insert_set" isl_schedule_node_insert_set) :pointer
  (node :pointer)
  (filters :pointer))

(cffi:defcfun ("isl_schedule_node_cut" isl_schedule_node_cut) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_delete" isl_schedule_node_delete) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_order_before" isl_schedule_node_order_before) :pointer
  (node :pointer)
  (filter :pointer))

(cffi:defcfun ("isl_schedule_node_order_after" isl_schedule_node_order_after) :pointer
  (node :pointer)
  (filter :pointer))

(cffi:defcfun ("isl_schedule_node_graft_before" isl_schedule_node_graft_before) :pointer
  (node :pointer)
  (graft :pointer))

(cffi:defcfun ("isl_schedule_node_graft_after" isl_schedule_node_graft_after) :pointer
  (node :pointer)
  (graft :pointer))

(cffi:defcfun ("isl_schedule_node_reset_user" isl_schedule_node_reset_user) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_align_params" isl_schedule_node_align_params) :pointer
  (node :pointer)
  (space :pointer))

(cffi:defcfun ("isl_printer_print_schedule_node" isl_printer_print_schedule_node) :pointer
  (p :pointer)
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_dump" isl_schedule_node_dump) :void
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_to_str" isl_schedule_node_to_str) :string
  (node :pointer))

(cffi:defcfun ("isl_basic_set_n_dim" isl_basic_set_n_dim) :int
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_n_param" isl_basic_set_n_param) :int
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_total_dim" isl_basic_set_total_dim) :int
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_dim" isl_basic_set_dim) :int
  (bset :pointer)
  (type :pointer))

(cffi:defcfun ("isl_set_n_dim" isl_set_n_dim) :int
  (set :pointer))

(cffi:defcfun ("isl_set_n_param" isl_set_n_param) :int
  (set :pointer))

(cffi:defcfun ("isl_set_dim" isl_set_dim) :int
  (set :pointer)
  (type :pointer))

(cffi:defcfun ("isl_basic_set_get_ctx" isl_basic_set_get_ctx) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_get_ctx" isl_set_get_ctx) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_get_space" isl_basic_set_get_space) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_get_space" isl_set_get_space) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_reset_space" isl_set_reset_space) :pointer
  (set :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_basic_set_get_div" isl_basic_set_get_div) :pointer
  (bset :pointer)
  (pos :int))

(cffi:defcfun ("isl_basic_set_get_local_space" isl_basic_set_get_local_space) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_get_tuple_name" isl_basic_set_get_tuple_name) :string
  (bset :pointer))

(cffi:defcfun ("isl_set_has_tuple_name" isl_set_has_tuple_name) isl_bool
  (set :pointer))

(cffi:defcfun ("isl_set_get_tuple_name" isl_set_get_tuple_name) :string
  (set :pointer))

(cffi:defcfun ("isl_basic_set_set_tuple_name" isl_basic_set_set_tuple_name) :pointer
  (set :pointer)
  (s :string))

(cffi:defcfun ("isl_set_set_tuple_name" isl_set_set_tuple_name) :pointer
  (set :pointer)
  (s :string))

(cffi:defcfun ("isl_basic_set_get_dim_name" isl_basic_set_get_dim_name) :string
  (bset :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_set_set_dim_name" isl_basic_set_set_dim_name) :pointer
  (bset :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_set_has_dim_name" isl_set_has_dim_name) isl_bool
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_get_dim_name" isl_set_get_dim_name) :string
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_set_dim_name" isl_set_set_dim_name) :pointer
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_basic_set_get_dim_id" isl_basic_set_get_dim_id) :pointer
  (bset :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_set_set_tuple_id" isl_basic_set_set_tuple_id) :pointer
  (bset :pointer)
  (id :pointer))

(cffi:defcfun ("isl_set_set_dim_id" isl_set_set_dim_id) :pointer
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_set_has_dim_id" isl_set_has_dim_id) isl_bool
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_get_dim_id" isl_set_get_dim_id) :pointer
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_set_tuple_id" isl_set_set_tuple_id) :pointer
  (set :pointer)
  (id :pointer))

(cffi:defcfun ("isl_set_reset_tuple_id" isl_set_reset_tuple_id) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_has_tuple_id" isl_set_has_tuple_id) isl_bool
  (set :pointer))

(cffi:defcfun ("isl_set_get_tuple_id" isl_set_get_tuple_id) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_reset_user" isl_set_reset_user) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_find_dim_by_id" isl_set_find_dim_by_id) :int
  (set :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_set_find_dim_by_name" isl_set_find_dim_by_name) :int
  (set :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_basic_set_is_rational" isl_basic_set_is_rational) :int
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_free" isl_basic_set_free) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_copy" isl_basic_set_copy) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_empty" isl_basic_set_empty) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_set_universe" isl_basic_set_universe) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_set_nat_universe" isl_basic_set_nat_universe) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_set_positive_orthant" isl_basic_set_positive_orthant) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_set_print_internal" isl_basic_set_print_internal) :void
  (bset :pointer)
  (out :pointer)
  (indent :int))

(cffi:defcfun ("isl_basic_set_intersect" isl_basic_set_intersect) :pointer
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_basic_set_intersect_params" isl_basic_set_intersect_params) :pointer
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_basic_set_apply" isl_basic_set_apply) :pointer
  (bset :pointer)
  (bmap :pointer))

(cffi:defcfun ("isl_basic_set_preimage_multi_aff" isl_basic_set_preimage_multi_aff) :pointer
  (bset :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_basic_set_affine_hull" isl_basic_set_affine_hull) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_remove_dims" isl_basic_set_remove_dims) :pointer
  (bset :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_sample" isl_basic_set_sample) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_detect_equalities" isl_basic_set_detect_equalities) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_remove_redundancies" isl_basic_set_remove_redundancies) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_remove_redundancies" isl_set_remove_redundancies) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_list_intersect" isl_basic_set_list_intersect) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_list_union" isl_set_list_union) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_set_read_from_file" isl_basic_set_read_from_file) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_basic_set_read_from_str" isl_basic_set_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_set_read_from_file" isl_set_read_from_file) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_set_read_from_str" isl_set_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_basic_set_dump" isl_basic_set_dump) :void
  (bset :pointer))

(cffi:defcfun ("isl_set_dump" isl_set_dump) :void
  (set :pointer))

(cffi:defcfun ("isl_printer_print_basic_set" isl_printer_print_basic_set) :pointer
  (printer :pointer)
  (bset :pointer))

(cffi:defcfun ("isl_printer_print_set" isl_printer_print_set) :pointer
  (printer :pointer)
  (map :pointer))

(cffi:defcfun ("isl_basic_set_fix_si" isl_basic_set_fix_si) :pointer
  (bset :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_set_fix_val" isl_basic_set_fix_val) :pointer
  (bset :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (v :pointer))

(cffi:defcfun ("isl_set_fix_si" isl_set_fix_si) :pointer
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_set_lower_bound_si" isl_set_lower_bound_si) :pointer
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_set_lower_bound_val" isl_basic_set_lower_bound_val) :pointer
  (bset :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :pointer))

(cffi:defcfun ("isl_set_lower_bound_val" isl_set_lower_bound_val) :pointer
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :pointer))

(cffi:defcfun ("isl_set_upper_bound_si" isl_set_upper_bound_si) :pointer
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_set_upper_bound_val" isl_basic_set_upper_bound_val) :pointer
  (bset :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :pointer))

(cffi:defcfun ("isl_set_upper_bound_val" isl_set_upper_bound_val) :pointer
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (value :pointer))

(cffi:defcfun ("isl_set_equate" isl_set_equate) :pointer
  (set :pointer)
  (type1 :pointer)
  (pos1 :int)
  (type2 :pointer)
  (pos2 :int))

(cffi:defcfun ("isl_basic_set_is_equal" isl_basic_set_is_equal) isl_bool
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_basic_set_is_disjoint" isl_basic_set_is_disjoint) isl_bool
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_basic_set_partial_lexmin" isl_basic_set_partial_lexmin) :pointer
  (bset :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_set_partial_lexmax" isl_basic_set_partial_lexmax) :pointer
  (bset :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_set_partial_lexmin" isl_set_partial_lexmin) :pointer
  (set :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_set_partial_lexmax" isl_set_partial_lexmax) :pointer
  (set :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_set_lexmin" isl_basic_set_lexmin) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_lexmax" isl_basic_set_lexmax) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_lexmin" isl_set_lexmin) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_lexmax" isl_set_lexmax) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_partial_lexmin_pw_multi_aff" isl_basic_set_partial_lexmin_pw_multi_aff) :pointer
  (bset :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_set_partial_lexmax_pw_multi_aff" isl_basic_set_partial_lexmax_pw_multi_aff) :pointer
  (bset :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_set_lexmin_pw_multi_aff" isl_set_lexmin_pw_multi_aff) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_lexmax_pw_multi_aff" isl_set_lexmax_pw_multi_aff) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_union" isl_basic_set_union) :pointer
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_basic_set_compare_at" isl_basic_set_compare_at) :int
  (bset1 :pointer)
  (bset2 :pointer)
  (pos :int))

(cffi:defcfun ("isl_set_follows_at" isl_set_follows_at) :int
  (set1 :pointer)
  (set2 :pointer)
  (pos :int))

(cffi:defcfun ("isl_basic_set_params" isl_basic_set_params) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_from_params" isl_basic_set_from_params) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_params" isl_set_params) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_from_params" isl_set_from_params) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_bind" isl_set_bind) :pointer
  (set :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_set_unbind_params" isl_set_unbind_params) :pointer
  (set :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_set_unbind_params_insert_domain" isl_set_unbind_params_insert_domain) :pointer
  (set :pointer)
  (domain :pointer))

(cffi:defcfun ("isl_basic_set_dims_get_sign" isl_basic_set_dims_get_sign) isl_stat
  (bset :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (n :unsigned-int)
  (signs :pointer))

(cffi:defcfun ("isl_basic_set_plain_is_universe" isl_basic_set_plain_is_universe) isl_bool
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_is_universe" isl_basic_set_is_universe) isl_bool
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_plain_is_empty" isl_basic_set_plain_is_empty) isl_bool
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_is_empty" isl_basic_set_is_empty) isl_bool
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_is_bounded" isl_basic_set_is_bounded) isl_bool
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_is_subset" isl_basic_set_is_subset) isl_bool
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_basic_set_plain_is_equal" isl_basic_set_plain_is_equal) isl_bool
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_set_empty" isl_set_empty) :pointer
  (space :pointer))

(cffi:defcfun ("isl_set_universe" isl_set_universe) :pointer
  (space :pointer))

(cffi:defcfun ("isl_set_nat_universe" isl_set_nat_universe) :pointer
  (dim :pointer))

(cffi:defcfun ("isl_set_copy" isl_set_copy) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_free" isl_set_free) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_from_basic_set" isl_set_from_basic_set) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_sample" isl_set_sample) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_sample_point" isl_basic_set_sample_point) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_sample_point" isl_set_sample_point) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_detect_equalities" isl_set_detect_equalities) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_affine_hull" isl_set_affine_hull) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_convex_hull" isl_set_convex_hull) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_polyhedral_hull" isl_set_polyhedral_hull) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_simple_hull" isl_set_simple_hull) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_unshifted_simple_hull" isl_set_unshifted_simple_hull) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_plain_unshifted_simple_hull" isl_set_plain_unshifted_simple_hull) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_unshifted_simple_hull_from_set_list" isl_set_unshifted_simple_hull_from_set_list) :pointer
  (set :pointer)
  (list :pointer))

(cffi:defcfun ("isl_set_bounded_simple_hull" isl_set_bounded_simple_hull) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_union_disjoint" isl_set_union_disjoint) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_union" isl_set_union) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_product" isl_set_product) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_basic_set_flat_product" isl_basic_set_flat_product) :pointer
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_set_flat_product" isl_set_flat_product) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_intersect" isl_set_intersect) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_intersect_params" isl_set_intersect_params) :pointer
  (set :pointer)
  (params :pointer))

(cffi:defcfun ("isl_set_intersect_factor_domain" isl_set_intersect_factor_domain) :pointer
  (set :pointer)
  (domain :pointer))

(cffi:defcfun ("isl_set_intersect_factor_range" isl_set_intersect_factor_range) :pointer
  (set :pointer)
  (range :pointer))

(cffi:defcfun ("isl_set_subtract" isl_set_subtract) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_complement" isl_set_complement) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_apply" isl_set_apply) :pointer
  (set :pointer)
  (map :pointer))

(cffi:defcfun ("isl_set_preimage_multi_aff" isl_set_preimage_multi_aff) :pointer
  (set :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_set_preimage_pw_multi_aff" isl_set_preimage_pw_multi_aff) :pointer
  (set :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_set_preimage_multi_pw_aff" isl_set_preimage_multi_pw_aff) :pointer
  (set :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_set_fix_val" isl_set_fix_val) :pointer
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (v :pointer))

(cffi:defcfun ("isl_set_fix_dim_si" isl_set_fix_dim_si) :pointer
  (set :pointer)
  (dim :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_set_insert_dims" isl_basic_set_insert_dims) :pointer
  (bset :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_insert_dims" isl_set_insert_dims) :pointer
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_add_dims" isl_basic_set_add_dims) :pointer
  (bset :pointer)
  (type :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_add_dims" isl_set_add_dims) :pointer
  (set :pointer)
  (type :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_move_dims" isl_basic_set_move_dims) :pointer
  (bset :pointer)
  (dst_type :pointer)
  (dst_pos :unsigned-int)
  (src_type :pointer)
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_move_dims" isl_set_move_dims) :pointer
  (set :pointer)
  (dst_type :pointer)
  (dst_pos :unsigned-int)
  (src_type :pointer)
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_project_out" isl_basic_set_project_out) :pointer
  (bset :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_project_out_param_id" isl_set_project_out_param_id) :pointer
  (set :pointer)
  (id :pointer))

(cffi:defcfun ("isl_set_project_out_param_id_list" isl_set_project_out_param_id_list) :pointer
  (set :pointer)
  (list :pointer))

(cffi:defcfun ("isl_set_project_out" isl_set_project_out) :pointer
  (set :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_project_out_all_params" isl_set_project_out_all_params) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_project_onto_map" isl_set_project_onto_map) :pointer
  (set :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_remove_divs" isl_basic_set_remove_divs) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_eliminate" isl_basic_set_eliminate) :pointer
  (bset :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_eliminate" isl_set_eliminate) :pointer
  (set :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_eliminate_dims" isl_set_eliminate_dims) :pointer
  (set :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_remove_dims" isl_set_remove_dims) :pointer
  (bset :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_remove_divs_involving_dims" isl_basic_set_remove_divs_involving_dims) :pointer
  (bset :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_remove_divs_involving_dims" isl_set_remove_divs_involving_dims) :pointer
  (set :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_remove_unknown_divs" isl_basic_set_remove_unknown_divs) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_remove_unknown_divs" isl_set_remove_unknown_divs) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_remove_divs" isl_set_remove_divs) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_split_dims" isl_set_split_dims) :pointer
  (set :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_drop_constraints_involving_dims" isl_basic_set_drop_constraints_involving_dims) :pointer
  (bset :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_drop_constraints_not_involving_dims" isl_basic_set_drop_constraints_not_involving_dims) :pointer
  (bset :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_drop_constraints_involving_dims" isl_set_drop_constraints_involving_dims) :pointer
  (set :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_drop_constraints_not_involving_dims" isl_set_drop_constraints_not_involving_dims) :pointer
  (set :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_involves_dims" isl_basic_set_involves_dims) isl_bool
  (bset :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_involves_dims" isl_set_involves_dims) isl_bool
  (set :pointer)
  (type :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_print_internal" isl_set_print_internal) :void
  (set :pointer)
  (out :pointer)
  (indent :int))

(cffi:defcfun ("isl_set_plain_is_empty" isl_set_plain_is_empty) isl_bool
  (set :pointer))

(cffi:defcfun ("isl_set_plain_is_universe" isl_set_plain_is_universe) isl_bool
  (set :pointer))

(cffi:defcfun ("isl_set_is_params" isl_set_is_params) isl_bool
  (set :pointer))

(cffi:defcfun ("isl_set_is_empty" isl_set_is_empty) isl_bool
  (set :pointer))

(cffi:defcfun ("isl_set_is_bounded" isl_set_is_bounded) isl_bool
  (set :pointer))

(cffi:defcfun ("isl_set_is_subset" isl_set_is_subset) isl_bool
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_is_strict_subset" isl_set_is_strict_subset) isl_bool
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_is_equal" isl_set_is_equal) isl_bool
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_is_disjoint" isl_set_is_disjoint) isl_bool
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_is_singleton" isl_set_is_singleton) isl_bool
  (set :pointer))

(cffi:defcfun ("isl_set_is_box" isl_set_is_box) isl_bool
  (set :pointer))

(cffi:defcfun ("isl_set_has_equal_space" isl_set_has_equal_space) isl_bool
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_sum" isl_set_sum) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_basic_set_neg" isl_basic_set_neg) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_neg" isl_set_neg) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_make_disjoint" isl_set_make_disjoint) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_compute_divs" isl_basic_set_compute_divs) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_compute_divs" isl_set_compute_divs) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_align_divs" isl_set_align_divs) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_plain_get_val_if_fixed" isl_set_plain_get_val_if_fixed) :pointer
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_dim_is_bounded" isl_set_dim_is_bounded) isl_bool
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_dim_has_lower_bound" isl_set_dim_has_lower_bound) isl_bool
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_dim_has_upper_bound" isl_set_dim_has_upper_bound) isl_bool
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_dim_has_any_lower_bound" isl_set_dim_has_any_lower_bound) isl_bool
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_dim_has_any_upper_bound" isl_set_dim_has_any_upper_bound) isl_bool
  (set :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_set_gist" isl_basic_set_gist) :pointer
  (bset :pointer)
  (context :pointer))

(cffi:defcfun ("isl_set_gist_basic_set" isl_set_gist_basic_set) :pointer
  (set :pointer)
  (context :pointer))

(cffi:defcfun ("isl_set_gist" isl_set_gist) :pointer
  (set :pointer)
  (context :pointer))

(cffi:defcfun ("isl_set_gist_params" isl_set_gist_params) :pointer
  (set :pointer)
  (context :pointer))

(cffi:defcfun ("isl_set_dim_residue_class_val" isl_set_dim_residue_class_val) isl_stat
  (set :pointer)
  (pos :int)
  (modulo :pointer)
  (residue :pointer))

(cffi:defcfun ("isl_set_get_stride_info" isl_set_get_stride_info) :pointer
  (set :pointer)
  (pos :int))

(cffi:defcfun ("isl_set_get_stride" isl_set_get_stride) :pointer
  (set :pointer)
  (pos :int))

(cffi:defcfun ("isl_set_coalesce" isl_set_coalesce) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_plain_cmp" isl_set_plain_cmp) :int
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_plain_is_equal" isl_set_plain_is_equal) isl_bool
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_plain_is_disjoint" isl_set_plain_is_disjoint) isl_bool
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_get_hash" isl_set_get_hash) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_n_basic_set" isl_set_n_basic_set) :int
  (set :pointer))

(cffi:defcfun ("isl_set_foreach_basic_set" isl_set_foreach_basic_set) isl_stat
  (set :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_set_get_basic_set_list" isl_set_get_basic_set_list) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_foreach_point" isl_set_foreach_point) isl_stat
  (set :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_set_count_val" isl_set_count_val) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_from_point" isl_basic_set_from_point) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_set_from_point" isl_set_from_point) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_basic_set_box_from_points" isl_basic_set_box_from_points) :pointer
  (pnt1 :pointer)
  (pnt2 :pointer))

(cffi:defcfun ("isl_set_box_from_points" isl_set_box_from_points) :pointer
  (pnt1 :pointer)
  (pnt2 :pointer))

(cffi:defcfun ("isl_basic_set_lift" isl_basic_set_lift) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_lift" isl_set_lift) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_lex_le_set" isl_set_lex_le_set) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_lex_lt_set" isl_set_lex_lt_set) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_lex_ge_set" isl_set_lex_ge_set) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_lex_gt_set" isl_set_lex_gt_set) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_size" isl_set_size) :int
  (set :pointer))

(cffi:defcfun ("isl_basic_set_align_params" isl_basic_set_align_params) :pointer
  (bset :pointer)
  (model :pointer))

(cffi:defcfun ("isl_set_align_params" isl_set_align_params) :pointer
  (set :pointer)
  (model :pointer))

(cffi:defcfun ("isl_basic_set_drop_unused_params" isl_basic_set_drop_unused_params) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_drop_unused_params" isl_set_drop_unused_params) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_equalities_matrix" isl_basic_set_equalities_matrix) :pointer
  (bset :pointer)
  (c1 :pointer)
  (c2 :pointer)
  (c3 :pointer)
  (c4 :pointer))

(cffi:defcfun ("isl_basic_set_inequalities_matrix" isl_basic_set_inequalities_matrix) :pointer
  (bset :pointer)
  (c1 :pointer)
  (c2 :pointer)
  (c3 :pointer)
  (c4 :pointer))

(cffi:defcfun ("isl_basic_set_from_constraint_matrices" isl_basic_set_from_constraint_matrices) :pointer
  (dim :pointer)
  (eq :pointer)
  (ineq :pointer)
  (c1 :pointer)
  (c2 :pointer)
  (c3 :pointer)
  (c4 :pointer))

(cffi:defcfun ("isl_basic_set_from_multi_aff" isl_basic_set_from_multi_aff) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_set_from_multi_aff" isl_set_from_multi_aff) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_basic_set_reduced_basis" isl_basic_set_reduced_basis) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_coefficients" isl_basic_set_coefficients) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_list_coefficients" isl_basic_set_list_coefficients) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_coefficients" isl_set_coefficients) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_solutions" isl_basic_set_solutions) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_solutions" isl_set_solutions) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_dim_max" isl_set_dim_max) :pointer
  (set :pointer)
  (pos :int))

(cffi:defcfun ("isl_set_dim_min" isl_set_dim_min) :pointer
  (set :pointer)
  (pos :int))

(cffi:defcfun ("isl_basic_set_to_str" isl_basic_set_to_str) :string
  (bset :pointer))

(cffi:defcfun ("isl_set_to_str" isl_set_to_str) :string
  (set :pointer))

(cffi:defcfun ("isl_space_get_ctx" isl_space_get_ctx) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_unit" isl_space_unit) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_space_alloc" isl_space_alloc) :pointer
  (ctx :pointer)
  (nparam :unsigned-int)
  (n_in :unsigned-int)
  (n_out :unsigned-int))

(cffi:defcfun ("isl_space_set_alloc" isl_space_set_alloc) :pointer
  (ctx :pointer)
  (nparam :unsigned-int)
  (dim :unsigned-int))

(cffi:defcfun ("isl_space_params_alloc" isl_space_params_alloc) :pointer
  (ctx :pointer)
  (nparam :unsigned-int))

(cffi:defcfun ("isl_space_copy" isl_space_copy) :pointer
  (dim :pointer))

(cffi:defcfun ("isl_space_free" isl_space_free) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_is_params" isl_space_is_params) isl_bool
  (space :pointer))

(cffi:defcfun ("isl_space_is_set" isl_space_is_set) isl_bool
  (space :pointer))

(cffi:defcfun ("isl_space_is_map" isl_space_is_map) isl_bool
  (space :pointer))

(cffi:defcfun ("isl_space_add_param_id" isl_space_add_param_id) :pointer
  (space :pointer)
  (id :pointer))

(cffi:defcfun ("isl_space_set_tuple_name" isl_space_set_tuple_name) :pointer
  (space :pointer)
  (type :pointer)
  (s :string))

(cffi:defcfun ("isl_space_has_tuple_name" isl_space_has_tuple_name) isl_bool
  (space :pointer)
  (type :pointer))

(cffi:defcfun ("isl_space_get_tuple_name" isl_space_get_tuple_name) :string
  (space :pointer)
  (type :pointer))

(cffi:defcfun ("isl_space_set_tuple_id" isl_space_set_tuple_id) :pointer
  (space :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_space_reset_tuple_id" isl_space_reset_tuple_id) :pointer
  (space :pointer)
  (type :pointer))

(cffi:defcfun ("isl_space_has_tuple_id" isl_space_has_tuple_id) isl_bool
  (space :pointer)
  (type :pointer))

(cffi:defcfun ("isl_space_get_tuple_id" isl_space_get_tuple_id) :pointer
  (space :pointer)
  (type :pointer))

(cffi:defcfun ("isl_space_reset_user" isl_space_reset_user) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_set_dim_id" isl_space_set_dim_id) :pointer
  (dim :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_space_has_dim_id" isl_space_has_dim_id) isl_bool
  (space :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_space_get_dim_id" isl_space_get_dim_id) :pointer
  (space :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_space_find_dim_by_id" isl_space_find_dim_by_id) :int
  (space :pointer)
  (type :pointer)
  (id :pointer))

(cffi:defcfun ("isl_space_find_dim_by_name" isl_space_find_dim_by_name) :int
  (space :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("isl_space_has_dim_name" isl_space_has_dim_name) isl_bool
  (space :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_space_set_dim_name" isl_space_set_dim_name) :pointer
  (space :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (name :string))

(cffi:defcfun ("isl_space_get_dim_name" isl_space_get_dim_name) :string
  (space :pointer)
  (type :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_space_extend" isl_space_extend) :pointer
  (dim :pointer)
  (nparam :unsigned-int)
  (n_in :unsigned-int)
  (n_out :unsigned-int))

(cffi:defcfun ("isl_space_add_dims" isl_space_add_dims) :pointer
  (space :pointer)
  (type :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_space_move_dims" isl_space_move_dims) :pointer
  (space :pointer)
  (dst_type :pointer)
  (dst_pos :unsigned-int)
  (src_type :pointer)
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_space_insert_dims" isl_space_insert_dims) :pointer
  (space :pointer)
  (type :pointer)
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_space_join" isl_space_join) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_space_product" isl_space_product) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_space_domain_product" isl_space_domain_product) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_space_range_product" isl_space_range_product) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_space_factor_domain" isl_space_factor_domain) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_factor_range" isl_space_factor_range) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_domain_factor_domain" isl_space_domain_factor_domain) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_domain_factor_range" isl_space_domain_factor_range) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_range_factor_domain" isl_space_range_factor_domain) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_range_factor_range" isl_space_range_factor_range) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_map_from_set" isl_space_map_from_set) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_map_from_domain_and_range" isl_space_map_from_domain_and_range) :pointer
  (domain :pointer)
  (range :pointer))

(cffi:defcfun ("isl_space_reverse" isl_space_reverse) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_range_reverse" isl_space_range_reverse) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_drop_dims" isl_space_drop_dims) :pointer
  (space :pointer)
  (type :pointer)
  (first :unsigned-int)
  (num :unsigned-int))

(cffi:defcfun ("isl_space_drop_inputs" isl_space_drop_inputs) :pointer
  (dim :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_space_drop_outputs" isl_space_drop_outputs) :pointer
  (dim :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_space_drop_all_params" isl_space_drop_all_params) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_domain" isl_space_domain) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_from_domain" isl_space_from_domain) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_range" isl_space_range) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_from_range" isl_space_from_range) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_domain_map" isl_space_domain_map) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_range_map" isl_space_range_map) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_params" isl_space_params) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_add_unnamed_tuple_ui" isl_space_add_unnamed_tuple_ui) :pointer
  (space :pointer)
  (dim :unsigned-int))

(cffi:defcfun ("isl_space_add_named_tuple_id_ui" isl_space_add_named_tuple_id_ui) :pointer
  (space :pointer)
  (tuple_id :pointer)
  (dim :unsigned-int))

(cffi:defcfun ("isl_space_set_from_params" isl_space_set_from_params) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_align_params" isl_space_align_params) :pointer
  (dim1 :pointer)
  (dim2 :pointer))

(cffi:defcfun ("isl_space_is_wrapping" isl_space_is_wrapping) isl_bool
  (space :pointer))

(cffi:defcfun ("isl_space_domain_is_wrapping" isl_space_domain_is_wrapping) isl_bool
  (space :pointer))

(cffi:defcfun ("isl_space_range_is_wrapping" isl_space_range_is_wrapping) isl_bool
  (space :pointer))

(cffi:defcfun ("isl_space_is_product" isl_space_is_product) isl_bool
  (space :pointer))

(cffi:defcfun ("isl_space_wrap" isl_space_wrap) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_unwrap" isl_space_unwrap) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_can_zip" isl_space_can_zip) isl_bool
  (space :pointer))

(cffi:defcfun ("isl_space_zip" isl_space_zip) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_can_curry" isl_space_can_curry) isl_bool
  (space :pointer))

(cffi:defcfun ("isl_space_curry" isl_space_curry) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_can_range_curry" isl_space_can_range_curry) isl_bool
  (space :pointer))

(cffi:defcfun ("isl_space_range_curry" isl_space_range_curry) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_can_uncurry" isl_space_can_uncurry) isl_bool
  (space :pointer))

(cffi:defcfun ("isl_space_uncurry" isl_space_uncurry) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_is_domain" isl_space_is_domain) isl_bool
  (space1 :pointer)
  (space2 :pointer))

(cffi:defcfun ("isl_space_is_range" isl_space_is_range) isl_bool
  (space1 :pointer)
  (space2 :pointer))

(cffi:defcfun ("isl_space_is_equal" isl_space_is_equal) isl_bool
  (space1 :pointer)
  (space2 :pointer))

(cffi:defcfun ("isl_space_has_equal_params" isl_space_has_equal_params) isl_bool
  (space1 :pointer)
  (space2 :pointer))

(cffi:defcfun ("isl_space_has_equal_tuples" isl_space_has_equal_tuples) isl_bool
  (space1 :pointer)
  (space2 :pointer))

(cffi:defcfun ("isl_space_tuple_is_equal" isl_space_tuple_is_equal) isl_bool
  (space1 :pointer)
  (type1 :pointer)
  (space2 :pointer)
  (type2 :pointer))

(cffi:defcfun ("isl_space_match" isl_space_match) isl_bool
  (space1 :pointer)
  (type1 :pointer)
  (space2 :pointer)
  (type2 :pointer))

(cffi:defcfun ("isl_space_dim" isl_space_dim) :int
  (space :pointer)
  (type :pointer))

(cffi:defcfun ("isl_space_flatten_domain" isl_space_flatten_domain) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_flatten_range" isl_space_flatten_range) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_to_str" isl_space_to_str) :string
  (space :pointer))

(cffi:defcfun ("isl_printer_print_space" isl_printer_print_space) :pointer
  (p :pointer)
  (space :pointer))

(cffi:defcfun ("isl_space_dump" isl_space_dump) :void
  (space :pointer))

(cl:defconstant _ISL_INCLUDE_ISL_STDINT_H 1)

(alexandria:define-constant _GENERATED_STDINT_H "isl 0.22.1"
  :test #'string=)

(cl:defconstant _STDINT_HAVE_STDINT_H 1)

(cffi:defcfun ("isl_token_get_val" isl_token_get_val) :pointer
  (ctx :pointer)
  (tok :pointer))

(cffi:defcfun ("isl_token_get_str" isl_token_get_str) :string
  (ctx :pointer)
  (tok :pointer))

(cffi:defcfun ("isl_token_get_type" isl_token_get_type) :int
  (tok :pointer))

(cffi:defcfun ("isl_token_free" isl_token_free) :void
  (tok :pointer))

(cffi:defcfun ("isl_stream_new_file" isl_stream_new_file) :pointer
  (ctx :pointer)
  (file :pointer))

(cffi:defcfun ("isl_stream_new_str" isl_stream_new_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_stream_free" isl_stream_free) :void
  (s :pointer))

(cffi:defcfun ("isl_stream_get_ctx" isl_stream_get_ctx) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_error" isl_stream_error) :void
  (s :pointer)
  (tok :pointer)
  (msg :string))

(cffi:defcfun ("isl_stream_next_token" isl_stream_next_token) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_next_token_on_same_line" isl_stream_next_token_on_same_line) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_next_token_is" isl_stream_next_token_is) :int
  (s :pointer)
  (type :int))

(cffi:defcfun ("isl_stream_push_token" isl_stream_push_token) :void
  (s :pointer)
  (tok :pointer))

(cffi:defcfun ("isl_stream_flush_tokens" isl_stream_flush_tokens) :void
  (s :pointer))

(cffi:defcfun ("isl_stream_eat_if_available" isl_stream_eat_if_available) :int
  (s :pointer)
  (type :int))

(cffi:defcfun ("isl_stream_read_ident_if_available" isl_stream_read_ident_if_available) :string
  (s :pointer))

(cffi:defcfun ("isl_stream_eat" isl_stream_eat) :int
  (s :pointer)
  (type :int))

(cffi:defcfun ("isl_stream_is_empty" isl_stream_is_empty) :int
  (s :pointer))

(cffi:defcfun ("isl_stream_skip_line" isl_stream_skip_line) :int
  (s :pointer))

(cffi:defcfun ("isl_stream_register_keyword" isl_stream_register_keyword) isl_token_type
  (s :pointer)
  (name :string))

(cffi:defcfun ("isl_stream_read_obj" isl_stream_read_obj) isl_obj
  (s :pointer))

(cffi:defcfun ("isl_stream_read_val" isl_stream_read_val) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_multi_aff" isl_stream_read_multi_aff) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_map" isl_stream_read_map) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_set" isl_stream_read_set) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_pw_qpolynomial" isl_stream_read_pw_qpolynomial) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_union_set" isl_stream_read_union_set) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_union_map" isl_stream_read_union_map) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_schedule" isl_stream_read_schedule) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_yaml_read_start_mapping" isl_stream_yaml_read_start_mapping) :int
  (s :pointer))

(cffi:defcfun ("isl_stream_yaml_read_end_mapping" isl_stream_yaml_read_end_mapping) :int
  (s :pointer))

(cffi:defcfun ("isl_stream_yaml_read_start_sequence" isl_stream_yaml_read_start_sequence) :int
  (s :pointer))

(cffi:defcfun ("isl_stream_yaml_read_end_sequence" isl_stream_yaml_read_end_sequence) :int
  (s :pointer))

(cffi:defcfun ("isl_stream_yaml_next" isl_stream_yaml_next) :int
  (s :pointer))

(cffi:defcfun ("isl_stride_info_get_ctx" isl_stride_info_get_ctx) :pointer
  (si :pointer))

(cffi:defcfun ("isl_stride_info_get_stride" isl_stride_info_get_stride) :pointer
  (si :pointer))

(cffi:defcfun ("isl_stride_info_get_offset" isl_stride_info_get_offset) :pointer
  (si :pointer))

(cffi:defcfun ("isl_stride_info_free" isl_stride_info_free) :pointer
  (si :pointer))

(cffi:defcfun ("isl_stride_info_copy" isl_stride_info_copy) :pointer
  (si :pointer))

(cffi:defcfun ("isl_union_map_dim" isl_union_map_dim) :int
  (umap :pointer)
  (type isl_dim_type))

(cffi:defcfun ("isl_union_map_involves_dims" isl_union_map_involves_dims) isl_bool
  (umap :pointer)
  (type isl_dim_type)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_map_get_dim_id" isl_union_map_get_dim_id) :pointer
  (umap :pointer)
  (type isl_dim_type)
  (pos :unsigned-int))

(cffi:defcfun ("isl_union_map_from_basic_map" isl_union_map_from_basic_map) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_union_map_from_map" isl_union_map_from_map) :pointer
  (map :pointer))

(cffi:defcfun ("isl_union_map_empty_ctx" isl_union_map_empty_ctx) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_union_map_empty_space" isl_union_map_empty_space) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_map_empty" isl_union_map_empty) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_map_copy" isl_union_map_copy) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_free" isl_union_map_free) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_get_ctx" isl_union_map_get_ctx) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_get_space" isl_union_map_get_space) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_reset_user" isl_union_map_reset_user) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_find_dim_by_name" isl_union_map_find_dim_by_name) :int
  (umap :pointer)
  (type isl_dim_type)
  (name :string))

(cffi:defcfun ("isl_union_map_universe" isl_union_map_universe) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_params" isl_union_map_params) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_domain" isl_union_map_domain) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_range" isl_union_map_range) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_domain_map" isl_union_map_domain_map) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_domain_map_union_pw_multi_aff" isl_union_map_domain_map_union_pw_multi_aff) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_range_map" isl_union_map_range_map) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_set_wrapped_domain_map" isl_union_set_wrapped_domain_map) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_map_from_domain" isl_union_map_from_domain) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_map_from_range" isl_union_map_from_range) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_map_affine_hull" isl_union_map_affine_hull) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_polyhedral_hull" isl_union_map_polyhedral_hull) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_remove_redundancies" isl_union_map_remove_redundancies) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_simple_hull" isl_union_map_simple_hull) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_coalesce" isl_union_map_coalesce) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_compute_divs" isl_union_map_compute_divs) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_lexmin" isl_union_map_lexmin) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_lexmax" isl_union_map_lexmax) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_add_map" isl_union_map_add_map) :pointer
  (umap :pointer)
  (map :pointer))

(cffi:defcfun ("isl_union_map_union" isl_union_map_union) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_subtract" isl_union_map_subtract) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_intersect" isl_union_map_intersect) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_intersect_params" isl_union_map_intersect_params) :pointer
  (umap :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_map_product" isl_union_map_product) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_domain_product" isl_union_map_domain_product) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_flat_domain_product" isl_union_map_flat_domain_product) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_range_product" isl_union_map_range_product) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_flat_range_product" isl_union_map_flat_range_product) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_domain_factor_domain" isl_union_map_domain_factor_domain) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_domain_factor_range" isl_union_map_domain_factor_range) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_range_factor_domain" isl_union_map_range_factor_domain) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_range_factor_range" isl_union_map_range_factor_range) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_factor_domain" isl_union_map_factor_domain) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_factor_range" isl_union_map_factor_range) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_gist" isl_union_map_gist) :pointer
  (umap :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_map_gist_params" isl_union_map_gist_params) :pointer
  (umap :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_map_gist_domain" isl_union_map_gist_domain) :pointer
  (umap :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_map_gist_range" isl_union_map_gist_range) :pointer
  (umap :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_map_intersect_domain" isl_union_map_intersect_domain) :pointer
  (umap :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_map_intersect_range" isl_union_map_intersect_range) :pointer
  (umap :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_map_intersect_domain_factor_range" isl_union_map_intersect_domain_factor_range) :pointer
  (umap :pointer)
  (factor :pointer))

(cffi:defcfun ("isl_union_map_intersect_range_factor_domain" isl_union_map_intersect_range_factor_domain) :pointer
  (umap :pointer)
  (factor :pointer))

(cffi:defcfun ("isl_union_map_intersect_range_factor_range" isl_union_map_intersect_range_factor_range) :pointer
  (umap :pointer)
  (factor :pointer))

(cffi:defcfun ("isl_union_map_subtract_domain" isl_union_map_subtract_domain) :pointer
  (umap :pointer)
  (dom :pointer))

(cffi:defcfun ("isl_union_map_subtract_range" isl_union_map_subtract_range) :pointer
  (umap :pointer)
  (dom :pointer))

(cffi:defcfun ("isl_union_map_apply_domain" isl_union_map_apply_domain) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_apply_range" isl_union_map_apply_range) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_preimage_domain_multi_aff" isl_union_map_preimage_domain_multi_aff) :pointer
  (umap :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_union_map_preimage_range_multi_aff" isl_union_map_preimage_range_multi_aff) :pointer
  (umap :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_union_map_preimage_domain_pw_multi_aff" isl_union_map_preimage_domain_pw_multi_aff) :pointer
  (umap :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_union_map_preimage_range_pw_multi_aff" isl_union_map_preimage_range_pw_multi_aff) :pointer
  (umap :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_union_map_preimage_domain_multi_pw_aff" isl_union_map_preimage_domain_multi_pw_aff) :pointer
  (umap :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_union_map_preimage_domain_union_pw_multi_aff" isl_union_map_preimage_domain_union_pw_multi_aff) :pointer
  (umap :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_union_map_preimage_range_union_pw_multi_aff" isl_union_map_preimage_range_union_pw_multi_aff) :pointer
  (umap :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_union_map_reverse" isl_union_map_reverse) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_range_reverse" isl_union_map_range_reverse) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_from_domain_and_range" isl_union_map_from_domain_and_range) :pointer
  (domain :pointer)
  (range :pointer))

(cffi:defcfun ("isl_union_map_detect_equalities" isl_union_map_detect_equalities) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_deltas" isl_union_map_deltas) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_deltas_map" isl_union_map_deltas_map) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_set_identity" isl_union_set_identity) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_map_project_out" isl_union_map_project_out) :pointer
  (umap :pointer)
  (type isl_dim_type)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_map_project_out_all_params" isl_union_map_project_out_all_params) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_remove_divs" isl_union_map_remove_divs) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_union_map_bind_range" isl_union_map_bind_range) :pointer
  (umap :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_union_map_plain_is_empty" isl_union_map_plain_is_empty) isl_bool
  (umap :pointer))

(cffi:defcfun ("isl_union_map_is_empty" isl_union_map_is_empty) isl_bool
  (umap :pointer))

(cffi:defcfun ("isl_union_map_is_single_valued" isl_union_map_is_single_valued) isl_bool
  (umap :pointer))

(cffi:defcfun ("isl_union_map_plain_is_injective" isl_union_map_plain_is_injective) isl_bool
  (umap :pointer))

(cffi:defcfun ("isl_union_map_is_injective" isl_union_map_is_injective) isl_bool
  (umap :pointer))

(cffi:defcfun ("isl_union_map_is_bijective" isl_union_map_is_bijective) isl_bool
  (umap :pointer))

(cffi:defcfun ("isl_union_map_is_identity" isl_union_map_is_identity) isl_bool
  (umap :pointer))

(cffi:defcfun ("isl_union_map_is_subset" isl_union_map_is_subset) isl_bool
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_is_equal" isl_union_map_is_equal) isl_bool
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_is_disjoint" isl_union_map_is_disjoint) isl_bool
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_is_strict_subset" isl_union_map_is_strict_subset) isl_bool
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_get_hash" isl_union_map_get_hash) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_n_map" isl_union_map_n_map) :int
  (umap :pointer))

(cffi:defcfun ("isl_union_map_foreach_map" isl_union_map_foreach_map) isl_stat
  (umap :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_map_get_map_list" isl_union_map_get_map_list) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_every_map" isl_union_map_every_map) isl_bool
  (umap :pointer)
  (test :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_map_remove_map_if" isl_union_map_remove_map_if) :pointer
  (umap :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_map_contains" isl_union_map_contains) isl_bool
  (umap :pointer)
  (space :pointer))

(cffi:defcfun ("isl_union_map_extract_map" isl_union_map_extract_map) :pointer
  (umap :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_union_map_isa_map" isl_union_map_isa_map) isl_bool
  (umap :pointer))

(cffi:defcfun ("isl_map_from_union_map" isl_map_from_union_map) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_sample" isl_union_map_sample) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_fixed_power_val" isl_union_map_fixed_power_val) :pointer
  (umap :pointer)
  (exp :pointer))

(cffi:defcfun ("isl_union_map_power" isl_union_map_power) :pointer
  (umap :pointer)
  (exact :pointer))

(cffi:defcfun ("isl_union_map_transitive_closure" isl_union_map_transitive_closure) :pointer
  (umap :pointer)
  (exact :pointer))

(cffi:defcfun ("isl_union_map_lex_lt_union_map" isl_union_map_lex_lt_union_map) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_lex_le_union_map" isl_union_map_lex_le_union_map) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_lex_gt_union_map" isl_union_map_lex_gt_union_map) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_lex_ge_union_map" isl_union_map_lex_ge_union_map) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_eq_at_multi_union_pw_aff" isl_union_map_eq_at_multi_union_pw_aff) :pointer
  (umap :pointer)
  (mupa :pointer))

(cffi:defcfun ("isl_union_map_lex_lt_at_multi_union_pw_aff" isl_union_map_lex_lt_at_multi_union_pw_aff) :pointer
  (umap :pointer)
  (mupa :pointer))

(cffi:defcfun ("isl_union_map_lex_gt_at_multi_union_pw_aff" isl_union_map_lex_gt_at_multi_union_pw_aff) :pointer
  (umap :pointer)
  (mupa :pointer))

(cffi:defcfun ("isl_union_map_read_from_file" isl_union_map_read_from_file) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_union_map_read_from_str" isl_union_map_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_union_map_to_str" isl_union_map_to_str) :string
  (umap :pointer))

(cffi:defcfun ("isl_printer_print_union_map" isl_printer_print_union_map) :pointer
  (p :pointer)
  (umap :pointer))

(cffi:defcfun ("isl_union_map_dump" isl_union_map_dump) :void
  (umap :pointer))

(cffi:defcfun ("isl_union_map_wrap" isl_union_map_wrap) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_set_unwrap" isl_union_set_unwrap) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_map_zip" isl_union_map_zip) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_curry" isl_union_map_curry) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_range_curry" isl_union_map_range_curry) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_uncurry" isl_union_map_uncurry) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_align_params" isl_union_map_align_params) :pointer
  (umap :pointer)
  (model :pointer))

(cffi:defcfun ("isl_union_set_align_params" isl_union_set_align_params) :pointer
  (uset :pointer)
  (model :pointer))

(cffi:defcfun ("isl_union_map_list_get_ctx" isl_union_map_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_from_union_map" isl_union_map_list_from_union_map) :pointer
  (el :pointer))

(cffi:defcfun ("isl_union_map_list_alloc" isl_union_map_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_union_map_list_copy" isl_union_map_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_free" isl_union_map_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_add" isl_union_map_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_union_map_list_insert" isl_union_map_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_union_map_list_drop" isl_union_map_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_map_list_clear" isl_union_map_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_swap" isl_union_map_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_union_map_list_reverse" isl_union_map_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_concat" isl_union_map_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_union_map_list_size" isl_union_map_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_n_union_map" isl_union_map_list_n_union_map) :int
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_get_at" isl_union_map_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_map_list_get_union_map" isl_union_map_list_get_union_map) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_map_list_set_union_map" isl_union_map_list_set_union_map) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_union_map_list_foreach" isl_union_map_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_map_list_map" isl_union_map_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_map_list_sort" isl_union_map_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_map_list_foreach_scc" isl_union_map_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_union_map_list_to_str" isl_union_map_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_union_map_list" isl_printer_print_union_map_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_dump" isl_union_map_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_union_set_dim" isl_union_set_dim) :int
  (uset :pointer)
  (type isl_dim_type))

(cffi:defcfun ("isl_union_set_from_basic_set" isl_union_set_from_basic_set) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_union_set_from_set" isl_union_set_from_set) :pointer
  (set :pointer))

(cffi:defcfun ("isl_union_set_empty_ctx" isl_union_set_empty_ctx) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_union_set_empty_space" isl_union_set_empty_space) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_set_empty" isl_union_set_empty) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_set_copy" isl_union_set_copy) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_free" isl_union_set_free) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_get_ctx" isl_union_set_get_ctx) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_get_space" isl_union_set_get_space) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_reset_user" isl_union_set_reset_user) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_universe" isl_union_set_universe) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_params" isl_union_set_params) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_detect_equalities" isl_union_set_detect_equalities) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_affine_hull" isl_union_set_affine_hull) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_polyhedral_hull" isl_union_set_polyhedral_hull) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_remove_redundancies" isl_union_set_remove_redundancies) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_simple_hull" isl_union_set_simple_hull) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_coalesce" isl_union_set_coalesce) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_compute_divs" isl_union_set_compute_divs) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_lexmin" isl_union_set_lexmin) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_lexmax" isl_union_set_lexmax) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_add_set" isl_union_set_add_set) :pointer
  (uset :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_set_union" isl_union_set_union) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_subtract" isl_union_set_subtract) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_intersect" isl_union_set_intersect) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_intersect_params" isl_union_set_intersect_params) :pointer
  (uset :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_set_product" isl_union_set_product) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_gist" isl_union_set_gist) :pointer
  (uset :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_set_gist_params" isl_union_set_gist_params) :pointer
  (uset :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_set_apply" isl_union_set_apply) :pointer
  (uset :pointer)
  (umap :pointer))

(cffi:defcfun ("isl_union_set_preimage_multi_aff" isl_union_set_preimage_multi_aff) :pointer
  (uset :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_union_set_preimage_pw_multi_aff" isl_union_set_preimage_pw_multi_aff) :pointer
  (uset :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_union_set_preimage_union_pw_multi_aff" isl_union_set_preimage_union_pw_multi_aff) :pointer
  (uset :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_union_set_project_out" isl_union_set_project_out) :pointer
  (uset :pointer)
  (type isl_dim_type)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_set_project_out_all_params" isl_union_set_project_out_all_params) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_remove_divs" isl_union_set_remove_divs) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_union_set_is_params" isl_union_set_is_params) isl_bool
  (uset :pointer))

(cffi:defcfun ("isl_union_set_is_empty" isl_union_set_is_empty) isl_bool
  (uset :pointer))

(cffi:defcfun ("isl_union_set_is_subset" isl_union_set_is_subset) isl_bool
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_is_equal" isl_union_set_is_equal) isl_bool
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_is_disjoint" isl_union_set_is_disjoint) isl_bool
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_is_strict_subset" isl_union_set_is_strict_subset) isl_bool
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_get_hash" isl_union_set_get_hash) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_n_set" isl_union_set_n_set) :int
  (uset :pointer))

(cffi:defcfun ("isl_union_set_foreach_set" isl_union_set_foreach_set) isl_stat
  (uset :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_set_every_set" isl_union_set_every_set) isl_bool
  (uset :pointer)
  (test :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_set_get_basic_set_list" isl_union_set_get_basic_set_list) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_get_set_list" isl_union_set_get_set_list) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_contains" isl_union_set_contains) isl_bool
  (uset :pointer)
  (space :pointer))

(cffi:defcfun ("isl_union_set_extract_set" isl_union_set_extract_set) :pointer
  (uset :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_union_set_isa_set" isl_union_set_isa_set) isl_bool
  (uset :pointer))

(cffi:defcfun ("isl_set_from_union_set" isl_set_from_union_set) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_foreach_point" isl_union_set_foreach_point) isl_stat
  (uset :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_set_sample" isl_union_set_sample) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_sample_point" isl_union_set_sample_point) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_from_point" isl_union_set_from_point) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_union_set_lift" isl_union_set_lift) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_lex_lt_union_set" isl_union_set_lex_lt_union_set) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_lex_le_union_set" isl_union_set_lex_le_union_set) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_lex_gt_union_set" isl_union_set_lex_gt_union_set) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_lex_ge_union_set" isl_union_set_lex_ge_union_set) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_coefficients" isl_union_set_coefficients) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_union_set_solutions" isl_union_set_solutions) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_union_set_read_from_file" isl_union_set_read_from_file) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_union_set_read_from_str" isl_union_set_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_union_set_to_str" isl_union_set_to_str) :string
  (uset :pointer))

(cffi:defcfun ("isl_printer_print_union_set" isl_printer_print_union_set) :pointer
  (p :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_set_dump" isl_union_set_dump) :void
  (uset :pointer))

(cffi:defcfun ("isl_union_set_list_get_ctx" isl_union_set_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_from_union_set" isl_union_set_list_from_union_set) :pointer
  (el :pointer))

(cffi:defcfun ("isl_union_set_list_alloc" isl_union_set_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_union_set_list_copy" isl_union_set_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_free" isl_union_set_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_add" isl_union_set_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_union_set_list_insert" isl_union_set_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_union_set_list_drop" isl_union_set_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_set_list_clear" isl_union_set_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_swap" isl_union_set_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_union_set_list_reverse" isl_union_set_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_concat" isl_union_set_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_union_set_list_size" isl_union_set_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_n_union_set" isl_union_set_list_n_union_set) :int
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_get_at" isl_union_set_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_set_list_get_union_set" isl_union_set_list_get_union_set) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_set_list_set_union_set" isl_union_set_list_set_union_set) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_union_set_list_foreach" isl_union_set_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_set_list_map" isl_union_set_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_set_list_sort" isl_union_set_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_set_list_foreach_scc" isl_union_set_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_union_set_list_to_str" isl_union_set_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_union_set_list" isl_printer_print_union_set_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_dump" isl_union_set_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_union" isl_union_set_list_union) :pointer
  (list :pointer))

(cffi:defcfun ("isl_val_int_from_gmp" isl_val_int_from_gmp) :pointer
  (ctx :pointer)
  (z :pointer))

(cffi:defcfun ("isl_val_from_gmp" isl_val_from_gmp) :pointer
  (ctx :pointer)
  (n :pointer)
  (d :pointer))

(cffi:defcfun ("isl_val_get_num_gmp" isl_val_get_num_gmp) :int
  (v :pointer)
  (z :pointer))

(cffi:defcfun ("isl_val_get_den_gmp" isl_val_get_den_gmp) :int
  (v :pointer)
  (z :pointer))

(cffi:defcfun ("isl_multi_val_get_ctx" isl_multi_val_get_ctx) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_get_space" isl_multi_val_get_space) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_get_domain_space" isl_multi_val_get_domain_space) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_from_val_list" isl_multi_val_from_val_list) :pointer
  (space :pointer)
  (list :pointer))

(cffi:defcfun ("isl_multi_val_copy" isl_multi_val_copy) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_free" isl_multi_val_free) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_plain_is_equal" isl_multi_val_plain_is_equal) isl_bool
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_reset_user" isl_multi_val_reset_user) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_size" isl_multi_val_size) :int
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_get_at" isl_multi_val_get_at) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_val_get_val" isl_multi_val_get_val) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_val_set_at" isl_multi_val_set_at) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_val_set_val" isl_multi_val_set_val) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_val_range_splice" isl_multi_val_range_splice) :pointer
  (multi1 :pointer)
  (pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_flatten_range" isl_multi_val_flatten_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_flat_range_product" isl_multi_val_flat_range_product) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_range_product" isl_multi_val_range_product) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_factor_range" isl_multi_val_factor_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_range_is_wrapping" isl_multi_val_range_is_wrapping) isl_bool
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_range_factor_domain" isl_multi_val_range_factor_domain) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_range_factor_range" isl_multi_val_range_factor_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_align_params" isl_multi_val_align_params) :pointer
  (multi :pointer)
  (model :pointer))

(cffi:defcfun ("isl_multi_val_from_range" isl_multi_val_from_range) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_scale_val" isl_multi_val_scale_val) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_val_scale_down_val" isl_multi_val_scale_down_val) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_val_scale_multi_val" isl_multi_val_scale_multi_val) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_val_scale_down_multi_val" isl_multi_val_scale_down_multi_val) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_val_mod_multi_val" isl_multi_val_mod_multi_val) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_val_add" isl_multi_val_add) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_sub" isl_multi_val_sub) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_neg" isl_multi_val_neg) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_zero" isl_multi_val_zero) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_val_involves_nan" isl_multi_val_involves_nan) isl_bool
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_dim" isl_multi_val_dim) :int
  (multi :pointer)
  (type isl_dim_type))

(cffi:defcfun ("isl_multi_val_drop_dims" isl_multi_val_drop_dims) :pointer
  (multi :pointer)
  (type isl_dim_type)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_val_involves_dims" isl_multi_val_involves_dims) isl_bool
  (multi :pointer)
  (type isl_dim_type)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_val_insert_dims" isl_multi_val_insert_dims) :pointer
  (multi :pointer)
  (type isl_dim_type)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_val_add_dims" isl_multi_val_add_dims) :pointer
  (multi :pointer)
  (type isl_dim_type)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_val_project_domain_on_params" isl_multi_val_project_domain_on_params) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_find_dim_by_name" isl_multi_val_find_dim_by_name) :int
  (multi :pointer)
  (type isl_dim_type)
  (name :string))

(cffi:defcfun ("isl_multi_val_find_dim_by_id" isl_multi_val_find_dim_by_id) :int
  (multi :pointer)
  (type isl_dim_type)
  (id :pointer))

(cffi:defcfun ("isl_multi_val_get_dim_id" isl_multi_val_get_dim_id) :pointer
  (multi :pointer)
  (type isl_dim_type)
  (pos :unsigned-int))

(cffi:defcfun ("isl_multi_val_set_dim_name" isl_multi_val_set_dim_name) :pointer
  (multi :pointer)
  (type isl_dim_type)
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_multi_val_set_dim_id" isl_multi_val_set_dim_id) :pointer
  (multi :pointer)
  (type isl_dim_type)
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_multi_val_get_tuple_name" isl_multi_val_get_tuple_name) :string
  (multi :pointer)
  (type isl_dim_type))

(cffi:defcfun ("isl_multi_val_has_tuple_id" isl_multi_val_has_tuple_id) isl_bool
  (multi :pointer)
  (type isl_dim_type))

(cffi:defcfun ("isl_multi_val_get_tuple_id" isl_multi_val_get_tuple_id) :pointer
  (multi :pointer)
  (type isl_dim_type))

(cffi:defcfun ("isl_multi_val_set_tuple_name" isl_multi_val_set_tuple_name) :pointer
  (multi :pointer)
  (type isl_dim_type)
  (s :string))

(cffi:defcfun ("isl_multi_val_set_tuple_id" isl_multi_val_set_tuple_id) :pointer
  (multi :pointer)
  (type isl_dim_type)
  (id :pointer))

(cffi:defcfun ("isl_multi_val_reset_tuple_id" isl_multi_val_reset_tuple_id) :pointer
  (multi :pointer)
  (type isl_dim_type))

(cffi:defcfun ("isl_multi_val_product" isl_multi_val_product) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_splice" isl_multi_val_splice) :pointer
  (multi1 :pointer)
  (in_pos :unsigned-int)
  (out_pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_val_zero" isl_val_zero) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_val_one" isl_val_one) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_val_negone" isl_val_negone) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_val_nan" isl_val_nan) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_val_infty" isl_val_infty) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_val_neginfty" isl_val_neginfty) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_val_int_from_si" isl_val_int_from_si) :pointer
  (ctx :pointer)
  (i :long))

(cffi:defcfun ("isl_val_int_from_ui" isl_val_int_from_ui) :pointer
  (ctx :pointer)
  (u :unsigned-long))

(cffi:defcfun ("isl_val_int_from_chunks" isl_val_int_from_chunks) :pointer
  (ctx :pointer)
  (n :pointer)
  (size :pointer)
  (chunks :pointer))

(cffi:defcfun ("isl_val_copy" isl_val_copy) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_free" isl_val_free) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_get_ctx" isl_val_get_ctx) :pointer
  (val :pointer))

(cffi:defcfun ("isl_val_get_hash" isl_val_get_hash) :pointer
  (val :pointer))

(cffi:defcfun ("isl_val_get_num_si" isl_val_get_num_si) :long
  (v :pointer))

(cffi:defcfun ("isl_val_get_den_si" isl_val_get_den_si) :long
  (v :pointer))

(cffi:defcfun ("isl_val_get_den_val" isl_val_get_den_val) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_get_d" isl_val_get_d) :double
  (v :pointer))

(cffi:defcfun ("isl_val_n_abs_num_chunks" isl_val_n_abs_num_chunks) :int
  (v :pointer)
  (size :pointer))

(cffi:defcfun ("isl_val_get_abs_num_chunks" isl_val_get_abs_num_chunks) isl_stat
  (v :pointer)
  (size :pointer)
  (chunks :pointer))

(cffi:defcfun ("isl_val_set_si" isl_val_set_si) :pointer
  (v :pointer)
  (i :long))

(cffi:defcfun ("isl_val_abs" isl_val_abs) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_neg" isl_val_neg) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_inv" isl_val_inv) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_floor" isl_val_floor) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_ceil" isl_val_ceil) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_trunc" isl_val_trunc) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_2exp" isl_val_2exp) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_pow2" isl_val_pow2) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_min" isl_val_min) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_max" isl_val_max) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_add" isl_val_add) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_add_ui" isl_val_add_ui) :pointer
  (v1 :pointer)
  (v2 :unsigned-long))

(cffi:defcfun ("isl_val_sub" isl_val_sub) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_sub_ui" isl_val_sub_ui) :pointer
  (v1 :pointer)
  (v2 :unsigned-long))

(cffi:defcfun ("isl_val_mul" isl_val_mul) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_mul_ui" isl_val_mul_ui) :pointer
  (v1 :pointer)
  (v2 :unsigned-long))

(cffi:defcfun ("isl_val_div" isl_val_div) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_div_ui" isl_val_div_ui) :pointer
  (v1 :pointer)
  (v2 :unsigned-long))

(cffi:defcfun ("isl_val_mod" isl_val_mod) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_gcd" isl_val_gcd) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_gcdext" isl_val_gcdext) :pointer
  (v1 :pointer)
  (v2 :pointer)
  (x :pointer)
  (y :pointer))

(cffi:defcfun ("isl_val_sgn" isl_val_sgn) :int
  (v :pointer))

(cffi:defcfun ("isl_val_is_zero" isl_val_is_zero) isl_bool
  (v :pointer))

(cffi:defcfun ("isl_val_is_one" isl_val_is_one) isl_bool
  (v :pointer))

(cffi:defcfun ("isl_val_is_negone" isl_val_is_negone) isl_bool
  (v :pointer))

(cffi:defcfun ("isl_val_is_nonneg" isl_val_is_nonneg) isl_bool
  (v :pointer))

(cffi:defcfun ("isl_val_is_nonpos" isl_val_is_nonpos) isl_bool
  (v :pointer))

(cffi:defcfun ("isl_val_is_pos" isl_val_is_pos) isl_bool
  (v :pointer))

(cffi:defcfun ("isl_val_is_neg" isl_val_is_neg) isl_bool
  (v :pointer))

(cffi:defcfun ("isl_val_is_int" isl_val_is_int) isl_bool
  (v :pointer))

(cffi:defcfun ("isl_val_is_rat" isl_val_is_rat) isl_bool
  (v :pointer))

(cffi:defcfun ("isl_val_is_nan" isl_val_is_nan) isl_bool
  (v :pointer))

(cffi:defcfun ("isl_val_is_infty" isl_val_is_infty) isl_bool
  (v :pointer))

(cffi:defcfun ("isl_val_is_neginfty" isl_val_is_neginfty) isl_bool
  (v :pointer))

(cffi:defcfun ("isl_val_cmp_si" isl_val_cmp_si) :int
  (v :pointer)
  (i :long))

(cffi:defcfun ("isl_val_lt" isl_val_lt) isl_bool
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_le" isl_val_le) isl_bool
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_gt" isl_val_gt) isl_bool
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_gt_si" isl_val_gt_si) isl_bool
  (v :pointer)
  (i :long))

(cffi:defcfun ("isl_val_ge" isl_val_ge) isl_bool
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_eq" isl_val_eq) isl_bool
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_ne" isl_val_ne) isl_bool
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_abs_eq" isl_val_abs_eq) isl_bool
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_is_divisible_by" isl_val_is_divisible_by) isl_bool
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_read_from_str" isl_val_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_printer_print_val" isl_printer_print_val) :pointer
  (p :pointer)
  (v :pointer))

(cffi:defcfun ("isl_val_dump" isl_val_dump) :void
  (v :pointer))

(cffi:defcfun ("isl_val_to_str" isl_val_to_str) :string
  (v :pointer))

(cffi:defcfun ("isl_multi_val_add_val" isl_multi_val_add_val) :pointer
  (mv :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_val_mod_val" isl_multi_val_mod_val) :pointer
  (mv :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_val_read_from_str" isl_multi_val_read_from_str) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_printer_print_multi_val" isl_printer_print_multi_val) :pointer
  (p :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_val_dump" isl_multi_val_dump) :void
  (mv :pointer))

(cffi:defcfun ("isl_multi_val_to_str" isl_multi_val_to_str) :string
  (mv :pointer))

(cffi:defcfun ("isl_val_list_get_ctx" isl_val_list_get_ctx) :pointer
  (list :pointer))

(cffi:defcfun ("isl_val_list_from_val" isl_val_list_from_val) :pointer
  (el :pointer))

(cffi:defcfun ("isl_val_list_alloc" isl_val_list_alloc) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_val_list_copy" isl_val_list_copy) :pointer
  (list :pointer))

(cffi:defcfun ("isl_val_list_free" isl_val_list_free) :pointer
  (list :pointer))

(cffi:defcfun ("isl_val_list_add" isl_val_list_add) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_val_list_insert" isl_val_list_insert) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_val_list_drop" isl_val_list_drop) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_val_list_clear" isl_val_list_clear) :pointer
  (list :pointer))

(cffi:defcfun ("isl_val_list_swap" isl_val_list_swap) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_val_list_reverse" isl_val_list_reverse) :pointer
  (list :pointer))

(cffi:defcfun ("isl_val_list_concat" isl_val_list_concat) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_val_list_size" isl_val_list_size) :int
  (list :pointer))

(cffi:defcfun ("isl_val_list_n_val" isl_val_list_n_val) :int
  (list :pointer))

(cffi:defcfun ("isl_val_list_get_at" isl_val_list_get_at) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_val_list_get_val" isl_val_list_get_val) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_val_list_set_val" isl_val_list_set_val) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_val_list_foreach" isl_val_list_foreach) isl_stat
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_val_list_map" isl_val_list_map) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_val_list_sort" isl_val_list_sort) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_val_list_foreach_scc" isl_val_list_foreach_scc) isl_stat
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_val_list_to_str" isl_val_list_to_str) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_val_list" isl_printer_print_val_list) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_val_list_dump" isl_val_list_dump) :void
  (list :pointer))

(cffi:defcfun ("isl_vec_alloc" isl_vec_alloc) :pointer
  (ctx :pointer)
  (size :unsigned-int))

(cffi:defcfun ("isl_vec_zero" isl_vec_zero) :pointer
  (ctx :pointer)
  (size :unsigned-int))

(cffi:defcfun ("isl_vec_copy" isl_vec_copy) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_free" isl_vec_free) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_get_ctx" isl_vec_get_ctx) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_size" isl_vec_size) :int
  (vec :pointer))

(cffi:defcfun ("isl_vec_get_element_val" isl_vec_get_element_val) :pointer
  (vec :pointer)
  (pos :int))

(cffi:defcfun ("isl_vec_set_element_si" isl_vec_set_element_si) :pointer
  (vec :pointer)
  (pos :int)
  (v :int))

(cffi:defcfun ("isl_vec_set_element_val" isl_vec_set_element_val) :pointer
  (vec :pointer)
  (pos :int)
  (v :pointer))

(cffi:defcfun ("isl_vec_is_equal" isl_vec_is_equal) isl_bool
  (vec1 :pointer)
  (vec2 :pointer))

(cffi:defcfun ("isl_vec_cmp_element" isl_vec_cmp_element) :int
  (vec1 :pointer)
  (vec2 :pointer)
  (pos :int))

(cffi:defcfun ("isl_vec_dump" isl_vec_dump) :void
  (vec :pointer))

(cffi:defcfun ("isl_printer_print_vec" isl_printer_print_vec) :pointer
  (printer :pointer)
  (vec :pointer))

(cffi:defcfun ("isl_vec_ceil" isl_vec_ceil) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_normalize" isl_vec_normalize) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_set_si" isl_vec_set_si) :pointer
  (vec :pointer)
  (v :int))

(cffi:defcfun ("isl_vec_set_val" isl_vec_set_val) :pointer
  (vec :pointer)
  (v :pointer))

(cffi:defcfun ("isl_vec_clr" isl_vec_clr) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_neg" isl_vec_neg) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_add" isl_vec_add) :pointer
  (vec1 :pointer)
  (vec2 :pointer))

(cffi:defcfun ("isl_vec_extend" isl_vec_extend) :pointer
  (vec :pointer)
  (size :unsigned-int))

(cffi:defcfun ("isl_vec_zero_extend" isl_vec_zero_extend) :pointer
  (vec :pointer)
  (size :unsigned-int))

(cffi:defcfun ("isl_vec_concat" isl_vec_concat) :pointer
  (vec1 :pointer)
  (vec2 :pointer))

(cffi:defcfun ("isl_vec_sort" isl_vec_sort) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_read_from_file" isl_vec_read_from_file) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_vec_drop_els" isl_vec_drop_els) :pointer
  (vec :pointer)
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_vec_add_els" isl_vec_add_els) :pointer
  (vec :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_vec_insert_els" isl_vec_insert_els) :pointer
  (vec :pointer)
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_vec_insert_zero_els" isl_vec_insert_zero_els) :pointer
  (vec :pointer)
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_vec_move_els" isl_vec_move_els) :pointer
  (vec :pointer)
  (dst_col :unsigned-int)
  (src_col :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_version" isl_version) :string)

(cffi:defcfun ("isl_vertex_get_ctx" isl_vertex_get_ctx) :pointer
  (vertex :pointer))

(cffi:defcfun ("isl_vertex_get_id" isl_vertex_get_id) :int
  (vertex :pointer))

(cffi:defcfun ("isl_vertex_get_domain" isl_vertex_get_domain) :pointer
  (vertex :pointer))

(cffi:defcfun ("isl_vertex_get_expr" isl_vertex_get_expr) :pointer
  (vertex :pointer))

(cffi:defcfun ("isl_vertex_free" isl_vertex_free) :pointer
  (vertex :pointer))

(cffi:defcfun ("isl_basic_set_compute_vertices" isl_basic_set_compute_vertices) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_vertices_get_ctx" isl_vertices_get_ctx) :pointer
  (vertices :pointer))

(cffi:defcfun ("isl_vertices_get_n_vertices" isl_vertices_get_n_vertices) :int
  (vertices :pointer))

(cffi:defcfun ("isl_vertices_foreach_vertex" isl_vertices_foreach_vertex) isl_stat
  (vertices :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_vertices_free" isl_vertices_free) :pointer
  (vertices :pointer))

(cffi:defcfun ("isl_cell_get_ctx" isl_cell_get_ctx) :pointer
  (cell :pointer))

(cffi:defcfun ("isl_cell_get_domain" isl_cell_get_domain) :pointer
  (cell :pointer))

(cffi:defcfun ("isl_cell_foreach_vertex" isl_cell_foreach_vertex) isl_stat
  (cell :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_cell_free" isl_cell_free) :pointer
  (cell :pointer))

(cffi:defcfun ("isl_vertices_foreach_cell" isl_vertices_foreach_cell) isl_stat
  (vertices :pointer)
  (fn :pointer)
  (user :pointer))


